2020-02-17 07:24:44,668 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-17 07:24:44,672 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 07:24:44,674 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 07:24:44,674 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-17 07:24:44,675 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-17 07:24:44,675 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 07:24:44,676 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 07:24:44,676 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-17 07:24:44,676 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-17 07:24:44,676 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 07:24:44,677 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-17 07:24:44,677 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-17 07:24:44,677 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-17 07:24:44,677 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 07:24:44,678 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-17 07:24:44,678 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-17 07:24:44,679 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-17 07:24:44,679 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 07:24:44,680 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-17 07:24:44,680 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 07:24:44,680 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-17 07:24:44,681 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 07:24:44,681 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-17 07:24:44,684 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 07:24:44,684 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-17 07:24:44,685 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:44,685 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 07:24:44,689 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-17 07:24:44,689 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 07:24:44,690 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 07:24:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-17 07:24:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-17 07:24:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-17 07:24:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-17 07:24:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 13, 20, 45, 58), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-17 07:24:44,691 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 07:24:44,693 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-17 07:24:44,694 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip',)
2020-02-17 07:24:44,694 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 07:24:44,772 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 07:24:44,772 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-17 07:24:44,772 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:44,773 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 07:24:44,775 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 07:24:44,775 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-17 07:24:44,776 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:44,776 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 07:24:44,778 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-17 07:24:47,618 INFO sqlalchemy.engine.base.Engine Thread-28 : BEGIN (implicit)
2020-02-17 07:24:47,619 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-17 07:24:47,619 INFO sqlalchemy.engine.base.Engine Thread-28 : ('13', 1)
2020-02-17 07:24:47,620 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 07:24:47,620 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 07:24:47,631 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 07:24:47,631 INFO sqlalchemy.engine.base.Engine Thread-28 : ()
2020-02-17 07:24:47,633 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 07:24:47,633 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 07:24:47,633 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 07:24:47,636 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 07:24:47,636 INFO sqlalchemy.engine.base.Engine Thread-28 : (97,)
2020-02-17 07:24:47,637 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 07:24:47,637 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-17 07:24:47,637 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-17 07:24:47,641 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-17 07:24:47,642 INFO sqlalchemy.engine.base.Engine Thread-28 : (1, 1)
2020-02-17 07:24:47,643 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 07:24:47,643 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 07:24:47,649 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 07:24:47,649 INFO sqlalchemy.engine.base.Engine Thread-28 : (1, 1)
2020-02-17 07:24:47,649 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:47,650 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 07:24:47,707 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 07:24:47,707 INFO sqlalchemy.engine.base.Engine Thread-28 : ('philip', 1, 1)
2020-02-17 07:24:47,708 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:47,708 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 07:24:47,713 INFO sqlalchemy.engine.base.Engine Thread-28 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 07:24:47,713 INFO sqlalchemy.engine.base.Engine Thread-28 : ('philip', 1, 1)
2020-02-17 07:24:47,714 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:47,714 DEBUG sqlalchemy.engine.base.Engine Thread-28 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 07:24:47,715 INFO sqlalchemy.engine.base.Engine Thread-28 : ROLLBACK
2020-02-17 07:24:50,078 INFO sqlalchemy.engine.base.Engine Thread-37 : BEGIN (implicit)
2020-02-17 07:24:50,080 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 07:24:50,081 INFO sqlalchemy.engine.base.Engine Thread-37 : ()
2020-02-17 07:24:50,082 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 07:24:50,082 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 07:24:50,082 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 07:24:50,084 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 07:24:50,084 INFO sqlalchemy.engine.base.Engine Thread-37 : (1, 1)
2020-02-17 07:24:50,085 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:50,085 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 07:24:50,098 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 07:24:50,099 INFO sqlalchemy.engine.base.Engine Thread-37 : ('philip', 1, 1)
2020-02-17 07:24:50,099 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:50,099 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 07:24:50,101 INFO sqlalchemy.engine.base.Engine Thread-37 : ROLLBACK
2020-02-17 07:24:50,545 INFO sqlalchemy.engine.base.Engine Thread-46 : BEGIN (implicit)
2020-02-17 07:24:50,547 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 07:24:50,547 INFO sqlalchemy.engine.base.Engine Thread-46 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 07:24:50,548 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:24:50,549 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 07:24:50,552 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 07:24:50,552 INFO sqlalchemy.engine.base.Engine Thread-46 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 07:24:50,553 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:24:50,553 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 07:24:50,556 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 07:24:50,556 INFO sqlalchemy.engine.base.Engine Thread-46 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 07:24:50,557 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:24:50,557 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:24:50,557 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:24:50,557 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:24:50,561 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 07:24:50,561 INFO sqlalchemy.engine.base.Engine Thread-46 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 07:24:50,561 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:24:50,562 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 07:24:50,562 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 07:24:50,563 INFO sqlalchemy.engine.base.Engine Thread-46 : ROLLBACK
2020-02-17 07:24:50,583 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-02-17 07:24:50,585 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 07:24:50,585 INFO sqlalchemy.engine.base.Engine Thread-47 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 07:24:50,586 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:24:50,586 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 07:24:50,590 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 07:24:50,590 INFO sqlalchemy.engine.base.Engine Thread-47 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 07:24:50,590 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:24:50,591 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 07:24:50,594 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 07:24:50,594 INFO sqlalchemy.engine.base.Engine Thread-47 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 07:24:50,594 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:24:50,595 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:24:50,595 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:24:50,595 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:24:50,598 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 07:24:50,598 INFO sqlalchemy.engine.base.Engine Thread-47 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 07:24:50,599 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:24:50,599 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 07:24:50,599 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 07:24:50,600 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-02-17 07:24:56,207 INFO sqlalchemy.engine.base.Engine Thread-48 : BEGIN (implicit)
2020-02-17 07:24:56,208 INFO sqlalchemy.engine.base.Engine Thread-48 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 07:24:56,208 INFO sqlalchemy.engine.base.Engine Thread-48 : (1, 1)
2020-02-17 07:24:56,209 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:56,209 DEBUG sqlalchemy.engine.base.Engine Thread-48 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 07:24:56,214 INFO sqlalchemy.engine.base.Engine Thread-48 : ROLLBACK
2020-02-17 07:24:56,432 INFO sqlalchemy.engine.base.Engine Thread-50 : BEGIN (implicit)
2020-02-17 07:24:56,433 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 07:24:56,433 INFO sqlalchemy.engine.base.Engine Thread-50 : ()
2020-02-17 07:24:56,434 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 07:24:56,434 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 07:24:56,434 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 07:24:56,435 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 07:24:56,436 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 07:24:56,436 INFO sqlalchemy.engine.base.Engine Thread-50 : (63,)
2020-02-17 07:24:56,437 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 07:24:56,437 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 07:24:56,437 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 07:24:56,437 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 07:24:56,438 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 07:24:56,438 INFO sqlalchemy.engine.base.Engine Thread-50 : (124, 1)
2020-02-17 07:24:56,439 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 07:24:56,439 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 07:24:56,450 INFO sqlalchemy.engine.base.Engine Thread-50 : ROLLBACK
2020-02-17 07:24:59,280 INFO sqlalchemy.engine.base.Engine Thread-52 : BEGIN (implicit)
2020-02-17 07:24:59,281 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 07:24:59,281 INFO sqlalchemy.engine.base.Engine Thread-52 : ()
2020-02-17 07:24:59,282 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 07:24:59,282 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 07:24:59,282 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 07:24:59,282 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 07:24:59,283 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 07:24:59,284 INFO sqlalchemy.engine.base.Engine Thread-52 : (63,)
2020-02-17 07:24:59,284 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 07:24:59,284 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 07:24:59,285 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 07:24:59,285 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 07:24:59,286 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 07:24:59,286 INFO sqlalchemy.engine.base.Engine Thread-52 : (124, 1)
2020-02-17 07:24:59,287 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 07:24:59,287 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 07:24:59,289 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.login_id = %s 
 LIMIT %s
2020-02-17 07:24:59,289 INFO sqlalchemy.engine.base.Engine Thread-52 : ('bob', 1)
2020-02-17 07:24:59,290 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:59,290 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 07:24:59,291 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles 
WHERE roles.id = %s 
 LIMIT %s
2020-02-17 07:24:59,291 INFO sqlalchemy.engine.base.Engine Thread-52 : (1, 1)
2020-02-17 07:24:59,292 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 07:24:59,292 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 07:24:59,635 INFO sqlalchemy.engine.base.Engine Thread-52 : ROLLBACK
2020-02-17 07:24:59,724 INFO sqlalchemy.engine.base.Engine Thread-53 : BEGIN (implicit)
2020-02-17 07:24:59,725 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 07:24:59,725 INFO sqlalchemy.engine.base.Engine Thread-53 : (2, 1)
2020-02-17 07:24:59,726 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:59,726 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 07:24:59,728 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-17 07:24:59,728 INFO sqlalchemy.engine.base.Engine Thread-53 : ()
2020-02-17 07:24:59,729 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 07:24:59,729 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-17 07:24:59,729 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-17 07:24:59,729 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-17 07:24:59,729 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-17 07:24:59,730 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 13, 20, 45, 58), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-17 07:24:59,730 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 07:24:59,732 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-17 07:24:59,732 INFO sqlalchemy.engine.base.Engine Thread-53 : ('bob',)
2020-02-17 07:24:59,733 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 07:24:59,733 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 07:24:59,737 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 07:24:59,737 INFO sqlalchemy.engine.base.Engine Thread-53 : ('bob', 1, 1)
2020-02-17 07:24:59,738 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:59,740 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 07:24:59,741 INFO sqlalchemy.engine.base.Engine Thread-53 : ('bob', 1, 1)
2020-02-17 07:24:59,741 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:24:59,743 INFO sqlalchemy.engine.base.Engine Thread-53 : ROLLBACK
2020-02-17 07:25:05,246 INFO sqlalchemy.engine.base.Engine Thread-62 : BEGIN (implicit)
2020-02-17 07:25:05,247 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-17 07:25:05,247 INFO sqlalchemy.engine.base.Engine Thread-62 : ('13', 1)
2020-02-17 07:25:05,249 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 07:25:05,249 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 07:25:05,254 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 07:25:05,254 INFO sqlalchemy.engine.base.Engine Thread-62 : ()
2020-02-17 07:25:05,255 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 07:25:05,255 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 07:25:05,256 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 07:25:05,257 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 07:25:05,257 INFO sqlalchemy.engine.base.Engine Thread-62 : (97,)
2020-02-17 07:25:05,258 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 07:25:05,258 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-17 07:25:05,258 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-17 07:25:05,261 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-17 07:25:05,261 INFO sqlalchemy.engine.base.Engine Thread-62 : (1, 1)
2020-02-17 07:25:05,262 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 07:25:05,262 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 07:25:05,264 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 07:25:05,265 INFO sqlalchemy.engine.base.Engine Thread-62 : (2, 1)
2020-02-17 07:25:05,265 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:25:05,265 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 07:25:05,270 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 07:25:05,270 INFO sqlalchemy.engine.base.Engine Thread-62 : ('bob', 1, 1)
2020-02-17 07:25:05,271 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:25:05,277 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 07:25:05,277 INFO sqlalchemy.engine.base.Engine Thread-62 : ('bob', 1, 1)
2020-02-17 07:25:05,278 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:25:05,279 INFO sqlalchemy.engine.base.Engine Thread-62 : ROLLBACK
2020-02-17 07:25:34,681 INFO sqlalchemy.engine.base.Engine Thread-71 : BEGIN (implicit)
2020-02-17 07:25:34,683 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 07:25:34,683 INFO sqlalchemy.engine.base.Engine Thread-71 : ()
2020-02-17 07:25:34,684 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 07:25:34,685 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 07:25:34,685 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 07:25:34,687 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 07:25:34,687 INFO sqlalchemy.engine.base.Engine Thread-71 : (2, 1)
2020-02-17 07:25:34,687 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:25:34,688 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 07:25:34,691 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 07:25:34,691 INFO sqlalchemy.engine.base.Engine Thread-71 : ('bob', 1, 1)
2020-02-17 07:25:34,692 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 07:25:34,693 INFO sqlalchemy.engine.base.Engine Thread-71 : ROLLBACK
2020-02-17 07:25:35,232 INFO sqlalchemy.engine.base.Engine Thread-80 : BEGIN (implicit)
2020-02-17 07:25:35,233 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 07:25:35,233 INFO sqlalchemy.engine.base.Engine Thread-80 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 07:25:35,234 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:25:35,234 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 07:25:35,238 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 07:25:35,238 INFO sqlalchemy.engine.base.Engine Thread-80 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 07:25:35,239 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:25:35,239 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 07:25:35,242 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 07:25:35,242 INFO sqlalchemy.engine.base.Engine Thread-80 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 07:25:35,243 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:25:35,243 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:25:35,243 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:25:35,243 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:25:35,247 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 07:25:35,247 INFO sqlalchemy.engine.base.Engine Thread-80 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 07:25:35,248 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:25:35,248 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 07:25:35,248 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 07:25:35,249 INFO sqlalchemy.engine.base.Engine Thread-80 : ROLLBACK
2020-02-17 07:25:35,281 INFO sqlalchemy.engine.base.Engine Thread-81 : BEGIN (implicit)
2020-02-17 07:25:35,283 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 07:25:35,283 INFO sqlalchemy.engine.base.Engine Thread-81 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 07:25:35,284 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:25:35,284 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 07:25:35,288 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 07:25:35,288 INFO sqlalchemy.engine.base.Engine Thread-81 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 07:25:35,288 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:25:35,289 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 07:25:35,292 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 07:25:35,292 INFO sqlalchemy.engine.base.Engine Thread-81 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 07:25:35,293 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:25:35,293 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:25:35,293 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:25:35,293 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 07:25:35,297 INFO sqlalchemy.engine.base.Engine Thread-81 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 07:25:35,297 INFO sqlalchemy.engine.base.Engine Thread-81 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 07:25:35,297 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 07:25:35,297 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 07:25:35,298 DEBUG sqlalchemy.engine.base.Engine Thread-81 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 07:25:35,299 INFO sqlalchemy.engine.base.Engine Thread-81 : ROLLBACK
2020-02-17 10:04:38,111 INFO sqlalchemy.engine.base.Engine Thread-82 : BEGIN (implicit)
2020-02-17 10:04:38,113 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 10:04:38,113 INFO sqlalchemy.engine.base.Engine Thread-82 : (2, 1)
2020-02-17 10:04:38,114 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:04:38,115 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 10:04:38,116 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-17 10:04:38,117 INFO sqlalchemy.engine.base.Engine Thread-82 : ()
2020-02-17 10:04:38,117 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 10:04:38,118 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-17 10:04:38,118 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-17 10:04:38,118 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-17 10:04:38,118 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-17 10:04:38,118 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 13, 20, 45, 58), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-17 10:04:38,118 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 10:04:38,120 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-17 10:04:38,120 INFO sqlalchemy.engine.base.Engine Thread-82 : ('bob',)
2020-02-17 10:04:38,121 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 10:04:38,121 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 10:04:38,126 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:04:38,126 INFO sqlalchemy.engine.base.Engine Thread-82 : ('bob', 1, 1)
2020-02-17 10:04:38,126 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:04:38,129 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:04:38,130 INFO sqlalchemy.engine.base.Engine Thread-82 : ('bob', 1, 1)
2020-02-17 10:04:38,130 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:04:38,131 INFO sqlalchemy.engine.base.Engine Thread-82 : ROLLBACK
2020-02-17 10:04:40,368 INFO sqlalchemy.engine.base.Engine Thread-91 : BEGIN (implicit)
2020-02-17 10:04:40,370 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 10:04:40,370 INFO sqlalchemy.engine.base.Engine Thread-91 : ()
2020-02-17 10:04:40,372 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 10:04:40,372 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 10:04:40,372 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 10:04:40,374 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 10:04:40,374 INFO sqlalchemy.engine.base.Engine Thread-91 : (2, 1)
2020-02-17 10:04:40,375 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:04:40,375 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 10:04:40,379 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:04:40,379 INFO sqlalchemy.engine.base.Engine Thread-91 : ('bob', 1, 1)
2020-02-17 10:04:40,379 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:04:40,381 INFO sqlalchemy.engine.base.Engine Thread-91 : ROLLBACK
2020-02-17 10:04:40,795 INFO sqlalchemy.engine.base.Engine Thread-100 : BEGIN (implicit)
2020-02-17 10:04:40,796 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:04:40,797 INFO sqlalchemy.engine.base.Engine Thread-100 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 10:04:40,798 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:04:40,798 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 10:04:40,801 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:04:40,801 INFO sqlalchemy.engine.base.Engine Thread-100 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 10:04:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:04:40,802 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 10:04:40,805 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:04:40,805 INFO sqlalchemy.engine.base.Engine Thread-100 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:04:40,806 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:04:40,806 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:04:40,806 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:04:40,806 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:04:40,809 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:04:40,809 INFO sqlalchemy.engine.base.Engine Thread-100 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:04:40,810 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:04:40,810 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:04:40,810 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:04:40,811 INFO sqlalchemy.engine.base.Engine Thread-100 : ROLLBACK
2020-02-17 10:04:40,829 INFO sqlalchemy.engine.base.Engine Thread-101 : BEGIN (implicit)
2020-02-17 10:04:40,831 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:04:40,831 INFO sqlalchemy.engine.base.Engine Thread-101 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 10:04:40,832 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:04:40,832 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 10:04:40,835 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:04:40,835 INFO sqlalchemy.engine.base.Engine Thread-101 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 10:04:40,836 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:04:40,836 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 10:04:40,839 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:04:40,839 INFO sqlalchemy.engine.base.Engine Thread-101 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:04:40,840 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:04:40,840 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:04:40,840 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:04:40,840 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:04:40,843 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:04:40,843 INFO sqlalchemy.engine.base.Engine Thread-101 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:04:40,844 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:04:40,844 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:04:40,844 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:04:40,845 INFO sqlalchemy.engine.base.Engine Thread-101 : ROLLBACK
2020-02-17 10:04:45,526 INFO sqlalchemy.engine.base.Engine Thread-102 : BEGIN (implicit)
2020-02-17 10:04:45,528 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-17 10:04:45,528 INFO sqlalchemy.engine.base.Engine Thread-102 : ('0', 1)
2020-02-17 10:04:45,528 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 10:04:45,533 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 10:04:45,533 INFO sqlalchemy.engine.base.Engine Thread-102 : ()
2020-02-17 10:04:45,534 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 10:04:45,535 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 10:04:45,535 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 10:04:45,536 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 10:04:45,536 INFO sqlalchemy.engine.base.Engine Thread-102 : (97,)
2020-02-17 10:04:45,537 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 10:04:45,537 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-17 10:04:45,537 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-17 10:04:45,540 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-17 10:04:45,540 INFO sqlalchemy.engine.base.Engine Thread-102 : (1, 1)
2020-02-17 10:04:45,541 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 10:04:45,541 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 10:04:45,545 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 10:04:45,545 INFO sqlalchemy.engine.base.Engine Thread-102 : (2, 1)
2020-02-17 10:04:45,546 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:04:45,546 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 10:04:45,550 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:04:45,550 INFO sqlalchemy.engine.base.Engine Thread-102 : ('bob', 1, 1)
2020-02-17 10:04:45,550 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:04:45,555 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:04:45,555 INFO sqlalchemy.engine.base.Engine Thread-102 : ('bob', 1, 1)
2020-02-17 10:04:45,555 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:04:45,556 INFO sqlalchemy.engine.base.Engine Thread-102 : ROLLBACK
2020-02-17 10:04:54,243 INFO sqlalchemy.engine.base.Engine Thread-111 : BEGIN (implicit)
2020-02-17 10:04:54,244 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-17 10:04:54,244 INFO sqlalchemy.engine.base.Engine Thread-111 : ('0', 1)
2020-02-17 10:04:54,245 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 10:04:54,253 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 10:04:54,253 INFO sqlalchemy.engine.base.Engine Thread-111 : ()
2020-02-17 10:04:54,254 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 10:04:54,254 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 10:04:54,255 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 10:04:54,256 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 10:04:54,256 INFO sqlalchemy.engine.base.Engine Thread-111 : (97,)
2020-02-17 10:04:54,257 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 10:04:54,257 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-17 10:04:54,257 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-17 10:04:54,260 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 10:04:54,260 INFO sqlalchemy.engine.base.Engine Thread-111 : (2, 1)
2020-02-17 10:04:54,260 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:04:54,261 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 10:04:54,265 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:04:54,265 INFO sqlalchemy.engine.base.Engine Thread-111 : ('bob', 1, 1)
2020-02-17 10:04:54,265 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:04:54,270 INFO sqlalchemy.engine.base.Engine Thread-111 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:04:54,270 INFO sqlalchemy.engine.base.Engine Thread-111 : ('bob', 1, 1)
2020-02-17 10:04:54,271 DEBUG sqlalchemy.engine.base.Engine Thread-111 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:04:54,273 INFO sqlalchemy.engine.base.Engine Thread-111 : ROLLBACK
2020-02-17 10:05:00,907 INFO sqlalchemy.engine.base.Engine Thread-120 : BEGIN (implicit)
2020-02-17 10:05:00,909 INFO sqlalchemy.engine.base.Engine Thread-120 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.complex_active = %s
2020-02-17 10:05:00,909 INFO sqlalchemy.engine.base.Engine Thread-120 : (1,)
2020-02-17 10:05:00,910 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 10:05:00,910 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 10:05:00,911 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 10:05:00,913 INFO sqlalchemy.engine.base.Engine Thread-120 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 10:05:00,913 INFO sqlalchemy.engine.base.Engine Thread-120 : (2, 1)
2020-02-17 10:05:00,913 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:00,914 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 10:05:00,929 INFO sqlalchemy.engine.base.Engine Thread-120 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:05:00,929 INFO sqlalchemy.engine.base.Engine Thread-120 : ('bob', 1, 1)
2020-02-17 10:05:00,929 DEBUG sqlalchemy.engine.base.Engine Thread-120 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:00,931 INFO sqlalchemy.engine.base.Engine Thread-120 : ROLLBACK
2020-02-17 10:05:05,134 INFO sqlalchemy.engine.base.Engine Thread-129 : BEGIN (implicit)
2020-02-17 10:05:05,135 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.id ASC
2020-02-17 10:05:05,135 INFO sqlalchemy.engine.base.Engine Thread-129 : (113,)
2020-02-17 10:05:05,136 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('parameters_param_name', 'parameters_param_value')
2020-02-17 10:05:05,137 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row ('1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.')
2020-02-17 10:05:05,137 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row ('2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>')
2020-02-17 10:05:05,138 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 10:05:05,139 INFO sqlalchemy.engine.base.Engine Thread-129 : (2, 1)
2020-02-17 10:05:05,139 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:05,140 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 10:05:05,150 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:05:05,150 INFO sqlalchemy.engine.base.Engine Thread-129 : ('bob', 1, 1)
2020-02-17 10:05:05,151 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:05,152 INFO sqlalchemy.engine.base.Engine Thread-129 : ROLLBACK
2020-02-17 10:05:07,679 INFO sqlalchemy.engine.base.Engine Thread-138 : BEGIN (implicit)
2020-02-17 10:05:07,682 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 10:05:07,682 INFO sqlalchemy.engine.base.Engine Thread-138 : ()
2020-02-17 10:05:07,683 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 10:05:07,683 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 10:05:07,683 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 10:05:07,685 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 10:05:07,685 INFO sqlalchemy.engine.base.Engine Thread-138 : (2, 1)
2020-02-17 10:05:07,686 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:07,686 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 10:05:07,690 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:05:07,690 INFO sqlalchemy.engine.base.Engine Thread-138 : ('bob', 1, 1)
2020-02-17 10:05:07,691 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:07,692 INFO sqlalchemy.engine.base.Engine Thread-138 : ROLLBACK
2020-02-17 10:05:08,064 INFO sqlalchemy.engine.base.Engine Thread-147 : BEGIN (implicit)
2020-02-17 10:05:08,066 INFO sqlalchemy.engine.base.Engine Thread-147 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:05:08,066 INFO sqlalchemy.engine.base.Engine Thread-147 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 10:05:08,067 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:08,067 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 10:05:08,070 INFO sqlalchemy.engine.base.Engine Thread-147 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:05:08,071 INFO sqlalchemy.engine.base.Engine Thread-147 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 10:05:08,071 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:08,072 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 10:05:08,075 INFO sqlalchemy.engine.base.Engine Thread-147 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:05:08,075 INFO sqlalchemy.engine.base.Engine Thread-147 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:05:08,076 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:08,076 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:05:08,076 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:05:08,077 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:05:08,080 INFO sqlalchemy.engine.base.Engine Thread-147 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:05:08,080 INFO sqlalchemy.engine.base.Engine Thread-147 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:05:08,081 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:08,081 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:05:08,081 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:05:08,082 INFO sqlalchemy.engine.base.Engine Thread-147 : ROLLBACK
2020-02-17 10:05:08,105 INFO sqlalchemy.engine.base.Engine Thread-148 : BEGIN (implicit)
2020-02-17 10:05:08,106 INFO sqlalchemy.engine.base.Engine Thread-148 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:05:08,106 INFO sqlalchemy.engine.base.Engine Thread-148 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 10:05:08,107 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:08,107 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 10:05:08,110 INFO sqlalchemy.engine.base.Engine Thread-148 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:05:08,111 INFO sqlalchemy.engine.base.Engine Thread-148 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 10:05:08,111 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:08,112 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 10:05:08,115 INFO sqlalchemy.engine.base.Engine Thread-148 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:05:08,115 INFO sqlalchemy.engine.base.Engine Thread-148 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:05:08,116 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:08,116 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:05:08,116 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:05:08,116 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:05:08,120 INFO sqlalchemy.engine.base.Engine Thread-148 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:05:08,120 INFO sqlalchemy.engine.base.Engine Thread-148 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:05:08,121 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:08,121 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:05:08,121 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:05:08,122 INFO sqlalchemy.engine.base.Engine Thread-148 : ROLLBACK
2020-02-17 10:05:09,070 INFO sqlalchemy.engine.base.Engine Thread-149 : BEGIN (implicit)
2020-02-17 10:05:09,071 INFO sqlalchemy.engine.base.Engine Thread-149 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 10:05:09,071 INFO sqlalchemy.engine.base.Engine Thread-149 : (71,)
2020-02-17 10:05:09,071 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 10:05:09,071 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-17 10:05:09,072 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-17 10:05:09,072 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-17 10:05:09,074 INFO sqlalchemy.engine.base.Engine Thread-149 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 10:05:09,074 INFO sqlalchemy.engine.base.Engine Thread-149 : (2, 1)
2020-02-17 10:05:09,075 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:09,075 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 10:05:09,092 INFO sqlalchemy.engine.base.Engine Thread-149 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:05:09,092 INFO sqlalchemy.engine.base.Engine Thread-149 : ('bob', 1, 1)
2020-02-17 10:05:09,093 DEBUG sqlalchemy.engine.base.Engine Thread-149 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:09,094 INFO sqlalchemy.engine.base.Engine Thread-149 : ROLLBACK
2020-02-17 10:05:13,612 INFO sqlalchemy.engine.base.Engine Thread-158 : BEGIN (implicit)
2020-02-17 10:05:13,613 INFO sqlalchemy.engine.base.Engine Thread-158 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 10:05:13,613 INFO sqlalchemy.engine.base.Engine Thread-158 : (71,)
2020-02-17 10:05:13,613 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 10:05:13,614 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-17 10:05:13,614 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-17 10:05:13,614 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-17 10:05:13,618 INFO sqlalchemy.engine.base.Engine Thread-158 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-17 10:05:13,618 INFO sqlalchemy.engine.base.Engine Thread-158 : (' ', '%test%', ' ', '%Christmas%')
2020-02-17 10:05:13,619 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-17 10:05:13,619 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-17 10:05:13,619 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-17 10:05:13,623 INFO sqlalchemy.engine.base.Engine Thread-158 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-17 10:05:13,623 INFO sqlalchemy.engine.base.Engine Thread-158 : (' ', '%test%', ' ', '%Christmas%')
2020-02-17 10:05:13,624 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-17 10:05:13,624 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-17 10:05:13,624 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-17 10:05:13,624 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-17 10:05:13,624 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-17 10:05:13,624 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-17 10:05:13,624 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (13, "Bob's test booking", 'project doing something', datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0))
2020-02-17 10:05:13,626 INFO sqlalchemy.engine.base.Engine Thread-158 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 10:05:13,626 INFO sqlalchemy.engine.base.Engine Thread-158 : (2, 1)
2020-02-17 10:05:13,627 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:13,627 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 10:05:13,631 INFO sqlalchemy.engine.base.Engine Thread-158 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:05:13,631 INFO sqlalchemy.engine.base.Engine Thread-158 : ('bob', 1, 1)
2020-02-17 10:05:13,632 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:13,634 INFO sqlalchemy.engine.base.Engine Thread-158 : ROLLBACK
2020-02-17 10:05:18,009 INFO sqlalchemy.engine.base.Engine Thread-167 : BEGIN (implicit)
2020-02-17 10:05:18,011 INFO sqlalchemy.engine.base.Engine Thread-167 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 10:05:18,011 INFO sqlalchemy.engine.base.Engine Thread-167 : ()
2020-02-17 10:05:18,012 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 10:05:18,012 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 10:05:18,013 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 10:05:18,015 INFO sqlalchemy.engine.base.Engine Thread-167 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 10:05:18,015 INFO sqlalchemy.engine.base.Engine Thread-167 : (2, 1)
2020-02-17 10:05:18,016 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:18,016 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 10:05:18,020 INFO sqlalchemy.engine.base.Engine Thread-167 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 10:05:18,020 INFO sqlalchemy.engine.base.Engine Thread-167 : ('bob', 1, 1)
2020-02-17 10:05:18,021 DEBUG sqlalchemy.engine.base.Engine Thread-167 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 10:05:18,022 INFO sqlalchemy.engine.base.Engine Thread-167 : ROLLBACK
2020-02-17 10:05:18,452 INFO sqlalchemy.engine.base.Engine Thread-176 : BEGIN (implicit)
2020-02-17 10:05:18,454 INFO sqlalchemy.engine.base.Engine Thread-176 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:05:18,454 INFO sqlalchemy.engine.base.Engine Thread-176 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 10:05:18,460 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:18,464 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 10:05:18,471 INFO sqlalchemy.engine.base.Engine Thread-176 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:05:18,471 INFO sqlalchemy.engine.base.Engine Thread-176 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 10:05:18,472 INFO sqlalchemy.engine.base.Engine Thread-177 : BEGIN (implicit)
2020-02-17 10:05:18,472 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:18,473 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:05:18,474 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 10:05:18,474 INFO sqlalchemy.engine.base.Engine Thread-177 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), 'YES')
2020-02-17 10:05:18,477 INFO sqlalchemy.engine.base.Engine Thread-176 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:05:18,477 INFO sqlalchemy.engine.base.Engine Thread-176 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:05:18,478 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:18,478 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 10:05:18,481 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:05:18,481 INFO sqlalchemy.engine.base.Engine Thread-177 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), 'NO')
2020-02-17 10:05:18,482 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:18,482 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:18,482 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:05:18,483 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 10:05:18,483 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:05:18,483 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 10:05:18,483 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:05:18,486 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:05:18,490 INFO sqlalchemy.engine.base.Engine Thread-176 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:05:18,490 INFO sqlalchemy.engine.base.Engine Thread-177 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0))
2020-02-17 10:05:18,491 INFO sqlalchemy.engine.base.Engine Thread-176 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:05:18,491 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:18,494 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:05:18,495 INFO sqlalchemy.engine.base.Engine Thread-177 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0))
2020-02-17 10:05:18,495 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:18,495 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:05:18,495 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:05:18,496 INFO sqlalchemy.engine.base.Engine Thread-176 : ROLLBACK
2020-02-17 10:05:18,497 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:05:18,498 INFO sqlalchemy.engine.base.Engine Thread-177 : ROLLBACK
2020-02-17 10:06:16,425 INFO sqlalchemy.engine.base.Engine Thread-178 : BEGIN (implicit)
2020-02-17 10:06:16,427 INFO sqlalchemy.engine.base.Engine Thread-178 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:16,427 INFO sqlalchemy.engine.base.Engine Thread-178 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0), datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0), datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0), 'YES')
2020-02-17 10:06:16,428 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,432 INFO sqlalchemy.engine.base.Engine Thread-178 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:16,432 INFO sqlalchemy.engine.base.Engine Thread-178 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0), datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0), datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0), 'NO')
2020-02-17 10:06:16,432 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,435 INFO sqlalchemy.engine.base.Engine Thread-178 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:16,435 INFO sqlalchemy.engine.base.Engine Thread-178 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0), datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0), datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0))
2020-02-17 10:06:16,436 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,439 INFO sqlalchemy.engine.base.Engine Thread-178 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:16,439 INFO sqlalchemy.engine.base.Engine Thread-178 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0), datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0), datetime.datetime(2019, 11, 25, 0, 0), datetime.datetime(2020, 1, 6, 0, 0))
2020-02-17 10:06:16,440 DEBUG sqlalchemy.engine.base.Engine Thread-178 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,441 INFO sqlalchemy.engine.base.Engine Thread-178 : ROLLBACK
2020-02-17 10:06:16,590 INFO sqlalchemy.engine.base.Engine Thread-179 : BEGIN (implicit)
2020-02-17 10:06:16,591 INFO sqlalchemy.engine.base.Engine Thread-179 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:16,591 INFO sqlalchemy.engine.base.Engine Thread-179 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0), datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0), datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0), 'YES')
2020-02-17 10:06:16,592 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,595 INFO sqlalchemy.engine.base.Engine Thread-179 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:16,595 INFO sqlalchemy.engine.base.Engine Thread-179 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0), datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0), datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0), 'NO')
2020-02-17 10:06:16,596 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,599 INFO sqlalchemy.engine.base.Engine Thread-179 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:16,599 INFO sqlalchemy.engine.base.Engine Thread-179 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0), datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0), datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0))
2020-02-17 10:06:16,600 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,603 INFO sqlalchemy.engine.base.Engine Thread-179 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:16,603 INFO sqlalchemy.engine.base.Engine Thread-179 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0), datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0), datetime.datetime(2018, 11, 26, 0, 0), datetime.datetime(2019, 1, 7, 0, 0))
2020-02-17 10:06:16,604 DEBUG sqlalchemy.engine.base.Engine Thread-179 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,604 INFO sqlalchemy.engine.base.Engine Thread-179 : ROLLBACK
2020-02-17 10:06:16,759 INFO sqlalchemy.engine.base.Engine Thread-180 : BEGIN (implicit)
2020-02-17 10:06:16,761 INFO sqlalchemy.engine.base.Engine Thread-180 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:16,761 INFO sqlalchemy.engine.base.Engine Thread-180 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0), datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0), datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0), 'YES')
2020-02-17 10:06:16,762 DEBUG sqlalchemy.engine.base.Engine Thread-180 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,765 INFO sqlalchemy.engine.base.Engine Thread-180 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:16,765 INFO sqlalchemy.engine.base.Engine Thread-180 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0), datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0), datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0), 'NO')
2020-02-17 10:06:16,766 DEBUG sqlalchemy.engine.base.Engine Thread-180 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,769 INFO sqlalchemy.engine.base.Engine Thread-180 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:16,769 INFO sqlalchemy.engine.base.Engine Thread-180 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0), datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0), datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0))
2020-02-17 10:06:16,770 DEBUG sqlalchemy.engine.base.Engine Thread-180 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,773 INFO sqlalchemy.engine.base.Engine Thread-180 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:16,773 INFO sqlalchemy.engine.base.Engine Thread-180 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0), datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0), datetime.datetime(2017, 11, 27, 0, 0), datetime.datetime(2018, 1, 8, 0, 0))
2020-02-17 10:06:16,773 DEBUG sqlalchemy.engine.base.Engine Thread-180 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,774 INFO sqlalchemy.engine.base.Engine Thread-180 : ROLLBACK
2020-02-17 10:06:16,925 INFO sqlalchemy.engine.base.Engine Thread-181 : BEGIN (implicit)
2020-02-17 10:06:16,927 INFO sqlalchemy.engine.base.Engine Thread-181 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:16,927 INFO sqlalchemy.engine.base.Engine Thread-181 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0), datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0), datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0), 'YES')
2020-02-17 10:06:16,927 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,931 INFO sqlalchemy.engine.base.Engine Thread-181 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:16,931 INFO sqlalchemy.engine.base.Engine Thread-181 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0), datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0), datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0), 'NO')
2020-02-17 10:06:16,932 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,935 INFO sqlalchemy.engine.base.Engine Thread-181 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:16,935 INFO sqlalchemy.engine.base.Engine Thread-181 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0), datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0), datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0))
2020-02-17 10:06:16,936 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,939 INFO sqlalchemy.engine.base.Engine Thread-181 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:16,939 INFO sqlalchemy.engine.base.Engine Thread-181 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0), datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0), datetime.datetime(2016, 11, 28, 0, 0), datetime.datetime(2017, 1, 9, 0, 0))
2020-02-17 10:06:16,939 DEBUG sqlalchemy.engine.base.Engine Thread-181 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:16,940 INFO sqlalchemy.engine.base.Engine Thread-181 : ROLLBACK
2020-02-17 10:06:17,088 INFO sqlalchemy.engine.base.Engine Thread-182 : BEGIN (implicit)
2020-02-17 10:06:17,090 INFO sqlalchemy.engine.base.Engine Thread-182 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:17,090 INFO sqlalchemy.engine.base.Engine Thread-182 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0), datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0), datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0), 'YES')
2020-02-17 10:06:17,090 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,093 INFO sqlalchemy.engine.base.Engine Thread-182 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:17,094 INFO sqlalchemy.engine.base.Engine Thread-182 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0), datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0), datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0), 'NO')
2020-02-17 10:06:17,094 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,097 INFO sqlalchemy.engine.base.Engine Thread-182 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:17,097 INFO sqlalchemy.engine.base.Engine Thread-182 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0), datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0), datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0))
2020-02-17 10:06:17,098 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,101 INFO sqlalchemy.engine.base.Engine Thread-182 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:17,101 INFO sqlalchemy.engine.base.Engine Thread-182 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0), datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0), datetime.datetime(2015, 11, 30, 0, 0), datetime.datetime(2016, 1, 11, 0, 0))
2020-02-17 10:06:17,102 DEBUG sqlalchemy.engine.base.Engine Thread-182 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,103 INFO sqlalchemy.engine.base.Engine Thread-182 : ROLLBACK
2020-02-17 10:06:17,404 INFO sqlalchemy.engine.base.Engine Thread-183 : BEGIN (implicit)
2020-02-17 10:06:17,405 INFO sqlalchemy.engine.base.Engine Thread-183 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:17,405 INFO sqlalchemy.engine.base.Engine Thread-183 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0), datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0), datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0), 'YES')
2020-02-17 10:06:17,406 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,409 INFO sqlalchemy.engine.base.Engine Thread-183 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:17,409 INFO sqlalchemy.engine.base.Engine Thread-183 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0), datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0), datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0), 'NO')
2020-02-17 10:06:17,410 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,413 INFO sqlalchemy.engine.base.Engine Thread-183 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:17,413 INFO sqlalchemy.engine.base.Engine Thread-183 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0), datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0), datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0))
2020-02-17 10:06:17,414 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,417 INFO sqlalchemy.engine.base.Engine Thread-183 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:17,417 INFO sqlalchemy.engine.base.Engine Thread-183 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0), datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0), datetime.datetime(2014, 12, 1, 0, 0), datetime.datetime(2015, 1, 12, 0, 0))
2020-02-17 10:06:17,418 DEBUG sqlalchemy.engine.base.Engine Thread-183 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,418 INFO sqlalchemy.engine.base.Engine Thread-183 : ROLLBACK
2020-02-17 10:06:17,572 INFO sqlalchemy.engine.base.Engine Thread-184 : BEGIN (implicit)
2020-02-17 10:06:17,573 INFO sqlalchemy.engine.base.Engine Thread-184 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:17,573 INFO sqlalchemy.engine.base.Engine Thread-184 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0), datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0), datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0), 'YES')
2020-02-17 10:06:17,574 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,577 INFO sqlalchemy.engine.base.Engine Thread-184 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:17,577 INFO sqlalchemy.engine.base.Engine Thread-184 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0), datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0), datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0), 'NO')
2020-02-17 10:06:17,578 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,581 INFO sqlalchemy.engine.base.Engine Thread-184 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:17,581 INFO sqlalchemy.engine.base.Engine Thread-184 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0), datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0), datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0))
2020-02-17 10:06:17,582 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,585 INFO sqlalchemy.engine.base.Engine Thread-184 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:17,585 INFO sqlalchemy.engine.base.Engine Thread-184 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0), datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0), datetime.datetime(2013, 11, 25, 0, 0), datetime.datetime(2014, 1, 6, 0, 0))
2020-02-17 10:06:17,586 DEBUG sqlalchemy.engine.base.Engine Thread-184 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,586 INFO sqlalchemy.engine.base.Engine Thread-184 : ROLLBACK
2020-02-17 10:06:17,981 INFO sqlalchemy.engine.base.Engine Thread-185 : BEGIN (implicit)
2020-02-17 10:06:17,983 INFO sqlalchemy.engine.base.Engine Thread-185 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:17,983 INFO sqlalchemy.engine.base.Engine Thread-185 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0), datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0), datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0), 'YES')
2020-02-17 10:06:17,984 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,987 INFO sqlalchemy.engine.base.Engine Thread-185 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:17,987 INFO sqlalchemy.engine.base.Engine Thread-185 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0), datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0), datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0), 'NO')
2020-02-17 10:06:17,988 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,991 INFO sqlalchemy.engine.base.Engine Thread-185 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:17,991 INFO sqlalchemy.engine.base.Engine Thread-185 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0), datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0), datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0))
2020-02-17 10:06:17,991 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,994 INFO sqlalchemy.engine.base.Engine Thread-185 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:17,995 INFO sqlalchemy.engine.base.Engine Thread-185 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0), datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0), datetime.datetime(2012, 11, 26, 0, 0), datetime.datetime(2013, 1, 7, 0, 0))
2020-02-17 10:06:17,995 DEBUG sqlalchemy.engine.base.Engine Thread-185 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:17,996 INFO sqlalchemy.engine.base.Engine Thread-185 : ROLLBACK
2020-02-17 10:06:18,462 INFO sqlalchemy.engine.base.Engine Thread-186 : BEGIN (implicit)
2020-02-17 10:06:18,464 INFO sqlalchemy.engine.base.Engine Thread-186 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:18,464 INFO sqlalchemy.engine.base.Engine Thread-186 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0), datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0), datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0), 'YES')
2020-02-17 10:06:18,465 DEBUG sqlalchemy.engine.base.Engine Thread-186 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:18,468 INFO sqlalchemy.engine.base.Engine Thread-186 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:18,468 INFO sqlalchemy.engine.base.Engine Thread-186 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0), datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0), datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0), 'NO')
2020-02-17 10:06:18,468 DEBUG sqlalchemy.engine.base.Engine Thread-186 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:18,472 INFO sqlalchemy.engine.base.Engine Thread-186 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:18,472 INFO sqlalchemy.engine.base.Engine Thread-186 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0), datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0), datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0))
2020-02-17 10:06:18,473 DEBUG sqlalchemy.engine.base.Engine Thread-186 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:18,476 INFO sqlalchemy.engine.base.Engine Thread-186 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:18,476 INFO sqlalchemy.engine.base.Engine Thread-186 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0), datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0), datetime.datetime(2011, 11, 28, 0, 0), datetime.datetime(2012, 1, 9, 0, 0))
2020-02-17 10:06:18,476 DEBUG sqlalchemy.engine.base.Engine Thread-186 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:18,477 INFO sqlalchemy.engine.base.Engine Thread-186 : ROLLBACK
2020-02-17 10:06:19,096 INFO sqlalchemy.engine.base.Engine Thread-187 : BEGIN (implicit)
2020-02-17 10:06:19,097 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:19,097 INFO sqlalchemy.engine.base.Engine Thread-187 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0), datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0), datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0), 'YES')
2020-02-17 10:06:19,098 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:19,101 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:19,101 INFO sqlalchemy.engine.base.Engine Thread-187 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0), datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0), datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0), 'NO')
2020-02-17 10:06:19,102 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:19,105 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:19,105 INFO sqlalchemy.engine.base.Engine Thread-187 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0), datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0), datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0))
2020-02-17 10:06:19,106 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:19,109 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:19,109 INFO sqlalchemy.engine.base.Engine Thread-187 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0), datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0), datetime.datetime(2010, 11, 29, 0, 0), datetime.datetime(2011, 1, 10, 0, 0))
2020-02-17 10:06:19,110 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:19,110 INFO sqlalchemy.engine.base.Engine Thread-187 : ROLLBACK
2020-02-17 10:06:22,258 INFO sqlalchemy.engine.base.Engine Thread-188 : BEGIN (implicit)
2020-02-17 10:06:22,259 INFO sqlalchemy.engine.base.Engine Thread-188 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:22,259 INFO sqlalchemy.engine.base.Engine Thread-188 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0), datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0), datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0), 'YES')
2020-02-17 10:06:22,260 DEBUG sqlalchemy.engine.base.Engine Thread-188 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,263 INFO sqlalchemy.engine.base.Engine Thread-188 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:22,263 INFO sqlalchemy.engine.base.Engine Thread-188 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0), datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0), datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0), 'NO')
2020-02-17 10:06:22,264 DEBUG sqlalchemy.engine.base.Engine Thread-188 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,267 INFO sqlalchemy.engine.base.Engine Thread-188 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:22,268 INFO sqlalchemy.engine.base.Engine Thread-188 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0), datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0), datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0))
2020-02-17 10:06:22,268 DEBUG sqlalchemy.engine.base.Engine Thread-188 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,271 INFO sqlalchemy.engine.base.Engine Thread-188 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:22,271 INFO sqlalchemy.engine.base.Engine Thread-188 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0), datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0), datetime.datetime(2010, 11, 1, 0, 0), datetime.datetime(2010, 12, 13, 0, 0))
2020-02-17 10:06:22,272 DEBUG sqlalchemy.engine.base.Engine Thread-188 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,273 INFO sqlalchemy.engine.base.Engine Thread-188 : ROLLBACK
2020-02-17 10:06:22,398 INFO sqlalchemy.engine.base.Engine Thread-189 : BEGIN (implicit)
2020-02-17 10:06:22,400 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:22,400 INFO sqlalchemy.engine.base.Engine Thread-189 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0), datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0), datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0), 'YES')
2020-02-17 10:06:22,401 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,404 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:22,404 INFO sqlalchemy.engine.base.Engine Thread-189 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0), datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0), datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0), 'NO')
2020-02-17 10:06:22,404 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,438 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:22,439 INFO sqlalchemy.engine.base.Engine Thread-189 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0), datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0), datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0))
2020-02-17 10:06:22,439 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,442 INFO sqlalchemy.engine.base.Engine Thread-189 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:22,442 INFO sqlalchemy.engine.base.Engine Thread-189 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0), datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0), datetime.datetime(2010, 9, 27, 0, 0), datetime.datetime(2010, 11, 8, 0, 0))
2020-02-17 10:06:22,443 DEBUG sqlalchemy.engine.base.Engine Thread-189 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,444 INFO sqlalchemy.engine.base.Engine Thread-189 : ROLLBACK
2020-02-17 10:06:22,562 INFO sqlalchemy.engine.base.Engine Thread-190 : BEGIN (implicit)
2020-02-17 10:06:22,563 INFO sqlalchemy.engine.base.Engine Thread-190 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:22,563 INFO sqlalchemy.engine.base.Engine Thread-190 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0), datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0), datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0), 'YES')
2020-02-17 10:06:22,564 DEBUG sqlalchemy.engine.base.Engine Thread-190 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,567 INFO sqlalchemy.engine.base.Engine Thread-190 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:22,567 INFO sqlalchemy.engine.base.Engine Thread-190 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0), datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0), datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0), 'NO')
2020-02-17 10:06:22,568 DEBUG sqlalchemy.engine.base.Engine Thread-190 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,571 INFO sqlalchemy.engine.base.Engine Thread-190 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:22,571 INFO sqlalchemy.engine.base.Engine Thread-190 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0), datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0), datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0))
2020-02-17 10:06:22,572 DEBUG sqlalchemy.engine.base.Engine Thread-190 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,575 INFO sqlalchemy.engine.base.Engine Thread-190 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:22,575 INFO sqlalchemy.engine.base.Engine Thread-190 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0), datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0), datetime.datetime(2010, 8, 30, 0, 0), datetime.datetime(2010, 10, 11, 0, 0))
2020-02-17 10:06:22,575 DEBUG sqlalchemy.engine.base.Engine Thread-190 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,576 INFO sqlalchemy.engine.base.Engine Thread-190 : ROLLBACK
2020-02-17 10:06:22,732 INFO sqlalchemy.engine.base.Engine Thread-191 : BEGIN (implicit)
2020-02-17 10:06:22,734 INFO sqlalchemy.engine.base.Engine Thread-191 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:22,734 INFO sqlalchemy.engine.base.Engine Thread-191 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0), datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0), datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0), 'YES')
2020-02-17 10:06:22,735 DEBUG sqlalchemy.engine.base.Engine Thread-191 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,738 INFO sqlalchemy.engine.base.Engine Thread-191 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:22,738 INFO sqlalchemy.engine.base.Engine Thread-191 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0), datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0), datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0), 'NO')
2020-02-17 10:06:22,739 DEBUG sqlalchemy.engine.base.Engine Thread-191 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,742 INFO sqlalchemy.engine.base.Engine Thread-191 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:22,742 INFO sqlalchemy.engine.base.Engine Thread-191 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0), datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0), datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0))
2020-02-17 10:06:22,743 DEBUG sqlalchemy.engine.base.Engine Thread-191 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,746 INFO sqlalchemy.engine.base.Engine Thread-191 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:22,746 INFO sqlalchemy.engine.base.Engine Thread-191 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0), datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0), datetime.datetime(2010, 7, 26, 0, 0), datetime.datetime(2010, 9, 6, 0, 0))
2020-02-17 10:06:22,746 DEBUG sqlalchemy.engine.base.Engine Thread-191 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,747 INFO sqlalchemy.engine.base.Engine Thread-191 : ROLLBACK
2020-02-17 10:06:22,909 INFO sqlalchemy.engine.base.Engine Thread-192 : BEGIN (implicit)
2020-02-17 10:06:22,911 INFO sqlalchemy.engine.base.Engine Thread-192 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:22,911 INFO sqlalchemy.engine.base.Engine Thread-192 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0), datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0), datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0), 'YES')
2020-02-17 10:06:22,912 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,915 INFO sqlalchemy.engine.base.Engine Thread-192 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:22,915 INFO sqlalchemy.engine.base.Engine Thread-192 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0), datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0), datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0), 'NO')
2020-02-17 10:06:22,916 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,919 INFO sqlalchemy.engine.base.Engine Thread-192 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:22,919 INFO sqlalchemy.engine.base.Engine Thread-192 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0), datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0), datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0))
2020-02-17 10:06:22,920 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,922 INFO sqlalchemy.engine.base.Engine Thread-192 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:22,923 INFO sqlalchemy.engine.base.Engine Thread-192 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0), datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0), datetime.datetime(2010, 6, 28, 0, 0), datetime.datetime(2010, 8, 9, 0, 0))
2020-02-17 10:06:22,923 DEBUG sqlalchemy.engine.base.Engine Thread-192 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:22,924 INFO sqlalchemy.engine.base.Engine Thread-192 : ROLLBACK
2020-02-17 10:06:23,624 INFO sqlalchemy.engine.base.Engine Thread-193 : BEGIN (implicit)
2020-02-17 10:06:23,625 INFO sqlalchemy.engine.base.Engine Thread-193 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:23,625 INFO sqlalchemy.engine.base.Engine Thread-193 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0), datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0), datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0), 'YES')
2020-02-17 10:06:23,626 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:23,629 INFO sqlalchemy.engine.base.Engine Thread-193 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:06:23,629 INFO sqlalchemy.engine.base.Engine Thread-193 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0), datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0), datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0), 'NO')
2020-02-17 10:06:23,630 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:23,633 INFO sqlalchemy.engine.base.Engine Thread-193 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:06:23,633 INFO sqlalchemy.engine.base.Engine Thread-193 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0), datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0), datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0))
2020-02-17 10:06:23,633 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:23,636 INFO sqlalchemy.engine.base.Engine Thread-193 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:06:23,636 INFO sqlalchemy.engine.base.Engine Thread-193 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0), datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0), datetime.datetime(2010, 5, 31, 0, 0), datetime.datetime(2010, 7, 12, 0, 0))
2020-02-17 10:06:23,637 DEBUG sqlalchemy.engine.base.Engine Thread-193 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:06:23,638 INFO sqlalchemy.engine.base.Engine Thread-193 : ROLLBACK
2020-02-17 10:14:21,749 INFO sqlalchemy.engine.base.Engine Thread-194 : BEGIN (implicit)
2020-02-17 10:14:21,751 INFO sqlalchemy.engine.base.Engine Thread-194 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:14:21,751 INFO sqlalchemy.engine.base.Engine Thread-194 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 10:14:21,753 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:14:21,754 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 10:14:21,757 INFO sqlalchemy.engine.base.Engine Thread-194 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 10:14:21,757 INFO sqlalchemy.engine.base.Engine Thread-194 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 10:14:21,758 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:14:21,758 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 10:14:21,761 INFO sqlalchemy.engine.base.Engine Thread-194 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 10:14:21,761 INFO sqlalchemy.engine.base.Engine Thread-194 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:14:21,762 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:14:21,762 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:14:21,762 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:14:21,762 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 10:14:21,766 INFO sqlalchemy.engine.base.Engine Thread-194 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 10:14:21,766 INFO sqlalchemy.engine.base.Engine Thread-194 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 10:14:21,767 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 10:14:21,767 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:14:21,767 DEBUG sqlalchemy.engine.base.Engine Thread-194 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 10:14:21,768 INFO sqlalchemy.engine.base.Engine Thread-194 : ROLLBACK
2020-02-17 11:11:46,836 INFO sqlalchemy.engine.base.Engine Thread-196 : BEGIN (implicit)
2020-02-17 11:11:46,838 INFO sqlalchemy.engine.base.Engine Thread-196 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:11:46,838 INFO sqlalchemy.engine.base.Engine Thread-196 : (2, 1)
2020-02-17 11:11:46,841 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:11:46,841 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 11:11:46,843 INFO sqlalchemy.engine.base.Engine Thread-196 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-17 11:11:46,843 INFO sqlalchemy.engine.base.Engine Thread-196 : ()
2020-02-17 11:11:46,844 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 11:11:46,848 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-17 11:11:46,848 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-17 11:11:46,848 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-17 11:11:46,848 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-17 11:11:46,849 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 13, 20, 45, 58), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-17 11:11:46,849 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 11:11:46,851 INFO sqlalchemy.engine.base.Engine Thread-196 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-17 11:11:46,851 INFO sqlalchemy.engine.base.Engine Thread-196 : ('bob',)
2020-02-17 11:11:46,852 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 11:11:46,852 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 11:11:46,856 INFO sqlalchemy.engine.base.Engine Thread-196 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 11:11:46,857 INFO sqlalchemy.engine.base.Engine Thread-196 : ('bob', 1, 1)
2020-02-17 11:11:46,857 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:11:46,860 INFO sqlalchemy.engine.base.Engine Thread-196 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 11:11:46,860 INFO sqlalchemy.engine.base.Engine Thread-196 : ('bob', 1, 1)
2020-02-17 11:11:46,861 DEBUG sqlalchemy.engine.base.Engine Thread-196 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:11:46,862 INFO sqlalchemy.engine.base.Engine Thread-196 : ROLLBACK
2020-02-17 11:11:53,070 INFO sqlalchemy.engine.base.Engine Thread-206 : BEGIN (implicit)
2020-02-17 11:11:53,070 INFO sqlalchemy.engine.base.Engine Thread-206 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 11:11:53,071 INFO sqlalchemy.engine.base.Engine Thread-206 : ()
2020-02-17 11:11:53,071 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 11:11:53,072 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 11:11:53,072 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 11:11:53,072 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 11:11:53,074 INFO sqlalchemy.engine.base.Engine Thread-206 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 11:11:53,074 INFO sqlalchemy.engine.base.Engine Thread-206 : (63,)
2020-02-17 11:11:53,074 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 11:11:53,075 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 11:11:53,075 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 11:11:53,075 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 11:11:53,076 INFO sqlalchemy.engine.base.Engine Thread-206 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 11:11:53,076 INFO sqlalchemy.engine.base.Engine Thread-206 : (124, 1)
2020-02-17 11:11:53,077 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 11:11:53,077 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 11:11:53,079 INFO sqlalchemy.engine.base.Engine Thread-206 : ROLLBACK
2020-02-17 11:11:59,070 INFO sqlalchemy.engine.base.Engine Thread-208 : BEGIN (implicit)
2020-02-17 11:11:59,070 INFO sqlalchemy.engine.base.Engine Thread-208 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 11:11:59,071 INFO sqlalchemy.engine.base.Engine Thread-208 : ()
2020-02-17 11:11:59,071 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 11:11:59,071 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 11:11:59,071 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 11:11:59,072 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 11:11:59,073 INFO sqlalchemy.engine.base.Engine Thread-208 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 11:11:59,073 INFO sqlalchemy.engine.base.Engine Thread-208 : (63,)
2020-02-17 11:11:59,074 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 11:11:59,074 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 11:11:59,074 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 11:11:59,074 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 11:11:59,075 INFO sqlalchemy.engine.base.Engine Thread-208 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 11:11:59,075 INFO sqlalchemy.engine.base.Engine Thread-208 : (124, 1)
2020-02-17 11:11:59,076 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 11:11:59,076 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 11:11:59,077 INFO sqlalchemy.engine.base.Engine Thread-208 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.login_id = %s 
 LIMIT %s
2020-02-17 11:11:59,078 INFO sqlalchemy.engine.base.Engine Thread-208 : ('philip', 1)
2020-02-17 11:11:59,078 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:11:59,078 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:11:59,080 INFO sqlalchemy.engine.base.Engine Thread-208 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles 
WHERE roles.id = %s 
 LIMIT %s
2020-02-17 11:11:59,080 INFO sqlalchemy.engine.base.Engine Thread-208 : (2, 1)
2020-02-17 11:11:59,080 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 11:11:59,080 DEBUG sqlalchemy.engine.base.Engine Thread-208 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 11:11:59,392 INFO sqlalchemy.engine.base.Engine Thread-208 : ROLLBACK
2020-02-17 11:11:59,410 INFO sqlalchemy.engine.base.Engine Thread-209 : BEGIN (implicit)
2020-02-17 11:11:59,411 INFO sqlalchemy.engine.base.Engine Thread-209 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:11:59,412 INFO sqlalchemy.engine.base.Engine Thread-209 : (1, 1)
2020-02-17 11:11:59,412 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:11:59,413 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:11:59,414 INFO sqlalchemy.engine.base.Engine Thread-209 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-17 11:11:59,414 INFO sqlalchemy.engine.base.Engine Thread-209 : ()
2020-02-17 11:11:59,415 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 11:11:59,415 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-17 11:11:59,416 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-17 11:11:59,416 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-17 11:11:59,416 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-17 11:11:59,416 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 13, 20, 45, 58), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-17 11:11:59,416 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 11:11:59,418 INFO sqlalchemy.engine.base.Engine Thread-209 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-17 11:11:59,418 INFO sqlalchemy.engine.base.Engine Thread-209 : ('philip',)
2020-02-17 11:11:59,419 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 11:11:59,423 INFO sqlalchemy.engine.base.Engine Thread-209 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 11:11:59,423 INFO sqlalchemy.engine.base.Engine Thread-209 : ('philip', 1, 1)
2020-02-17 11:11:59,423 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:11:59,424 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:11:59,426 INFO sqlalchemy.engine.base.Engine Thread-209 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 11:11:59,426 INFO sqlalchemy.engine.base.Engine Thread-209 : ('philip', 1, 1)
2020-02-17 11:11:59,427 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:11:59,427 DEBUG sqlalchemy.engine.base.Engine Thread-209 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:11:59,430 INFO sqlalchemy.engine.base.Engine Thread-209 : ROLLBACK
2020-02-17 11:12:01,867 INFO sqlalchemy.engine.base.Engine Thread-236 : BEGIN (implicit)
2020-02-17 11:12:01,870 INFO sqlalchemy.engine.base.Engine Thread-236 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 11:12:01,870 INFO sqlalchemy.engine.base.Engine Thread-236 : ()
2020-02-17 11:12:01,871 DEBUG sqlalchemy.engine.base.Engine Thread-236 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 11:12:01,872 DEBUG sqlalchemy.engine.base.Engine Thread-236 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 11:12:01,872 DEBUG sqlalchemy.engine.base.Engine Thread-236 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 11:12:01,874 INFO sqlalchemy.engine.base.Engine Thread-236 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:12:01,874 INFO sqlalchemy.engine.base.Engine Thread-236 : (1, 1)
2020-02-17 11:12:01,875 DEBUG sqlalchemy.engine.base.Engine Thread-236 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:12:01,875 DEBUG sqlalchemy.engine.base.Engine Thread-236 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:12:01,880 INFO sqlalchemy.engine.base.Engine Thread-236 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 11:12:01,880 INFO sqlalchemy.engine.base.Engine Thread-236 : ('philip', 1, 1)
2020-02-17 11:12:01,880 DEBUG sqlalchemy.engine.base.Engine Thread-236 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:12:01,881 DEBUG sqlalchemy.engine.base.Engine Thread-236 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:12:01,882 INFO sqlalchemy.engine.base.Engine Thread-236 : ROLLBACK
2020-02-17 11:12:16,063 INFO sqlalchemy.engine.base.Engine Thread-245 : BEGIN (implicit)
2020-02-17 11:12:16,064 INFO sqlalchemy.engine.base.Engine Thread-245 : SELECT parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.id ASC
2020-02-17 11:12:16,064 INFO sqlalchemy.engine.base.Engine Thread-245 : (113,)
2020-02-17 11:12:16,065 DEBUG sqlalchemy.engine.base.Engine Thread-245 : Col ('parameters_param_name', 'parameters_param_value')
2020-02-17 11:12:16,065 DEBUG sqlalchemy.engine.base.Engine Thread-245 : Row ('1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.')
2020-02-17 11:12:16,065 DEBUG sqlalchemy.engine.base.Engine Thread-245 : Row ('2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>')
2020-02-17 11:12:16,067 INFO sqlalchemy.engine.base.Engine Thread-245 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:12:16,067 INFO sqlalchemy.engine.base.Engine Thread-245 : (1, 1)
2020-02-17 11:12:16,067 DEBUG sqlalchemy.engine.base.Engine Thread-245 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:12:16,067 DEBUG sqlalchemy.engine.base.Engine Thread-245 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:12:16,071 INFO sqlalchemy.engine.base.Engine Thread-245 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 11:12:16,071 INFO sqlalchemy.engine.base.Engine Thread-245 : ('philip', 1, 1)
2020-02-17 11:12:16,072 DEBUG sqlalchemy.engine.base.Engine Thread-245 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:12:16,073 DEBUG sqlalchemy.engine.base.Engine Thread-245 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:12:16,074 INFO sqlalchemy.engine.base.Engine Thread-245 : ROLLBACK
2020-02-17 11:12:37,147 INFO sqlalchemy.engine.base.Engine Thread-254 : BEGIN (implicit)
2020-02-17 11:12:37,148 INFO sqlalchemy.engine.base.Engine Thread-254 : SELECT parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.id ASC
2020-02-17 11:12:37,148 INFO sqlalchemy.engine.base.Engine Thread-254 : (113,)
2020-02-17 11:12:37,148 DEBUG sqlalchemy.engine.base.Engine Thread-254 : Col ('parameters_param_name', 'parameters_param_value')
2020-02-17 11:12:37,148 DEBUG sqlalchemy.engine.base.Engine Thread-254 : Row ('1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.')
2020-02-17 11:12:37,149 DEBUG sqlalchemy.engine.base.Engine Thread-254 : Row ('2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>')
2020-02-17 11:12:37,153 INFO sqlalchemy.engine.base.Engine Thread-254 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 11:12:37,153 INFO sqlalchemy.engine.base.Engine Thread-254 : ('Anonymous', 1, 1)
2020-02-17 11:12:37,154 DEBUG sqlalchemy.engine.base.Engine Thread-254 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:12:37,155 INFO sqlalchemy.engine.base.Engine Thread-254 : ROLLBACK
2020-02-17 11:12:39,839 INFO sqlalchemy.engine.base.Engine Thread-280 : BEGIN (implicit)
2020-02-17 11:12:39,841 INFO sqlalchemy.engine.base.Engine Thread-280 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 11:12:39,841 INFO sqlalchemy.engine.base.Engine Thread-280 : ()
2020-02-17 11:12:39,842 DEBUG sqlalchemy.engine.base.Engine Thread-280 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 11:12:39,842 DEBUG sqlalchemy.engine.base.Engine Thread-280 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 11:12:39,843 DEBUG sqlalchemy.engine.base.Engine Thread-280 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 11:12:39,847 INFO sqlalchemy.engine.base.Engine Thread-280 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 11:12:39,847 INFO sqlalchemy.engine.base.Engine Thread-280 : ('Anonymous', 1, 1)
2020-02-17 11:12:39,847 DEBUG sqlalchemy.engine.base.Engine Thread-280 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:12:39,849 INFO sqlalchemy.engine.base.Engine Thread-280 : ROLLBACK
2020-02-17 11:12:40,427 INFO sqlalchemy.engine.base.Engine Thread-290 : BEGIN (implicit)
2020-02-17 11:12:40,429 INFO sqlalchemy.engine.base.Engine Thread-290 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 11:12:40,429 INFO sqlalchemy.engine.base.Engine Thread-290 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 11:12:40,433 INFO sqlalchemy.engine.base.Engine Thread-291 : BEGIN (implicit)
2020-02-17 11:12:40,434 INFO sqlalchemy.engine.base.Engine Thread-291 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 11:12:40,434 INFO sqlalchemy.engine.base.Engine Thread-291 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 11:12:40,435 DEBUG sqlalchemy.engine.base.Engine Thread-290 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:12:40,435 DEBUG sqlalchemy.engine.base.Engine Thread-291 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:12:40,435 DEBUG sqlalchemy.engine.base.Engine Thread-290 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 11:12:40,436 DEBUG sqlalchemy.engine.base.Engine Thread-291 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 11:12:40,439 INFO sqlalchemy.engine.base.Engine Thread-290 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 11:12:40,443 INFO sqlalchemy.engine.base.Engine Thread-291 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 11:12:40,443 INFO sqlalchemy.engine.base.Engine Thread-290 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 11:12:40,443 INFO sqlalchemy.engine.base.Engine Thread-291 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 11:12:40,444 DEBUG sqlalchemy.engine.base.Engine Thread-290 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:12:40,444 DEBUG sqlalchemy.engine.base.Engine Thread-291 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:12:40,444 DEBUG sqlalchemy.engine.base.Engine Thread-290 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 11:12:40,444 DEBUG sqlalchemy.engine.base.Engine Thread-291 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 11:12:40,447 INFO sqlalchemy.engine.base.Engine Thread-290 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 11:12:40,450 INFO sqlalchemy.engine.base.Engine Thread-291 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 11:12:40,451 INFO sqlalchemy.engine.base.Engine Thread-290 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 11:12:40,451 INFO sqlalchemy.engine.base.Engine Thread-291 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 11:12:40,452 DEBUG sqlalchemy.engine.base.Engine Thread-290 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:12:40,452 DEBUG sqlalchemy.engine.base.Engine Thread-290 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:12:40,452 DEBUG sqlalchemy.engine.base.Engine Thread-290 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:12:40,452 DEBUG sqlalchemy.engine.base.Engine Thread-290 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:12:40,455 INFO sqlalchemy.engine.base.Engine Thread-290 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 11:12:40,455 INFO sqlalchemy.engine.base.Engine Thread-290 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 11:12:40,456 DEBUG sqlalchemy.engine.base.Engine Thread-291 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:12:40,456 DEBUG sqlalchemy.engine.base.Engine Thread-290 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:12:40,456 DEBUG sqlalchemy.engine.base.Engine Thread-291 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:12:40,457 DEBUG sqlalchemy.engine.base.Engine Thread-290 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 11:12:40,457 DEBUG sqlalchemy.engine.base.Engine Thread-291 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:12:40,457 DEBUG sqlalchemy.engine.base.Engine Thread-290 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 11:12:40,457 DEBUG sqlalchemy.engine.base.Engine Thread-291 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:12:40,458 INFO sqlalchemy.engine.base.Engine Thread-290 : ROLLBACK
2020-02-17 11:12:40,461 INFO sqlalchemy.engine.base.Engine Thread-291 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 11:12:40,461 INFO sqlalchemy.engine.base.Engine Thread-291 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 11:12:40,462 DEBUG sqlalchemy.engine.base.Engine Thread-291 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:12:40,463 DEBUG sqlalchemy.engine.base.Engine Thread-291 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 11:12:40,463 DEBUG sqlalchemy.engine.base.Engine Thread-291 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 11:12:40,464 INFO sqlalchemy.engine.base.Engine Thread-291 : ROLLBACK
2020-02-17 11:12:43,730 INFO sqlalchemy.engine.base.Engine Thread-293 : BEGIN (implicit)
2020-02-17 11:12:43,731 INFO sqlalchemy.engine.base.Engine Thread-293 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 11:12:43,731 INFO sqlalchemy.engine.base.Engine Thread-293 : ()
2020-02-17 11:12:43,731 DEBUG sqlalchemy.engine.base.Engine Thread-293 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 11:12:43,732 DEBUG sqlalchemy.engine.base.Engine Thread-293 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 11:12:43,732 DEBUG sqlalchemy.engine.base.Engine Thread-293 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 11:12:43,732 DEBUG sqlalchemy.engine.base.Engine Thread-293 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 11:12:43,733 INFO sqlalchemy.engine.base.Engine Thread-293 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 11:12:43,734 INFO sqlalchemy.engine.base.Engine Thread-293 : (63,)
2020-02-17 11:12:43,734 DEBUG sqlalchemy.engine.base.Engine Thread-293 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 11:12:43,735 DEBUG sqlalchemy.engine.base.Engine Thread-293 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 11:12:43,735 DEBUG sqlalchemy.engine.base.Engine Thread-293 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 11:12:43,735 DEBUG sqlalchemy.engine.base.Engine Thread-293 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 11:12:43,736 INFO sqlalchemy.engine.base.Engine Thread-293 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 11:12:43,736 INFO sqlalchemy.engine.base.Engine Thread-293 : (124, 1)
2020-02-17 11:12:43,737 DEBUG sqlalchemy.engine.base.Engine Thread-293 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 11:12:43,737 DEBUG sqlalchemy.engine.base.Engine Thread-293 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 11:12:43,739 INFO sqlalchemy.engine.base.Engine Thread-293 : ROLLBACK
2020-02-17 11:12:55,123 INFO sqlalchemy.engine.base.Engine Thread-294 : BEGIN (implicit)
2020-02-17 11:12:55,125 INFO sqlalchemy.engine.base.Engine Thread-294 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 11:12:55,126 INFO sqlalchemy.engine.base.Engine Thread-294 : ()
2020-02-17 11:12:55,128 DEBUG sqlalchemy.engine.base.Engine Thread-294 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 11:12:55,128 DEBUG sqlalchemy.engine.base.Engine Thread-294 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 11:12:55,129 DEBUG sqlalchemy.engine.base.Engine Thread-294 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 11:12:55,131 INFO sqlalchemy.engine.base.Engine Thread-294 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:12:55,131 INFO sqlalchemy.engine.base.Engine Thread-294 : (1, 1)
2020-02-17 11:12:55,132 DEBUG sqlalchemy.engine.base.Engine Thread-294 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:12:55,132 DEBUG sqlalchemy.engine.base.Engine Thread-294 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:12:55,136 INFO sqlalchemy.engine.base.Engine Thread-294 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 11:12:55,136 INFO sqlalchemy.engine.base.Engine Thread-294 : ('philip', 1, 1)
2020-02-17 11:12:55,137 DEBUG sqlalchemy.engine.base.Engine Thread-294 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:12:55,137 DEBUG sqlalchemy.engine.base.Engine Thread-294 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:12:55,139 INFO sqlalchemy.engine.base.Engine Thread-294 : ROLLBACK
2020-02-17 11:13:26,248 INFO sqlalchemy.engine.base.Engine Thread-304 : BEGIN (implicit)
2020-02-17 11:13:26,249 INFO sqlalchemy.engine.base.Engine Thread-304 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:13:26,251 INFO sqlalchemy.engine.base.Engine Thread-305 : BEGIN (implicit)
2020-02-17 11:13:26,251 INFO sqlalchemy.engine.base.Engine Thread-304 : (1, 1)
2020-02-17 11:13:26,252 INFO sqlalchemy.engine.base.Engine Thread-305 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:13:26,252 INFO sqlalchemy.engine.base.Engine Thread-305 : (1, 1)
2020-02-17 11:13:26,253 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:26,256 DEBUG sqlalchemy.engine.base.Engine Thread-305 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:26,257 DEBUG sqlalchemy.engine.base.Engine Thread-304 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:26,261 DEBUG sqlalchemy.engine.base.Engine Thread-305 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:26,264 INFO sqlalchemy.engine.base.Engine Thread-304 : ROLLBACK
2020-02-17 11:13:26,266 INFO sqlalchemy.engine.base.Engine Thread-305 : ROLLBACK
2020-02-17 11:13:26,266 INFO sqlalchemy.engine.base.Engine Thread-306 : BEGIN (implicit)
2020-02-17 11:13:26,267 INFO sqlalchemy.engine.base.Engine Thread-307 : BEGIN (implicit)
2020-02-17 11:13:26,269 INFO sqlalchemy.engine.base.Engine Thread-306 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:13:26,270 INFO sqlalchemy.engine.base.Engine Thread-307 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:13:26,270 INFO sqlalchemy.engine.base.Engine Thread-306 : (1, 1)
2020-02-17 11:13:26,270 INFO sqlalchemy.engine.base.Engine Thread-307 : (1, 1)
2020-02-17 11:13:26,271 DEBUG sqlalchemy.engine.base.Engine Thread-306 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:26,272 DEBUG sqlalchemy.engine.base.Engine Thread-306 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:26,272 DEBUG sqlalchemy.engine.base.Engine Thread-307 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:26,273 DEBUG sqlalchemy.engine.base.Engine Thread-307 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:26,273 INFO sqlalchemy.engine.base.Engine Thread-306 : ROLLBACK
2020-02-17 11:13:26,274 INFO sqlalchemy.engine.base.Engine Thread-307 : ROLLBACK
2020-02-17 11:13:26,544 INFO sqlalchemy.engine.base.Engine Thread-308 : BEGIN (implicit)
2020-02-17 11:13:26,545 INFO sqlalchemy.engine.base.Engine Thread-308 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:13:26,546 INFO sqlalchemy.engine.base.Engine Thread-308 : (1, 1)
2020-02-17 11:13:26,546 DEBUG sqlalchemy.engine.base.Engine Thread-308 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:26,547 DEBUG sqlalchemy.engine.base.Engine Thread-308 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:26,548 INFO sqlalchemy.engine.base.Engine Thread-308 : ROLLBACK
2020-02-17 11:13:33,543 INFO sqlalchemy.engine.base.Engine Thread-309 : BEGIN (implicit)
2020-02-17 11:13:33,544 INFO sqlalchemy.engine.base.Engine Thread-309 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:13:33,544 INFO sqlalchemy.engine.base.Engine Thread-309 : (1, 1)
2020-02-17 11:13:33,545 DEBUG sqlalchemy.engine.base.Engine Thread-309 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:33,545 DEBUG sqlalchemy.engine.base.Engine Thread-309 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:33,546 INFO sqlalchemy.engine.base.Engine Thread-309 : ROLLBACK
2020-02-17 11:13:43,334 INFO sqlalchemy.engine.base.Engine Thread-311 : BEGIN (implicit)
2020-02-17 11:13:43,336 INFO sqlalchemy.engine.base.Engine Thread-311 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 11:13:43,336 INFO sqlalchemy.engine.base.Engine Thread-311 : ()
2020-02-17 11:13:43,338 DEBUG sqlalchemy.engine.base.Engine Thread-311 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 11:13:43,339 DEBUG sqlalchemy.engine.base.Engine Thread-311 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 11:13:43,339 DEBUG sqlalchemy.engine.base.Engine Thread-311 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 11:13:43,341 INFO sqlalchemy.engine.base.Engine Thread-311 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:13:43,341 INFO sqlalchemy.engine.base.Engine Thread-311 : (1, 1)
2020-02-17 11:13:43,342 DEBUG sqlalchemy.engine.base.Engine Thread-311 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:43,342 DEBUG sqlalchemy.engine.base.Engine Thread-311 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:43,346 INFO sqlalchemy.engine.base.Engine Thread-311 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 11:13:43,346 INFO sqlalchemy.engine.base.Engine Thread-311 : ('philip', 1, 1)
2020-02-17 11:13:43,347 DEBUG sqlalchemy.engine.base.Engine Thread-311 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:43,347 DEBUG sqlalchemy.engine.base.Engine Thread-311 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:43,349 INFO sqlalchemy.engine.base.Engine Thread-311 : ROLLBACK
2020-02-17 11:13:44,091 INFO sqlalchemy.engine.base.Engine Thread-323 : BEGIN (implicit)
2020-02-17 11:13:44,092 INFO sqlalchemy.engine.base.Engine Thread-323 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:13:44,093 INFO sqlalchemy.engine.base.Engine Thread-323 : (1, 1)
2020-02-17 11:13:44,093 DEBUG sqlalchemy.engine.base.Engine Thread-323 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:44,094 DEBUG sqlalchemy.engine.base.Engine Thread-323 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:44,095 INFO sqlalchemy.engine.base.Engine Thread-323 : ROLLBACK
2020-02-17 11:13:44,106 INFO sqlalchemy.engine.base.Engine Thread-325 : BEGIN (implicit)
2020-02-17 11:13:44,107 INFO sqlalchemy.engine.base.Engine Thread-325 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:13:44,107 INFO sqlalchemy.engine.base.Engine Thread-325 : (1, 1)
2020-02-17 11:13:44,109 DEBUG sqlalchemy.engine.base.Engine Thread-325 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:44,109 DEBUG sqlalchemy.engine.base.Engine Thread-325 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:44,110 INFO sqlalchemy.engine.base.Engine Thread-325 : ROLLBACK
2020-02-17 11:13:44,175 INFO sqlalchemy.engine.base.Engine Thread-327 : BEGIN (implicit)
2020-02-17 11:13:44,176 INFO sqlalchemy.engine.base.Engine Thread-327 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:13:44,177 INFO sqlalchemy.engine.base.Engine Thread-327 : (1, 1)
2020-02-17 11:13:44,177 DEBUG sqlalchemy.engine.base.Engine Thread-327 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:44,177 DEBUG sqlalchemy.engine.base.Engine Thread-327 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:44,178 INFO sqlalchemy.engine.base.Engine Thread-327 : ROLLBACK
2020-02-17 11:13:44,228 INFO sqlalchemy.engine.base.Engine Thread-329 : BEGIN (implicit)
2020-02-17 11:13:44,229 INFO sqlalchemy.engine.base.Engine Thread-329 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:13:44,229 INFO sqlalchemy.engine.base.Engine Thread-329 : (1, 1)
2020-02-17 11:13:44,230 DEBUG sqlalchemy.engine.base.Engine Thread-329 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:13:44,231 DEBUG sqlalchemy.engine.base.Engine Thread-329 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:13:44,232 INFO sqlalchemy.engine.base.Engine Thread-329 : ROLLBACK
2020-02-17 11:17:12,566 INFO sqlalchemy.engine.base.Engine Thread-338 : BEGIN (implicit)
2020-02-17 11:17:12,568 INFO sqlalchemy.engine.base.Engine Thread-338 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 11:17:12,568 INFO sqlalchemy.engine.base.Engine Thread-338 : ()
2020-02-17 11:17:12,570 DEBUG sqlalchemy.engine.base.Engine Thread-338 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 11:17:12,571 DEBUG sqlalchemy.engine.base.Engine Thread-338 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 11:17:12,571 DEBUG sqlalchemy.engine.base.Engine Thread-338 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 11:17:12,573 INFO sqlalchemy.engine.base.Engine Thread-338 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:17:12,573 INFO sqlalchemy.engine.base.Engine Thread-338 : (1, 1)
2020-02-17 11:17:12,574 DEBUG sqlalchemy.engine.base.Engine Thread-338 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:17:12,575 DEBUG sqlalchemy.engine.base.Engine Thread-338 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:17:12,579 INFO sqlalchemy.engine.base.Engine Thread-338 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 11:17:12,579 INFO sqlalchemy.engine.base.Engine Thread-338 : ('philip', 1, 1)
2020-02-17 11:17:12,580 DEBUG sqlalchemy.engine.base.Engine Thread-338 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:17:12,580 DEBUG sqlalchemy.engine.base.Engine Thread-338 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:17:12,582 INFO sqlalchemy.engine.base.Engine Thread-338 : ROLLBACK
2020-02-17 11:17:13,439 INFO sqlalchemy.engine.base.Engine Thread-347 : BEGIN (implicit)
2020-02-17 11:17:13,440 INFO sqlalchemy.engine.base.Engine Thread-347 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 11:17:13,441 INFO sqlalchemy.engine.base.Engine Thread-347 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 11:17:13,447 DEBUG sqlalchemy.engine.base.Engine Thread-347 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:17:13,450 INFO sqlalchemy.engine.base.Engine Thread-348 : BEGIN (implicit)
2020-02-17 11:17:13,450 DEBUG sqlalchemy.engine.base.Engine Thread-347 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 11:17:13,452 INFO sqlalchemy.engine.base.Engine Thread-348 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 11:17:13,456 INFO sqlalchemy.engine.base.Engine Thread-347 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 11:17:13,456 INFO sqlalchemy.engine.base.Engine Thread-348 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 11:17:13,456 INFO sqlalchemy.engine.base.Engine Thread-347 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 11:17:13,457 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:17:13,457 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 11:17:13,461 INFO sqlalchemy.engine.base.Engine Thread-348 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 11:17:13,461 DEBUG sqlalchemy.engine.base.Engine Thread-347 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:17:13,461 INFO sqlalchemy.engine.base.Engine Thread-348 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 11:17:13,461 DEBUG sqlalchemy.engine.base.Engine Thread-347 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 11:17:13,465 INFO sqlalchemy.engine.base.Engine Thread-347 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 11:17:13,465 INFO sqlalchemy.engine.base.Engine Thread-347 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 11:17:13,466 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:17:13,466 DEBUG sqlalchemy.engine.base.Engine Thread-347 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:17:13,466 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 11:17:13,467 DEBUG sqlalchemy.engine.base.Engine Thread-347 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:17:13,470 INFO sqlalchemy.engine.base.Engine Thread-348 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 11:17:13,470 DEBUG sqlalchemy.engine.base.Engine Thread-347 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:17:13,470 INFO sqlalchemy.engine.base.Engine Thread-348 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 11:17:13,471 DEBUG sqlalchemy.engine.base.Engine Thread-347 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:17:13,474 INFO sqlalchemy.engine.base.Engine Thread-347 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 11:17:13,474 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:17:13,474 INFO sqlalchemy.engine.base.Engine Thread-347 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 11:17:13,475 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:17:13,475 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:17:13,475 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 11:17:13,479 INFO sqlalchemy.engine.base.Engine Thread-348 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 11:17:13,479 INFO sqlalchemy.engine.base.Engine Thread-348 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 11:17:13,479 DEBUG sqlalchemy.engine.base.Engine Thread-347 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:17:13,480 DEBUG sqlalchemy.engine.base.Engine Thread-347 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 11:17:13,480 DEBUG sqlalchemy.engine.base.Engine Thread-347 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 11:17:13,481 INFO sqlalchemy.engine.base.Engine Thread-347 : ROLLBACK
2020-02-17 11:17:13,481 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 11:17:13,481 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 11:17:13,482 DEBUG sqlalchemy.engine.base.Engine Thread-348 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 11:17:13,483 INFO sqlalchemy.engine.base.Engine Thread-348 : ROLLBACK
2020-02-17 11:17:13,810 INFO sqlalchemy.engine.base.Engine Thread-352 : BEGIN (implicit)
2020-02-17 11:17:13,812 INFO sqlalchemy.engine.base.Engine Thread-350 : BEGIN (implicit)
2020-02-17 11:17:13,814 INFO sqlalchemy.engine.base.Engine Thread-351 : BEGIN (implicit)
2020-02-17 11:17:13,815 INFO sqlalchemy.engine.base.Engine Thread-352 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:17:13,817 INFO sqlalchemy.engine.base.Engine Thread-349 : BEGIN (implicit)
2020-02-17 11:17:13,818 INFO sqlalchemy.engine.base.Engine Thread-350 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:17:13,820 INFO sqlalchemy.engine.base.Engine Thread-351 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:17:13,820 INFO sqlalchemy.engine.base.Engine Thread-352 : (1, 1)
2020-02-17 11:17:13,821 INFO sqlalchemy.engine.base.Engine Thread-349 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 11:17:13,821 INFO sqlalchemy.engine.base.Engine Thread-349 : (1, 1)
2020-02-17 11:17:13,821 INFO sqlalchemy.engine.base.Engine Thread-351 : (1, 1)
2020-02-17 11:17:13,821 INFO sqlalchemy.engine.base.Engine Thread-350 : (1, 1)
2020-02-17 11:17:13,822 DEBUG sqlalchemy.engine.base.Engine Thread-349 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:17:13,823 DEBUG sqlalchemy.engine.base.Engine Thread-349 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:17:13,823 DEBUG sqlalchemy.engine.base.Engine Thread-352 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:17:13,822 DEBUG sqlalchemy.engine.base.Engine Thread-351 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:17:13,824 DEBUG sqlalchemy.engine.base.Engine Thread-350 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 11:17:13,825 INFO sqlalchemy.engine.base.Engine Thread-349 : ROLLBACK
2020-02-17 11:17:13,825 DEBUG sqlalchemy.engine.base.Engine Thread-352 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:17:13,825 DEBUG sqlalchemy.engine.base.Engine Thread-351 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:17:13,829 INFO sqlalchemy.engine.base.Engine Thread-351 : ROLLBACK
2020-02-17 11:17:13,827 INFO sqlalchemy.engine.base.Engine Thread-352 : ROLLBACK
2020-02-17 11:17:13,826 DEBUG sqlalchemy.engine.base.Engine Thread-350 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-17 11:17:13,831 INFO sqlalchemy.engine.base.Engine Thread-350 : ROLLBACK
2020-02-17 15:25:04,062 INFO sqlalchemy.engine.base.Engine Thread-355 : BEGIN (implicit)
2020-02-17 15:25:04,064 INFO sqlalchemy.engine.base.Engine Thread-355 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-17 15:25:04,064 INFO sqlalchemy.engine.base.Engine Thread-355 : ()
2020-02-17 15:25:04,066 DEBUG sqlalchemy.engine.base.Engine Thread-355 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-17 15:25:04,067 DEBUG sqlalchemy.engine.base.Engine Thread-355 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '', '', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 2, 13, 22, 59, 18), 1)
2020-02-17 15:25:04,067 DEBUG sqlalchemy.engine.base.Engine Thread-355 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 1)
2020-02-17 15:25:04,069 INFO sqlalchemy.engine.base.Engine Thread-355 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 15:25:04,069 INFO sqlalchemy.engine.base.Engine Thread-355 : (2, 1)
2020-02-17 15:25:04,070 DEBUG sqlalchemy.engine.base.Engine Thread-355 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:25:04,070 DEBUG sqlalchemy.engine.base.Engine Thread-355 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 15:25:04,075 INFO sqlalchemy.engine.base.Engine Thread-355 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:25:04,075 INFO sqlalchemy.engine.base.Engine Thread-355 : ('bob', 1, 1)
2020-02-17 15:25:04,076 DEBUG sqlalchemy.engine.base.Engine Thread-355 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:25:04,077 INFO sqlalchemy.engine.base.Engine Thread-355 : ROLLBACK
2020-02-17 15:25:04,661 INFO sqlalchemy.engine.base.Engine Thread-364 : BEGIN (implicit)
2020-02-17 15:25:04,663 INFO sqlalchemy.engine.base.Engine Thread-364 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 15:25:04,663 INFO sqlalchemy.engine.base.Engine Thread-364 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 15:25:04,664 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:04,664 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 15:25:04,667 INFO sqlalchemy.engine.base.Engine Thread-364 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 15:25:04,667 INFO sqlalchemy.engine.base.Engine Thread-364 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 15:25:04,668 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:04,668 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 15:25:04,671 INFO sqlalchemy.engine.base.Engine Thread-364 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 15:25:04,671 INFO sqlalchemy.engine.base.Engine Thread-364 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 15:25:04,672 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:04,672 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:04,672 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:04,672 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:04,675 INFO sqlalchemy.engine.base.Engine Thread-364 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 15:25:04,675 INFO sqlalchemy.engine.base.Engine Thread-364 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 15:25:04,676 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:04,676 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 15:25:04,676 DEBUG sqlalchemy.engine.base.Engine Thread-364 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 15:25:04,677 INFO sqlalchemy.engine.base.Engine Thread-364 : ROLLBACK
2020-02-17 15:25:04,705 INFO sqlalchemy.engine.base.Engine Thread-365 : BEGIN (implicit)
2020-02-17 15:25:04,707 INFO sqlalchemy.engine.base.Engine Thread-365 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 15:25:04,707 INFO sqlalchemy.engine.base.Engine Thread-365 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 15:25:04,708 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:04,708 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 15:25:04,711 INFO sqlalchemy.engine.base.Engine Thread-365 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 15:25:04,711 INFO sqlalchemy.engine.base.Engine Thread-365 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 15:25:04,712 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:04,712 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 15:25:04,716 INFO sqlalchemy.engine.base.Engine Thread-365 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 15:25:04,716 INFO sqlalchemy.engine.base.Engine Thread-365 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 15:25:04,717 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:04,717 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:04,717 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:04,717 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:04,720 INFO sqlalchemy.engine.base.Engine Thread-365 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 15:25:04,720 INFO sqlalchemy.engine.base.Engine Thread-365 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 15:25:04,721 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:04,721 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 15:25:04,721 DEBUG sqlalchemy.engine.base.Engine Thread-365 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 15:25:04,722 INFO sqlalchemy.engine.base.Engine Thread-365 : ROLLBACK
2020-02-17 15:25:06,932 INFO sqlalchemy.engine.base.Engine Thread-366 : BEGIN (implicit)
2020-02-17 15:25:06,933 INFO sqlalchemy.engine.base.Engine Thread-366 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 15:25:06,933 INFO sqlalchemy.engine.base.Engine Thread-366 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0), datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0), datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0), 'YES')
2020-02-17 15:25:06,934 DEBUG sqlalchemy.engine.base.Engine Thread-366 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:06,937 INFO sqlalchemy.engine.base.Engine Thread-366 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 15:25:06,937 INFO sqlalchemy.engine.base.Engine Thread-366 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0), datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0), datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0), 'NO')
2020-02-17 15:25:06,938 DEBUG sqlalchemy.engine.base.Engine Thread-366 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:06,941 INFO sqlalchemy.engine.base.Engine Thread-366 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 15:25:06,941 INFO sqlalchemy.engine.base.Engine Thread-366 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0), datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0), datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0))
2020-02-17 15:25:06,942 DEBUG sqlalchemy.engine.base.Engine Thread-366 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:06,942 DEBUG sqlalchemy.engine.base.Engine Thread-366 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:06,945 INFO sqlalchemy.engine.base.Engine Thread-366 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 15:25:06,945 INFO sqlalchemy.engine.base.Engine Thread-366 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0), datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0), datetime.datetime(2019, 12, 30, 0, 0), datetime.datetime(2020, 2, 10, 0, 0))
2020-02-17 15:25:06,946 DEBUG sqlalchemy.engine.base.Engine Thread-366 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:06,946 INFO sqlalchemy.engine.base.Engine Thread-366 : ROLLBACK
2020-02-17 15:25:07,356 INFO sqlalchemy.engine.base.Engine Thread-367 : BEGIN (implicit)
2020-02-17 15:25:07,358 INFO sqlalchemy.engine.base.Engine Thread-367 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 15:25:07,358 INFO sqlalchemy.engine.base.Engine Thread-367 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-17 15:25:07,359 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:07,359 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 15:25:07,362 INFO sqlalchemy.engine.base.Engine Thread-367 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 15:25:07,362 INFO sqlalchemy.engine.base.Engine Thread-367 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-17 15:25:07,363 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:07,363 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 15:25:07,367 INFO sqlalchemy.engine.base.Engine Thread-367 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 15:25:07,367 INFO sqlalchemy.engine.base.Engine Thread-367 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 15:25:07,368 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:07,368 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:07,368 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:07,368 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 13, 20, 45, 58), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:07,371 INFO sqlalchemy.engine.base.Engine Thread-367 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 15:25:07,371 INFO sqlalchemy.engine.base.Engine Thread-367 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-17 15:25:07,372 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:07,372 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 15:25:07,372 DEBUG sqlalchemy.engine.base.Engine Thread-367 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's test booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 15:25:07,373 INFO sqlalchemy.engine.base.Engine Thread-367 : ROLLBACK
2020-02-17 15:25:07,677 INFO sqlalchemy.engine.base.Engine Thread-368 : BEGIN (implicit)
2020-02-17 15:25:07,678 INFO sqlalchemy.engine.base.Engine Thread-368 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 15:25:07,678 INFO sqlalchemy.engine.base.Engine Thread-368 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'YES')
2020-02-17 15:25:07,679 DEBUG sqlalchemy.engine.base.Engine Thread-368 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:07,679 DEBUG sqlalchemy.engine.base.Engine Thread-368 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-17 15:25:07,682 INFO sqlalchemy.engine.base.Engine Thread-368 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-17 15:25:07,682 INFO sqlalchemy.engine.base.Engine Thread-368 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'NO')
2020-02-17 15:25:07,683 DEBUG sqlalchemy.engine.base.Engine Thread-368 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:07,683 DEBUG sqlalchemy.engine.base.Engine Thread-368 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-17 15:25:07,686 INFO sqlalchemy.engine.base.Engine Thread-368 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-17 15:25:07,687 INFO sqlalchemy.engine.base.Engine Thread-368 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-02-17 15:25:07,687 DEBUG sqlalchemy.engine.base.Engine Thread-368 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:07,687 DEBUG sqlalchemy.engine.base.Engine Thread-368 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:07,687 DEBUG sqlalchemy.engine.base.Engine Thread-368 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-17 15:25:07,690 INFO sqlalchemy.engine.base.Engine Thread-368 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-17 15:25:07,691 INFO sqlalchemy.engine.base.Engine Thread-368 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-02-17 15:25:07,691 DEBUG sqlalchemy.engine.base.Engine Thread-368 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-17 15:25:07,691 DEBUG sqlalchemy.engine.base.Engine Thread-368 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-17 15:25:07,692 INFO sqlalchemy.engine.base.Engine Thread-368 : ROLLBACK
2020-02-17 15:32:37,760 INFO sqlalchemy.engine.base.Engine Thread-369 : BEGIN (implicit)
2020-02-17 15:32:37,762 INFO sqlalchemy.engine.base.Engine Thread-369 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 15:32:37,762 INFO sqlalchemy.engine.base.Engine Thread-369 : (2, 1)
2020-02-17 15:32:37,764 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:32:37,764 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 15:32:37,766 INFO sqlalchemy.engine.base.Engine Thread-369 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-17 15:32:37,766 INFO sqlalchemy.engine.base.Engine Thread-369 : ()
2020-02-17 15:32:37,767 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 15:32:37,767 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-17 15:32:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-17 15:32:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-17 15:32:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-17 15:32:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 13, 20, 45, 58), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-17 15:32:37,768 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 15:32:37,770 INFO sqlalchemy.engine.base.Engine Thread-369 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-17 15:32:37,770 INFO sqlalchemy.engine.base.Engine Thread-369 : ('bob',)
2020-02-17 15:32:37,771 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 15:32:37,771 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 15:32:37,775 INFO sqlalchemy.engine.base.Engine Thread-369 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:32:37,775 INFO sqlalchemy.engine.base.Engine Thread-369 : ('bob', 1, 1)
2020-02-17 15:32:37,776 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:32:37,779 INFO sqlalchemy.engine.base.Engine Thread-369 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:32:37,779 INFO sqlalchemy.engine.base.Engine Thread-369 : ('bob', 1, 1)
2020-02-17 15:32:37,779 DEBUG sqlalchemy.engine.base.Engine Thread-369 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:32:37,780 INFO sqlalchemy.engine.base.Engine Thread-369 : ROLLBACK
2020-02-17 15:36:34,353 INFO sqlalchemy.engine.base.Engine Thread-378 : BEGIN (implicit)
2020-02-17 15:36:34,355 INFO sqlalchemy.engine.base.Engine Thread-378 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 15:36:34,355 INFO sqlalchemy.engine.base.Engine Thread-378 : (2, 1)
2020-02-17 15:36:34,357 DEBUG sqlalchemy.engine.base.Engine Thread-378 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:36:34,357 DEBUG sqlalchemy.engine.base.Engine Thread-378 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 15:36:34,360 INFO sqlalchemy.engine.base.Engine Thread-378 : ROLLBACK
2020-02-17 15:36:34,549 INFO sqlalchemy.engine.base.Engine Thread-380 : BEGIN (implicit)
2020-02-17 15:36:34,550 INFO sqlalchemy.engine.base.Engine Thread-380 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 15:36:34,550 INFO sqlalchemy.engine.base.Engine Thread-380 : ()
2020-02-17 15:36:34,550 DEBUG sqlalchemy.engine.base.Engine Thread-380 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 15:36:34,551 DEBUG sqlalchemy.engine.base.Engine Thread-380 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 15:36:34,551 DEBUG sqlalchemy.engine.base.Engine Thread-380 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 15:36:34,551 DEBUG sqlalchemy.engine.base.Engine Thread-380 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 15:36:34,552 INFO sqlalchemy.engine.base.Engine Thread-380 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 15:36:34,552 INFO sqlalchemy.engine.base.Engine Thread-380 : (63,)
2020-02-17 15:36:34,553 DEBUG sqlalchemy.engine.base.Engine Thread-380 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:36:34,553 DEBUG sqlalchemy.engine.base.Engine Thread-380 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:36:34,553 DEBUG sqlalchemy.engine.base.Engine Thread-380 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 15:36:34,553 DEBUG sqlalchemy.engine.base.Engine Thread-380 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:36:34,554 INFO sqlalchemy.engine.base.Engine Thread-380 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 15:36:34,554 INFO sqlalchemy.engine.base.Engine Thread-380 : (124, 1)
2020-02-17 15:36:34,555 DEBUG sqlalchemy.engine.base.Engine Thread-380 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:36:34,555 DEBUG sqlalchemy.engine.base.Engine Thread-380 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 15:36:34,556 INFO sqlalchemy.engine.base.Engine Thread-380 : ROLLBACK
2020-02-17 15:38:01,540 INFO sqlalchemy.engine.base.Engine Thread-382 : BEGIN (implicit)
2020-02-17 15:38:01,541 INFO sqlalchemy.engine.base.Engine Thread-382 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 15:38:01,541 INFO sqlalchemy.engine.base.Engine Thread-382 : ()
2020-02-17 15:38:01,542 DEBUG sqlalchemy.engine.base.Engine Thread-382 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 15:38:01,542 DEBUG sqlalchemy.engine.base.Engine Thread-382 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 15:38:01,543 DEBUG sqlalchemy.engine.base.Engine Thread-382 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 15:38:01,543 DEBUG sqlalchemy.engine.base.Engine Thread-382 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 15:38:01,544 INFO sqlalchemy.engine.base.Engine Thread-382 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 15:38:01,544 INFO sqlalchemy.engine.base.Engine Thread-382 : (63,)
2020-02-17 15:38:01,545 DEBUG sqlalchemy.engine.base.Engine Thread-382 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:38:01,545 DEBUG sqlalchemy.engine.base.Engine Thread-382 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:38:01,545 DEBUG sqlalchemy.engine.base.Engine Thread-382 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 15:38:01,545 DEBUG sqlalchemy.engine.base.Engine Thread-382 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:38:01,572 INFO sqlalchemy.engine.base.Engine Thread-382 : ROLLBACK
2020-02-17 15:38:29,904 INFO sqlalchemy.engine.base.Engine Thread-384 : BEGIN (implicit)
2020-02-17 15:38:29,905 INFO sqlalchemy.engine.base.Engine Thread-384 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 15:38:29,905 INFO sqlalchemy.engine.base.Engine Thread-384 : ()
2020-02-17 15:38:29,906 DEBUG sqlalchemy.engine.base.Engine Thread-384 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 15:38:29,906 DEBUG sqlalchemy.engine.base.Engine Thread-384 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 15:38:29,906 DEBUG sqlalchemy.engine.base.Engine Thread-384 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 15:38:29,906 DEBUG sqlalchemy.engine.base.Engine Thread-384 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 15:38:29,908 INFO sqlalchemy.engine.base.Engine Thread-384 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 15:38:29,908 INFO sqlalchemy.engine.base.Engine Thread-384 : (63,)
2020-02-17 15:38:29,909 DEBUG sqlalchemy.engine.base.Engine Thread-384 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:38:29,909 DEBUG sqlalchemy.engine.base.Engine Thread-384 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:38:29,909 DEBUG sqlalchemy.engine.base.Engine Thread-384 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 15:38:29,909 DEBUG sqlalchemy.engine.base.Engine Thread-384 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:38:30,530 INFO sqlalchemy.engine.base.Engine Thread-384 : INSERT INTO users (id, login_id, forename, surname, comment, _password, email, `role`, vendor, created_date, last_login, last_modified, modified_by, enabled) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
2020-02-17 15:38:30,530 INFO sqlalchemy.engine.base.Engine Thread-384 : ('0', 'frank', 'Frank', 'Black', 'me', b'$2b$12$x8GLEJTMAvOM9P8AZrmyJOFDzyoX8vWg9sN6bUb0fs4xhpjK2.usi', 'frank@somewhere.com', 6, 70, datetime.datetime(2020, 2, 17, 15, 38, 30, 528616), None, datetime.datetime(2020, 2, 17, 15, 38, 30, 528563), None, '1')
2020-02-17 15:38:30,548 INFO sqlalchemy.engine.base.Engine Thread-384 : ROLLBACK
2020-02-17 15:40:20,233 INFO sqlalchemy.engine.base.Engine Thread-392 : BEGIN (implicit)
2020-02-17 15:40:20,234 INFO sqlalchemy.engine.base.Engine Thread-392 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 15:40:20,234 INFO sqlalchemy.engine.base.Engine Thread-392 : ()
2020-02-17 15:40:20,235 DEBUG sqlalchemy.engine.base.Engine Thread-392 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 15:40:20,239 DEBUG sqlalchemy.engine.base.Engine Thread-392 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 15:40:20,239 DEBUG sqlalchemy.engine.base.Engine Thread-392 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 15:40:20,239 DEBUG sqlalchemy.engine.base.Engine Thread-392 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 15:40:20,241 INFO sqlalchemy.engine.base.Engine Thread-392 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 15:40:20,241 INFO sqlalchemy.engine.base.Engine Thread-392 : (63,)
2020-02-17 15:40:20,242 DEBUG sqlalchemy.engine.base.Engine Thread-392 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:40:20,242 DEBUG sqlalchemy.engine.base.Engine Thread-392 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:40:20,242 DEBUG sqlalchemy.engine.base.Engine Thread-392 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 15:40:20,243 DEBUG sqlalchemy.engine.base.Engine Thread-392 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:40:20,247 INFO sqlalchemy.engine.base.Engine Thread-392 : ROLLBACK
2020-02-17 15:40:35,108 INFO sqlalchemy.engine.base.Engine Thread-394 : BEGIN (implicit)
2020-02-17 15:40:35,109 INFO sqlalchemy.engine.base.Engine Thread-394 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 15:40:35,109 INFO sqlalchemy.engine.base.Engine Thread-394 : ()
2020-02-17 15:40:35,110 DEBUG sqlalchemy.engine.base.Engine Thread-394 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 15:40:35,110 DEBUG sqlalchemy.engine.base.Engine Thread-394 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 15:40:35,110 DEBUG sqlalchemy.engine.base.Engine Thread-394 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 15:40:35,110 DEBUG sqlalchemy.engine.base.Engine Thread-394 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 15:40:35,112 INFO sqlalchemy.engine.base.Engine Thread-394 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 15:40:35,112 INFO sqlalchemy.engine.base.Engine Thread-394 : (63,)
2020-02-17 15:40:35,112 DEBUG sqlalchemy.engine.base.Engine Thread-394 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:40:35,112 DEBUG sqlalchemy.engine.base.Engine Thread-394 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:40:35,112 DEBUG sqlalchemy.engine.base.Engine Thread-394 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 15:40:35,113 DEBUG sqlalchemy.engine.base.Engine Thread-394 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:40:35,722 INFO sqlalchemy.engine.base.Engine Thread-394 : INSERT INTO users (id, login_id, forename, surname, comment, _password, email, `role`, vendor, created_date, last_login, last_modified, modified_by, enabled) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
2020-02-17 15:40:35,723 INFO sqlalchemy.engine.base.Engine Thread-394 : ('0', 'frank1', 'Frank', 'Black', 'me', b'$2b$12$/9Y.UwjuJnNTVm1L./S5T.WBgJsFJh92p/U7PL2ccjivBbjjQWWTa', 'frank@somewhere.com', 6, 70, datetime.datetime(2020, 2, 17, 15, 40, 35, 722207), None, datetime.datetime(2020, 2, 17, 15, 40, 35, 722145), None, '1')
2020-02-17 15:40:35,724 INFO sqlalchemy.engine.base.Engine Thread-394 : COMMIT
2020-02-17 15:40:35,927 INFO sqlalchemy.engine.base.Engine Thread-396 : BEGIN (implicit)
2020-02-17 15:40:35,928 INFO sqlalchemy.engine.base.Engine Thread-396 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 15:40:35,928 INFO sqlalchemy.engine.base.Engine Thread-396 : ()
2020-02-17 15:40:35,929 DEBUG sqlalchemy.engine.base.Engine Thread-396 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 15:40:35,929 DEBUG sqlalchemy.engine.base.Engine Thread-396 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 15:40:35,929 DEBUG sqlalchemy.engine.base.Engine Thread-396 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 15:40:35,929 DEBUG sqlalchemy.engine.base.Engine Thread-396 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 15:40:35,930 INFO sqlalchemy.engine.base.Engine Thread-396 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 15:40:35,930 INFO sqlalchemy.engine.base.Engine Thread-396 : (63,)
2020-02-17 15:40:35,931 DEBUG sqlalchemy.engine.base.Engine Thread-396 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:40:35,931 DEBUG sqlalchemy.engine.base.Engine Thread-396 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:40:35,931 DEBUG sqlalchemy.engine.base.Engine Thread-396 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 15:40:35,931 DEBUG sqlalchemy.engine.base.Engine Thread-396 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:40:35,933 INFO sqlalchemy.engine.base.Engine Thread-396 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 15:40:35,933 INFO sqlalchemy.engine.base.Engine Thread-396 : (124, 1)
2020-02-17 15:40:35,933 DEBUG sqlalchemy.engine.base.Engine Thread-396 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:40:35,933 DEBUG sqlalchemy.engine.base.Engine Thread-396 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 15:40:35,935 INFO sqlalchemy.engine.base.Engine Thread-396 : ROLLBACK
2020-02-17 15:40:48,929 INFO sqlalchemy.engine.base.Engine Thread-398 : BEGIN (implicit)
2020-02-17 15:40:48,930 INFO sqlalchemy.engine.base.Engine Thread-398 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 15:40:48,930 INFO sqlalchemy.engine.base.Engine Thread-398 : ()
2020-02-17 15:40:48,931 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 15:40:48,931 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 15:40:48,931 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 15:40:48,931 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 15:40:48,932 INFO sqlalchemy.engine.base.Engine Thread-398 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 15:40:48,932 INFO sqlalchemy.engine.base.Engine Thread-398 : (63,)
2020-02-17 15:40:48,933 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:40:48,933 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:40:48,933 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 15:40:48,933 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:40:48,935 INFO sqlalchemy.engine.base.Engine Thread-398 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 15:40:48,935 INFO sqlalchemy.engine.base.Engine Thread-398 : (124, 1)
2020-02-17 15:40:48,935 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:40:48,935 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 15:40:48,937 INFO sqlalchemy.engine.base.Engine Thread-398 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.login_id = %s 
 LIMIT %s
2020-02-17 15:40:48,937 INFO sqlalchemy.engine.base.Engine Thread-398 : ('frank', 1)
2020-02-17 15:40:48,938 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:40:48,938 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:40:48,939 INFO sqlalchemy.engine.base.Engine Thread-398 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles 
WHERE roles.id = %s 
 LIMIT %s
2020-02-17 15:40:48,939 INFO sqlalchemy.engine.base.Engine Thread-398 : (2, 1)
2020-02-17 15:40:48,940 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 15:40:48,940 DEBUG sqlalchemy.engine.base.Engine Thread-398 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 15:40:49,252 INFO sqlalchemy.engine.base.Engine Thread-398 : ROLLBACK
2020-02-17 15:40:49,356 INFO sqlalchemy.engine.base.Engine Thread-399 : BEGIN (implicit)
2020-02-17 15:40:49,357 INFO sqlalchemy.engine.base.Engine Thread-399 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 15:40:49,357 INFO sqlalchemy.engine.base.Engine Thread-399 : (3, 1)
2020-02-17 15:40:49,357 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:40:49,357 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:40:49,360 INFO sqlalchemy.engine.base.Engine Thread-399 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-17 15:40:49,360 INFO sqlalchemy.engine.base.Engine Thread-399 : ()
2020-02-17 15:40:49,361 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 15:40:49,361 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-17 15:40:49,361 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-17 15:40:49,361 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-17 15:40:49,361 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-17 15:40:49,362 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 13, 20, 45, 58), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-17 15:40:49,362 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 15:40:49,364 INFO sqlalchemy.engine.base.Engine Thread-399 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-17 15:40:49,364 INFO sqlalchemy.engine.base.Engine Thread-399 : ('frank',)
2020-02-17 15:40:49,365 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 15:40:49,369 INFO sqlalchemy.engine.base.Engine Thread-399 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:40:49,369 INFO sqlalchemy.engine.base.Engine Thread-399 : ('frank', 1, 1)
2020-02-17 15:40:49,369 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:40:49,370 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:40:49,372 INFO sqlalchemy.engine.base.Engine Thread-399 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:40:49,372 INFO sqlalchemy.engine.base.Engine Thread-399 : ('frank', 1, 1)
2020-02-17 15:40:49,373 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:40:49,373 DEBUG sqlalchemy.engine.base.Engine Thread-399 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:40:49,376 INFO sqlalchemy.engine.base.Engine Thread-399 : ROLLBACK
2020-02-17 15:40:59,030 INFO sqlalchemy.engine.base.Engine Thread-408 : BEGIN (implicit)
2020-02-17 15:40:59,031 INFO sqlalchemy.engine.base.Engine Thread-408 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 15:40:59,031 INFO sqlalchemy.engine.base.Engine Thread-408 : (3, 1)
2020-02-17 15:40:59,031 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:40:59,032 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:40:59,034 INFO sqlalchemy.engine.base.Engine Thread-408 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:40:59,034 INFO sqlalchemy.engine.base.Engine Thread-408 : ('frank', 1, 1)
2020-02-17 15:40:59,035 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:40:59,035 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:40:59,053 INFO sqlalchemy.engine.base.Engine Thread-408 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:40:59,053 INFO sqlalchemy.engine.base.Engine Thread-408 : ('frank', 1, 1)
2020-02-17 15:40:59,054 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:40:59,054 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:40:59,057 INFO sqlalchemy.engine.base.Engine Thread-408 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled, roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled, parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM users INNER JOIN roles ON roles.id = users.`role` LEFT OUTER JOIN parameters ON parameters.id = users.vendor ORDER BY users.id ASC
2020-02-17 15:40:59,057 INFO sqlalchemy.engine.base.Engine Thread-408 : ()
2020-02-17 15:40:59,058 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled', 'roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled', 'parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:40:59,059 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:40:59,059 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 15:40:59,059 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:40:59,059 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Row (4, 'evan', 'Evan', 'Troon', 'Account for Evan Troon', '$2b$12$fRYijfQhLPT1wH9/akayhu/1F9l1IgozFbXG4uMk0p5H2u66/tUVy', 'evan@someone.com', 1, 70, datetime.datetime(2019, 9, 2, 15, 14, 53), None, datetime.datetime(2020, 1, 28, 16, 52, 21), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:40:59,059 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Row (6, 'dylan', 'Dylan', 'Troon', 'Dylan Troon TEST12399', '$2b$12$kyttQmBiV7Gxn4NdG1gh1eOwfzfp8LEy5.PUhMLcUyWlVd8F9DSku', 'dylan@somewhere.com', 1, 65, datetime.datetime(2019, 9, 2, 16, 50, 50), None, datetime.datetime(2020, 1, 26, 19, 12, 30), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:40:59,059 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Row (8, 'philip2', 'Philip', 'Troon', 'Test account', '$2b$12$Hpbh0Dfjr9dtIcXAngUGKedF9XdsPlZWtQ0a.iZg0J0zdzAepBKru', 'philiptroon@gmail.com', 6, 65, datetime.datetime(2020, 1, 29, 19, 28, 53), None, datetime.datetime(2020, 2, 4, 12, 44), 'philip', 1, 6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:40:59,059 DEBUG sqlalchemy.engine.base.Engine Thread-408 : Row (10, 'frank1', 'Frank', 'Black', 'me', '$2b$12$/9Y.UwjuJnNTVm1L./S5T.WBgJsFJh92p/U7PL2ccjivBbjjQWWTa', 'frank@somewhere.com', 6, 70, datetime.datetime(2020, 2, 17, 15, 40, 35), None, datetime.datetime(2020, 2, 17, 15, 40, 35), None, 1, 6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:40:59,062 INFO sqlalchemy.engine.base.Engine Thread-408 : ROLLBACK
2020-02-17 15:41:02,551 INFO sqlalchemy.engine.base.Engine Thread-417 : BEGIN (implicit)
2020-02-17 15:41:02,552 INFO sqlalchemy.engine.base.Engine Thread-417 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 15:41:02,552 INFO sqlalchemy.engine.base.Engine Thread-417 : (3, 1)
2020-02-17 15:41:02,553 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:41:02,554 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:41:02,556 INFO sqlalchemy.engine.base.Engine Thread-417 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:41:02,556 INFO sqlalchemy.engine.base.Engine Thread-417 : ('frank', 1, 1)
2020-02-17 15:41:02,557 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:41:02,558 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:41:02,559 INFO sqlalchemy.engine.base.Engine Thread-417 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 15:41:02,559 INFO sqlalchemy.engine.base.Engine Thread-417 : ('10', 1)
2020-02-17 15:41:02,560 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:41:02,560 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (10, 'frank1', 'Frank', 'Black', 'me', '$2b$12$/9Y.UwjuJnNTVm1L./S5T.WBgJsFJh92p/U7PL2ccjivBbjjQWWTa', 'frank@somewhere.com', 6, 70, datetime.datetime(2020, 2, 17, 15, 40, 35), None, datetime.datetime(2020, 2, 17, 15, 40, 35), None, 1)
2020-02-17 15:41:02,563 INFO sqlalchemy.engine.base.Engine Thread-417 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 15:41:02,563 INFO sqlalchemy.engine.base.Engine Thread-417 : ()
2020-02-17 15:41:02,563 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 15:41:02,564 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 15:41:02,564 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 15:41:02,564 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 15:41:02,565 INFO sqlalchemy.engine.base.Engine Thread-417 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 15:41:02,566 INFO sqlalchemy.engine.base.Engine Thread-417 : (63,)
2020-02-17 15:41:02,566 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:41:02,566 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:41:02,566 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 15:41:02,566 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:41:02,600 INFO sqlalchemy.engine.base.Engine Thread-417 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:41:02,600 INFO sqlalchemy.engine.base.Engine Thread-417 : ('frank', 1, 1)
2020-02-17 15:41:02,601 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:41:02,601 DEBUG sqlalchemy.engine.base.Engine Thread-417 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:41:02,603 INFO sqlalchemy.engine.base.Engine Thread-417 : ROLLBACK
2020-02-17 15:41:07,312 INFO sqlalchemy.engine.base.Engine Thread-426 : BEGIN (implicit)
2020-02-17 15:41:07,313 INFO sqlalchemy.engine.base.Engine Thread-426 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 15:41:07,313 INFO sqlalchemy.engine.base.Engine Thread-426 : (3, 1)
2020-02-17 15:41:07,314 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:41:07,314 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:41:07,316 INFO sqlalchemy.engine.base.Engine Thread-426 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:41:07,316 INFO sqlalchemy.engine.base.Engine Thread-426 : ('frank', 1, 1)
2020-02-17 15:41:07,317 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:41:07,317 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:41:07,322 INFO sqlalchemy.engine.base.Engine Thread-426 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:41:07,322 INFO sqlalchemy.engine.base.Engine Thread-426 : ('frank', 1, 1)
2020-02-17 15:41:07,322 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:41:07,323 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:41:07,325 INFO sqlalchemy.engine.base.Engine Thread-426 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled, roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled, parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM users INNER JOIN roles ON roles.id = users.`role` LEFT OUTER JOIN parameters ON parameters.id = users.vendor ORDER BY users.id ASC
2020-02-17 15:41:07,326 INFO sqlalchemy.engine.base.Engine Thread-426 : ()
2020-02-17 15:41:07,327 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled', 'roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled', 'parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 15:41:07,328 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:41:07,328 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 15:41:07,328 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:41:07,328 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Row (4, 'evan', 'Evan', 'Troon', 'Account for Evan Troon', '$2b$12$fRYijfQhLPT1wH9/akayhu/1F9l1IgozFbXG4uMk0p5H2u66/tUVy', 'evan@someone.com', 1, 70, datetime.datetime(2019, 9, 2, 15, 14, 53), None, datetime.datetime(2020, 1, 28, 16, 52, 21), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:41:07,328 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Row (6, 'dylan', 'Dylan', 'Troon', 'Dylan Troon TEST12399', '$2b$12$kyttQmBiV7Gxn4NdG1gh1eOwfzfp8LEy5.PUhMLcUyWlVd8F9DSku', 'dylan@somewhere.com', 1, 65, datetime.datetime(2019, 9, 2, 16, 50, 50), None, datetime.datetime(2020, 1, 26, 19, 12, 30), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:41:07,328 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Row (8, 'philip2', 'Philip', 'Troon', 'Test account', '$2b$12$Hpbh0Dfjr9dtIcXAngUGKedF9XdsPlZWtQ0a.iZg0J0zdzAepBKru', 'philiptroon@gmail.com', 6, 65, datetime.datetime(2020, 1, 29, 19, 28, 53), None, datetime.datetime(2020, 2, 4, 12, 44), 'philip', 1, 6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 15:41:07,328 DEBUG sqlalchemy.engine.base.Engine Thread-426 : Row (10, 'frank1', 'Frank', 'Black', 'me', '$2b$12$/9Y.UwjuJnNTVm1L./S5T.WBgJsFJh92p/U7PL2ccjivBbjjQWWTa', 'frank@somewhere.com', 6, 70, datetime.datetime(2020, 2, 17, 15, 40, 35), None, datetime.datetime(2020, 2, 17, 15, 40, 35), None, 1, 6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 15:41:07,330 INFO sqlalchemy.engine.base.Engine Thread-426 : ROLLBACK
2020-02-17 15:43:18,180 INFO sqlalchemy.engine.base.Engine Thread-435 : BEGIN (implicit)
2020-02-17 15:43:18,182 INFO sqlalchemy.engine.base.Engine Thread-435 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 15:43:18,182 INFO sqlalchemy.engine.base.Engine Thread-435 : (3, 1)
2020-02-17 15:43:18,183 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:43:18,184 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:43:18,186 INFO sqlalchemy.engine.base.Engine Thread-435 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-17 15:43:18,186 INFO sqlalchemy.engine.base.Engine Thread-435 : ()
2020-02-17 15:43:18,187 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 15:43:18,187 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-17 15:43:18,187 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-17 15:43:18,187 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-17 15:43:18,187 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-17 15:43:18,187 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 13, 20, 45, 58), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-17 15:43:18,188 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Row (13, 0, "Bob's test booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's test project", 'project doing something', 'bob', 1, 98, 1, None, '', 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-17 15:43:18,190 INFO sqlalchemy.engine.base.Engine Thread-435 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-17 15:43:18,190 INFO sqlalchemy.engine.base.Engine Thread-435 : ('frank',)
2020-02-17 15:43:18,190 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-17 15:43:18,195 INFO sqlalchemy.engine.base.Engine Thread-435 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:43:18,195 INFO sqlalchemy.engine.base.Engine Thread-435 : ('frank', 1, 1)
2020-02-17 15:43:18,195 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:43:18,196 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:43:18,199 INFO sqlalchemy.engine.base.Engine Thread-435 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-17 15:43:18,199 INFO sqlalchemy.engine.base.Engine Thread-435 : ('frank', 1, 1)
2020-02-17 15:43:18,200 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 15:43:18,201 DEBUG sqlalchemy.engine.base.Engine Thread-435 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 15:43:18,203 INFO sqlalchemy.engine.base.Engine Thread-435 : ROLLBACK
2020-02-17 21:50:38,875 INFO sqlalchemy.engine.base.Engine Thread-444 : BEGIN (implicit)
2020-02-17 21:50:38,877 INFO sqlalchemy.engine.base.Engine Thread-444 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-17 21:50:38,877 INFO sqlalchemy.engine.base.Engine Thread-444 : (3, 1)
2020-02-17 21:50:38,879 DEBUG sqlalchemy.engine.base.Engine Thread-444 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 21:50:38,879 DEBUG sqlalchemy.engine.base.Engine Thread-444 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 21:50:38,882 INFO sqlalchemy.engine.base.Engine Thread-444 : ROLLBACK
2020-02-17 21:50:39,062 INFO sqlalchemy.engine.base.Engine Thread-446 : BEGIN (implicit)
2020-02-17 21:50:39,063 INFO sqlalchemy.engine.base.Engine Thread-446 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 21:50:39,063 INFO sqlalchemy.engine.base.Engine Thread-446 : ()
2020-02-17 21:50:39,063 DEBUG sqlalchemy.engine.base.Engine Thread-446 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 21:50:39,064 DEBUG sqlalchemy.engine.base.Engine Thread-446 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 21:50:39,064 DEBUG sqlalchemy.engine.base.Engine Thread-446 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 21:50:39,064 DEBUG sqlalchemy.engine.base.Engine Thread-446 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 21:50:39,065 INFO sqlalchemy.engine.base.Engine Thread-446 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 21:50:39,066 INFO sqlalchemy.engine.base.Engine Thread-446 : (63,)
2020-02-17 21:50:39,066 DEBUG sqlalchemy.engine.base.Engine Thread-446 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:50:39,066 DEBUG sqlalchemy.engine.base.Engine Thread-446 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 21:50:39,066 DEBUG sqlalchemy.engine.base.Engine Thread-446 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 21:50:39,067 DEBUG sqlalchemy.engine.base.Engine Thread-446 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 21:50:39,068 INFO sqlalchemy.engine.base.Engine Thread-446 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 21:50:39,068 INFO sqlalchemy.engine.base.Engine Thread-446 : (124, 1)
2020-02-17 21:50:39,068 DEBUG sqlalchemy.engine.base.Engine Thread-446 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:50:39,069 DEBUG sqlalchemy.engine.base.Engine Thread-446 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 21:50:39,081 INFO sqlalchemy.engine.base.Engine Thread-446 : ROLLBACK
2020-02-17 21:56:02,740 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-17 21:56:02,740 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:56:02,742 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 21:56:02,742 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-17 21:56:02,743 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-17 21:56:02,743 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:56:02,743 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 21:56:02,744 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-17 21:56:02,744 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-17 21:56:02,744 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:56:02,744 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-17 21:56:02,744 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-17 21:56:02,745 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-17 21:56:02,745 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:56:02,746 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-17 21:56:02,746 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-17 21:56:02,746 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-17 21:56:02,746 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:56:02,747 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-17 21:56:02,747 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:56:02,748 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-17 21:56:02,748 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:56:02,748 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-17 21:56:02,749 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 21:56:02,750 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:56:02,750 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 21:56:02,750 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 21:56:02,751 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 21:56:02,751 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 21:56:02,753 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 21:56:02,753 INFO sqlalchemy.engine.base.Engine Thread-2 : (63,)
2020-02-17 21:56:02,754 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:56:02,754 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 21:56:02,754 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 21:56:02,754 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 21:56:02,785 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-17 21:56:13,690 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-02-17 21:56:13,691 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 21:56:13,691 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-02-17 21:56:13,692 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 21:56:13,692 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 21:56:13,692 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 21:56:13,692 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 21:56:13,694 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 21:56:13,694 INFO sqlalchemy.engine.base.Engine Thread-4 : (63,)
2020-02-17 21:56:13,695 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:56:13,695 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 21:56:13,695 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 21:56:13,695 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 21:56:18,591 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-17 21:57:06,817 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-17 21:57:06,817 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:06,818 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 21:57:06,819 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-17 21:57:06,819 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-17 21:57:06,819 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:06,820 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 21:57:06,820 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-17 21:57:06,820 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-17 21:57:06,820 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:06,820 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-17 21:57:06,821 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-17 21:57:06,821 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-17 21:57:06,821 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:06,822 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-17 21:57:06,822 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-17 21:57:06,822 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-17 21:57:06,822 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:06,823 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-17 21:57:06,823 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:06,823 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-17 21:57:06,824 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:06,824 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-17 21:57:06,825 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 21:57:06,825 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:06,826 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 21:57:06,826 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 21:57:06,826 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 21:57:06,826 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 21:57:06,829 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 21:57:06,829 INFO sqlalchemy.engine.base.Engine Thread-2 : (63,)
2020-02-17 21:57:06,829 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:57:06,830 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 21:57:06,830 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 21:57:06,830 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 21:57:06,864 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-17 21:57:10,590 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-02-17 21:57:10,591 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 21:57:10,591 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-02-17 21:57:10,591 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 21:57:10,592 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 21:57:10,592 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 21:57:10,592 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 21:57:10,593 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 21:57:10,593 INFO sqlalchemy.engine.base.Engine Thread-4 : (63,)
2020-02-17 21:57:10,594 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:57:10,594 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 21:57:10,594 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 21:57:10,594 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 21:57:16,396 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-02-17 21:57:16,397 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 21:57:16,397 INFO sqlalchemy.engine.base.Engine Thread-10 : ()
2020-02-17 21:57:16,398 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 21:57:16,398 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 21:57:16,398 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 21:57:16,398 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 21:57:16,399 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 21:57:16,399 INFO sqlalchemy.engine.base.Engine Thread-10 : (63,)
2020-02-17 21:57:16,400 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:57:16,400 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 21:57:16,400 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 21:57:16,400 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 21:57:16,402 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
2020-02-17 21:57:46,132 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-17 21:57:46,132 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:46,133 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 21:57:46,134 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-17 21:57:46,135 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-17 21:57:46,135 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:46,135 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 21:57:46,135 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-17 21:57:46,136 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-17 21:57:46,136 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:46,136 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-17 21:57:46,136 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-17 21:57:46,137 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-17 21:57:46,137 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:46,137 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-17 21:57:46,138 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-17 21:57:46,139 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-17 21:57:46,139 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:46,139 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-17 21:57:46,140 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:46,140 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-17 21:57:46,140 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:46,141 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-17 21:57:46,142 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 21:57:46,142 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:57:46,143 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 21:57:46,143 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 21:57:46,144 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 21:57:46,144 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 21:57:46,146 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 21:57:46,146 INFO sqlalchemy.engine.base.Engine Thread-2 : (63,)
2020-02-17 21:57:46,147 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:57:46,147 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 21:57:46,147 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 21:57:46,147 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 21:57:46,180 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-17 21:57:50,985 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-02-17 21:57:50,985 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 21:57:50,985 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-02-17 21:57:50,986 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 21:57:50,986 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 21:57:50,986 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 21:57:50,987 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 21:57:50,988 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 21:57:50,989 INFO sqlalchemy.engine.base.Engine Thread-4 : (63,)
2020-02-17 21:57:50,989 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:57:50,989 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 21:57:50,990 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 21:57:50,990 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 21:57:50,995 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE lower(users.login_id) LIKE lower(%s) 
 LIMIT %s
2020-02-17 21:57:50,995 INFO sqlalchemy.engine.base.Engine Thread-4 : ('frank', 1)
2020-02-17 21:57:50,996 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 21:57:50,996 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 21:57:50,999 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-02-17 21:57:54,312 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-02-17 21:57:54,312 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 21:57:54,312 INFO sqlalchemy.engine.base.Engine Thread-6 : ()
2020-02-17 21:57:54,313 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 21:57:54,313 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 21:57:54,313 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 21:57:54,314 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 21:57:54,315 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 21:57:54,315 INFO sqlalchemy.engine.base.Engine Thread-6 : (63,)
2020-02-17 21:57:54,315 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:57:54,316 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 21:57:54,316 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 21:57:54,316 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 21:57:54,319 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-02-17 21:57:58,496 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-02-17 21:57:58,497 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 21:57:58,497 INFO sqlalchemy.engine.base.Engine Thread-8 : ()
2020-02-17 21:57:58,498 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 21:57:58,498 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 21:57:58,498 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 21:57:58,498 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 21:57:58,499 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 21:57:58,500 INFO sqlalchemy.engine.base.Engine Thread-8 : (63,)
2020-02-17 21:57:58,500 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:57:58,500 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 21:57:58,500 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 21:57:58,500 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 21:57:58,502 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE lower(users.login_id) LIKE lower(%s) 
 LIMIT %s
2020-02-17 21:57:58,503 INFO sqlalchemy.engine.base.Engine Thread-8 : ('frank', 1)
2020-02-17 21:57:58,503 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 21:57:58,503 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 21:57:58,506 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-02-17 21:58:54,043 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-17 21:58:54,044 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:58:54,045 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 21:58:54,045 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-17 21:58:54,046 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-17 21:58:54,046 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:58:54,046 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 21:58:54,046 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-17 21:58:54,047 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-17 21:58:54,047 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:58:54,047 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-17 21:58:54,047 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-17 21:58:54,047 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-17 21:58:54,047 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:58:54,048 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-17 21:58:54,048 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-17 21:58:54,049 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-17 21:58:54,049 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:58:54,049 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-17 21:58:54,049 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:58:54,050 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-17 21:58:54,050 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:58:54,051 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-17 21:58:54,052 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 21:58:54,052 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 21:58:54,052 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 21:58:54,053 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 21:58:54,053 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 21:58:54,053 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 21:58:54,055 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 21:58:54,055 INFO sqlalchemy.engine.base.Engine Thread-2 : (63,)
2020-02-17 21:58:54,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 21:58:54,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 21:58:54,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 21:58:54,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 21:58:54,060 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE lower(users.login_id) LIKE lower(%s) 
 LIMIT %s
2020-02-17 21:58:54,061 INFO sqlalchemy.engine.base.Engine Thread-2 : ('frank', 1)
2020-02-17 21:58:54,061 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 21:58:54,062 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 21:58:54,095 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-17 22:00:08,319 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-17 22:00:08,319 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:08,320 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 22:00:08,321 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-17 22:00:08,321 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-17 22:00:08,321 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:08,322 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 22:00:08,322 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-17 22:00:08,322 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-17 22:00:08,322 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:08,323 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-17 22:00:08,323 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-17 22:00:08,323 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-17 22:00:08,323 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:08,324 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-17 22:00:08,324 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-17 22:00:08,324 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-17 22:00:08,324 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:08,325 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-17 22:00:08,325 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:08,326 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-17 22:00:08,326 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:08,326 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-17 22:00:08,327 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 22:00:08,327 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:08,328 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 22:00:08,328 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 22:00:08,329 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 22:00:08,329 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 22:00:08,331 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 22:00:08,331 INFO sqlalchemy.engine.base.Engine Thread-2 : (63,)
2020-02-17 22:00:08,332 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:00:08,332 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 22:00:08,332 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 22:00:08,332 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 22:00:08,336 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE lower(users.login_id) LIKE lower(%s) 
 LIMIT %s
2020-02-17 22:00:08,336 INFO sqlalchemy.engine.base.Engine Thread-2 : ('frank', 1)
2020-02-17 22:00:08,337 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 22:00:08,337 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0)
2020-02-17 22:00:08,368 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-17 22:00:20,658 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-02-17 22:00:20,659 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 22:00:20,659 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-02-17 22:00:20,660 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 22:00:20,660 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 22:00:20,660 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 22:00:20,661 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 22:00:20,662 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 22:00:20,662 INFO sqlalchemy.engine.base.Engine Thread-4 : (63,)
2020-02-17 22:00:20,663 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:00:20,663 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 22:00:20,663 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 22:00:20,663 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 22:00:20,664 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 22:00:20,665 INFO sqlalchemy.engine.base.Engine Thread-4 : (124, 1)
2020-02-17 22:00:20,665 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:00:20,665 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 22:00:20,677 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-02-17 22:00:21,977 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-02-17 22:00:21,978 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 22:00:21,978 INFO sqlalchemy.engine.base.Engine Thread-6 : ()
2020-02-17 22:00:21,979 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 22:00:21,979 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 22:00:21,979 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 22:00:21,979 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 22:00:21,980 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 22:00:21,980 INFO sqlalchemy.engine.base.Engine Thread-6 : (63,)
2020-02-17 22:00:21,981 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:00:21,981 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 22:00:21,981 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 22:00:21,981 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 22:00:21,983 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-02-17 22:00:28,857 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-02-17 22:00:28,857 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 22:00:28,857 INFO sqlalchemy.engine.base.Engine Thread-8 : ()
2020-02-17 22:00:28,858 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 22:00:28,858 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 22:00:28,858 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 22:00:28,858 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 22:00:28,860 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 22:00:28,860 INFO sqlalchemy.engine.base.Engine Thread-8 : (63,)
2020-02-17 22:00:28,860 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:00:28,861 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 22:00:28,861 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 22:00:28,861 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 22:00:28,863 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE lower(users.login_id) LIKE lower(%s) 
 LIMIT %s
2020-02-17 22:00:28,863 INFO sqlalchemy.engine.base.Engine Thread-8 : ('bob', 1)
2020-02-17 22:00:28,864 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 22:00:28,864 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 22:00:28,867 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-02-17 22:00:33,760 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-02-17 22:00:33,760 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 22:00:33,760 INFO sqlalchemy.engine.base.Engine Thread-10 : ()
2020-02-17 22:00:33,761 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 22:00:33,761 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 22:00:33,761 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 22:00:33,761 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 22:00:33,763 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 22:00:33,763 INFO sqlalchemy.engine.base.Engine Thread-10 : (63,)
2020-02-17 22:00:33,763 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:00:33,764 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 22:00:33,764 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 22:00:33,764 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 22:00:33,765 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 22:00:33,765 INFO sqlalchemy.engine.base.Engine Thread-10 : (124, 1)
2020-02-17 22:00:33,765 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:00:33,766 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 22:00:33,767 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
2020-02-17 22:00:59,043 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-17 22:00:59,043 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:59,044 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 22:00:59,045 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-17 22:00:59,045 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-17 22:00:59,045 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:59,046 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-17 22:00:59,046 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-17 22:00:59,046 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-17 22:00:59,046 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:59,047 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-17 22:00:59,047 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-17 22:00:59,047 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-17 22:00:59,047 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:59,048 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-17 22:00:59,048 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-17 22:00:59,049 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-17 22:00:59,049 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:59,049 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-17 22:00:59,049 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:59,050 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-17 22:00:59,050 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:59,051 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-17 22:00:59,052 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 22:00:59,052 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-17 22:00:59,052 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 22:00:59,053 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 22:00:59,053 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 22:00:59,053 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 22:00:59,055 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 22:00:59,055 INFO sqlalchemy.engine.base.Engine Thread-2 : (63,)
2020-02-17 22:00:59,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:00:59,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 22:00:59,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 22:00:59,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 22:00:59,087 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-17 22:01:03,781 INFO sqlalchemy.engine.base.Engine Thread-4 : BEGIN (implicit)
2020-02-17 22:01:03,782 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 22:01:03,782 INFO sqlalchemy.engine.base.Engine Thread-4 : ()
2020-02-17 22:01:03,782 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 22:01:03,783 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 22:01:03,783 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 22:01:03,783 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 22:01:03,785 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 22:01:03,785 INFO sqlalchemy.engine.base.Engine Thread-4 : (63,)
2020-02-17 22:01:03,785 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:01:03,786 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 22:01:03,786 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 22:01:03,786 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 22:01:03,790 INFO sqlalchemy.engine.base.Engine Thread-4 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE lower(users.login_id) LIKE lower(%s) 
 LIMIT %s
2020-02-17 22:01:03,790 INFO sqlalchemy.engine.base.Engine Thread-4 : ('bob', 1)
2020-02-17 22:01:03,791 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-17 22:01:03,791 DEBUG sqlalchemy.engine.base.Engine Thread-4 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-17 22:01:03,795 INFO sqlalchemy.engine.base.Engine Thread-4 : ROLLBACK
2020-02-17 22:01:09,044 INFO sqlalchemy.engine.base.Engine Thread-6 : BEGIN (implicit)
2020-02-17 22:01:09,045 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 22:01:09,045 INFO sqlalchemy.engine.base.Engine Thread-6 : ()
2020-02-17 22:01:09,046 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 22:01:09,046 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 22:01:09,046 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 22:01:09,046 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 22:01:09,048 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 22:01:09,048 INFO sqlalchemy.engine.base.Engine Thread-6 : (63,)
2020-02-17 22:01:09,048 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:01:09,048 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 22:01:09,048 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 22:01:09,048 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 22:01:09,050 INFO sqlalchemy.engine.base.Engine Thread-6 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 22:01:09,050 INFO sqlalchemy.engine.base.Engine Thread-6 : (124, 1)
2020-02-17 22:01:09,050 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:01:09,051 DEBUG sqlalchemy.engine.base.Engine Thread-6 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 22:01:09,063 INFO sqlalchemy.engine.base.Engine Thread-6 : ROLLBACK
2020-02-17 22:01:20,962 INFO sqlalchemy.engine.base.Engine Thread-8 : BEGIN (implicit)
2020-02-17 22:01:20,963 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 22:01:20,963 INFO sqlalchemy.engine.base.Engine Thread-8 : ()
2020-02-17 22:01:20,964 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 22:01:20,964 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 22:01:20,964 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 22:01:20,964 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 22:01:20,966 INFO sqlalchemy.engine.base.Engine Thread-8 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 22:01:20,966 INFO sqlalchemy.engine.base.Engine Thread-8 : (63,)
2020-02-17 22:01:20,966 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:01:20,967 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 22:01:20,967 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 22:01:20,967 DEBUG sqlalchemy.engine.base.Engine Thread-8 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 22:01:20,969 INFO sqlalchemy.engine.base.Engine Thread-8 : ROLLBACK
2020-02-17 22:01:24,889 INFO sqlalchemy.engine.base.Engine Thread-10 : BEGIN (implicit)
2020-02-17 22:01:24,890 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-17 22:01:24,890 INFO sqlalchemy.engine.base.Engine Thread-10 : ()
2020-02-17 22:01:24,891 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-17 22:01:24,891 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-17 22:01:24,891 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-17 22:01:24,891 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-17 22:01:24,892 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-17 22:01:24,892 INFO sqlalchemy.engine.base.Engine Thread-10 : (63,)
2020-02-17 22:01:24,893 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:01:24,893 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-17 22:01:24,893 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-17 22:01:24,893 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-17 22:01:24,895 INFO sqlalchemy.engine.base.Engine Thread-10 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.id = %s 
 LIMIT %s
2020-02-17 22:01:24,895 INFO sqlalchemy.engine.base.Engine Thread-10 : (124, 1)
2020-02-17 22:01:24,895 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-17 22:01:24,896 DEBUG sqlalchemy.engine.base.Engine Thread-10 : Row (124, 'Message of the Day', 'This system is in BETA and is subject to frequent change', 0, 0, 0, 1)
2020-02-17 22:01:24,897 INFO sqlalchemy.engine.base.Engine Thread-10 : ROLLBACK
