2020-02-08 00:06:01,378 INFO sqlalchemy.engine.base.Engine Thread-487 : BEGIN (implicit)
2020-02-08 00:06:01,384 INFO sqlalchemy.engine.base.Engine Thread-487 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:06:01,384 INFO sqlalchemy.engine.base.Engine Thread-487 : ()
2020-02-08 00:06:01,386 DEBUG sqlalchemy.engine.base.Engine Thread-487 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:06:01,386 DEBUG sqlalchemy.engine.base.Engine Thread-487 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:06:01,386 DEBUG sqlalchemy.engine.base.Engine Thread-487 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:06:01,389 INFO sqlalchemy.engine.base.Engine Thread-487 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:06:01,389 INFO sqlalchemy.engine.base.Engine Thread-487 : (1, 1)
2020-02-08 00:06:01,390 DEBUG sqlalchemy.engine.base.Engine Thread-487 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:01,390 DEBUG sqlalchemy.engine.base.Engine Thread-487 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:01,395 INFO sqlalchemy.engine.base.Engine Thread-487 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:06:01,395 INFO sqlalchemy.engine.base.Engine Thread-487 : ('philip', 1, 1)
2020-02-08 00:06:01,396 DEBUG sqlalchemy.engine.base.Engine Thread-487 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:01,396 DEBUG sqlalchemy.engine.base.Engine Thread-487 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:01,398 INFO sqlalchemy.engine.base.Engine Thread-487 : ROLLBACK
2020-02-08 00:06:01,954 INFO sqlalchemy.engine.base.Engine Thread-496 : BEGIN (implicit)
2020-02-08 00:06:01,955 INFO sqlalchemy.engine.base.Engine Thread-496 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:01,955 INFO sqlalchemy.engine.base.Engine Thread-496 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:06:01,956 DEBUG sqlalchemy.engine.base.Engine Thread-496 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:01,956 DEBUG sqlalchemy.engine.base.Engine Thread-496 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:06:01,960 INFO sqlalchemy.engine.base.Engine Thread-496 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:01,960 INFO sqlalchemy.engine.base.Engine Thread-496 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:06:01,960 DEBUG sqlalchemy.engine.base.Engine Thread-496 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:01,961 DEBUG sqlalchemy.engine.base.Engine Thread-496 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:06:01,964 INFO sqlalchemy.engine.base.Engine Thread-496 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:06:01,964 INFO sqlalchemy.engine.base.Engine Thread-496 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:01,964 DEBUG sqlalchemy.engine.base.Engine Thread-496 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:01,965 DEBUG sqlalchemy.engine.base.Engine Thread-496 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:01,965 DEBUG sqlalchemy.engine.base.Engine Thread-496 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:01,968 INFO sqlalchemy.engine.base.Engine Thread-496 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:06:01,968 INFO sqlalchemy.engine.base.Engine Thread-496 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:01,969 DEBUG sqlalchemy.engine.base.Engine Thread-496 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:01,969 DEBUG sqlalchemy.engine.base.Engine Thread-496 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:06:01,970 INFO sqlalchemy.engine.base.Engine Thread-496 : ROLLBACK
2020-02-08 00:06:01,989 INFO sqlalchemy.engine.base.Engine Thread-497 : BEGIN (implicit)
2020-02-08 00:06:01,991 INFO sqlalchemy.engine.base.Engine Thread-497 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:01,991 INFO sqlalchemy.engine.base.Engine Thread-497 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:06:01,992 DEBUG sqlalchemy.engine.base.Engine Thread-497 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:01,992 DEBUG sqlalchemy.engine.base.Engine Thread-497 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:06:01,996 INFO sqlalchemy.engine.base.Engine Thread-497 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:01,996 INFO sqlalchemy.engine.base.Engine Thread-497 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:06:01,996 DEBUG sqlalchemy.engine.base.Engine Thread-497 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:01,997 DEBUG sqlalchemy.engine.base.Engine Thread-497 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:06:02,003 INFO sqlalchemy.engine.base.Engine Thread-497 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:06:02,003 INFO sqlalchemy.engine.base.Engine Thread-497 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:02,004 DEBUG sqlalchemy.engine.base.Engine Thread-497 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:02,004 DEBUG sqlalchemy.engine.base.Engine Thread-497 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:02,004 DEBUG sqlalchemy.engine.base.Engine Thread-497 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:02,007 INFO sqlalchemy.engine.base.Engine Thread-497 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:06:02,007 INFO sqlalchemy.engine.base.Engine Thread-497 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:02,008 DEBUG sqlalchemy.engine.base.Engine Thread-497 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:02,008 DEBUG sqlalchemy.engine.base.Engine Thread-497 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:06:02,009 INFO sqlalchemy.engine.base.Engine Thread-497 : ROLLBACK
2020-02-08 00:06:02,814 INFO sqlalchemy.engine.base.Engine Thread-498 : BEGIN (implicit)
2020-02-08 00:06:02,815 INFO sqlalchemy.engine.base.Engine Thread-498 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:06:02,815 INFO sqlalchemy.engine.base.Engine Thread-498 : (1, 1)
2020-02-08 00:06:02,816 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:02,816 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:02,818 INFO sqlalchemy.engine.base.Engine Thread-498 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 00:06:02,818 INFO sqlalchemy.engine.base.Engine Thread-498 : ('philip',)
2020-02-08 00:06:02,819 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:06:02,820 INFO sqlalchemy.engine.base.Engine Thread-498 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 00:06:02,821 INFO sqlalchemy.engine.base.Engine Thread-498 : ()
2020-02-08 00:06:02,821 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:06:02,821 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 00:06:02,821 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 00:06:02,822 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 00:06:02,822 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 00:06:02,826 INFO sqlalchemy.engine.base.Engine Thread-498 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:06:02,826 INFO sqlalchemy.engine.base.Engine Thread-498 : ('philip', 1, 1)
2020-02-08 00:06:02,826 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:02,827 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:02,829 INFO sqlalchemy.engine.base.Engine Thread-498 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:06:02,829 INFO sqlalchemy.engine.base.Engine Thread-498 : ('philip', 1, 1)
2020-02-08 00:06:02,830 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:02,830 DEBUG sqlalchemy.engine.base.Engine Thread-498 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:02,831 INFO sqlalchemy.engine.base.Engine Thread-498 : ROLLBACK
2020-02-08 00:06:03,286 INFO sqlalchemy.engine.base.Engine Thread-507 : BEGIN (implicit)
2020-02-08 00:06:03,287 INFO sqlalchemy.engine.base.Engine Thread-507 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:06:03,287 INFO sqlalchemy.engine.base.Engine Thread-507 : (1, 1)
2020-02-08 00:06:03,289 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:03,290 DEBUG sqlalchemy.engine.base.Engine Thread-507 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:03,291 INFO sqlalchemy.engine.base.Engine Thread-507 : ROLLBACK
2020-02-08 00:06:03,325 INFO sqlalchemy.engine.base.Engine Thread-508 : BEGIN (implicit)
2020-02-08 00:06:03,326 INFO sqlalchemy.engine.base.Engine Thread-508 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:06:03,326 INFO sqlalchemy.engine.base.Engine Thread-508 : (1, 1)
2020-02-08 00:06:03,326 DEBUG sqlalchemy.engine.base.Engine Thread-508 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:03,327 DEBUG sqlalchemy.engine.base.Engine Thread-508 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:03,328 INFO sqlalchemy.engine.base.Engine Thread-508 : ROLLBACK
2020-02-08 00:06:05,480 INFO sqlalchemy.engine.base.Engine Thread-509 : BEGIN (implicit)
2020-02-08 00:06:05,481 INFO sqlalchemy.engine.base.Engine Thread-509 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 00:06:05,481 INFO sqlalchemy.engine.base.Engine Thread-509 : ('7', 1)
2020-02-08 00:06:05,482 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:06:05,482 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 00:06:05,487 INFO sqlalchemy.engine.base.Engine Thread-509 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:06:05,487 INFO sqlalchemy.engine.base.Engine Thread-509 : ()
2020-02-08 00:06:05,488 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:06:05,488 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:06:05,488 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:06:05,490 INFO sqlalchemy.engine.base.Engine Thread-509 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:06:05,490 INFO sqlalchemy.engine.base.Engine Thread-509 : (97,)
2020-02-08 00:06:05,490 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:06:05,491 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 00:06:05,491 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 00:06:05,493 INFO sqlalchemy.engine.base.Engine Thread-509 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:06:05,493 INFO sqlalchemy.engine.base.Engine Thread-509 : (1, 1)
2020-02-08 00:06:05,493 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:05,494 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:05,547 INFO sqlalchemy.engine.base.Engine Thread-509 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:06:05,547 INFO sqlalchemy.engine.base.Engine Thread-509 : ('philip', 1, 1)
2020-02-08 00:06:05,548 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:05,548 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:05,552 INFO sqlalchemy.engine.base.Engine Thread-509 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:06:05,552 INFO sqlalchemy.engine.base.Engine Thread-509 : ('philip', 1, 1)
2020-02-08 00:06:05,553 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:05,553 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:05,555 INFO sqlalchemy.engine.base.Engine Thread-509 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:06:05,555 INFO sqlalchemy.engine.base.Engine Thread-509 : ('philip', 1, 1)
2020-02-08 00:06:05,556 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:05,556 DEBUG sqlalchemy.engine.base.Engine Thread-509 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:05,557 INFO sqlalchemy.engine.base.Engine Thread-509 : ROLLBACK
2020-02-08 00:06:12,216 INFO sqlalchemy.engine.base.Engine Thread-518 : BEGIN (implicit)
2020-02-08 00:06:12,218 INFO sqlalchemy.engine.base.Engine Thread-518 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:06:12,218 INFO sqlalchemy.engine.base.Engine Thread-518 : ()
2020-02-08 00:06:12,219 DEBUG sqlalchemy.engine.base.Engine Thread-518 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:06:12,219 DEBUG sqlalchemy.engine.base.Engine Thread-518 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:06:12,219 DEBUG sqlalchemy.engine.base.Engine Thread-518 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:06:12,221 INFO sqlalchemy.engine.base.Engine Thread-518 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:06:12,222 INFO sqlalchemy.engine.base.Engine Thread-518 : (1, 1)
2020-02-08 00:06:12,222 DEBUG sqlalchemy.engine.base.Engine Thread-518 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:12,222 DEBUG sqlalchemy.engine.base.Engine Thread-518 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:12,227 INFO sqlalchemy.engine.base.Engine Thread-518 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:06:12,227 INFO sqlalchemy.engine.base.Engine Thread-518 : ('philip', 1, 1)
2020-02-08 00:06:12,228 DEBUG sqlalchemy.engine.base.Engine Thread-518 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:12,228 DEBUG sqlalchemy.engine.base.Engine Thread-518 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:12,229 INFO sqlalchemy.engine.base.Engine Thread-518 : ROLLBACK
2020-02-08 00:06:12,696 INFO sqlalchemy.engine.base.Engine Thread-527 : BEGIN (implicit)
2020-02-08 00:06:12,697 INFO sqlalchemy.engine.base.Engine Thread-527 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:12,698 INFO sqlalchemy.engine.base.Engine Thread-527 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:06:12,699 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:12,699 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:06:12,702 INFO sqlalchemy.engine.base.Engine Thread-527 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:12,702 INFO sqlalchemy.engine.base.Engine Thread-527 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:06:12,703 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:12,703 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:06:12,706 INFO sqlalchemy.engine.base.Engine Thread-527 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:06:12,706 INFO sqlalchemy.engine.base.Engine Thread-527 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:12,707 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:12,707 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:12,707 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:12,710 INFO sqlalchemy.engine.base.Engine Thread-527 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:06:12,710 INFO sqlalchemy.engine.base.Engine Thread-527 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:12,711 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:12,711 DEBUG sqlalchemy.engine.base.Engine Thread-527 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:06:12,712 INFO sqlalchemy.engine.base.Engine Thread-527 : ROLLBACK
2020-02-08 00:06:12,739 INFO sqlalchemy.engine.base.Engine Thread-528 : BEGIN (implicit)
2020-02-08 00:06:12,740 INFO sqlalchemy.engine.base.Engine Thread-528 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:12,740 INFO sqlalchemy.engine.base.Engine Thread-528 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:06:12,741 DEBUG sqlalchemy.engine.base.Engine Thread-528 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:12,741 DEBUG sqlalchemy.engine.base.Engine Thread-528 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:06:12,744 INFO sqlalchemy.engine.base.Engine Thread-528 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:12,744 INFO sqlalchemy.engine.base.Engine Thread-528 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:06:12,745 DEBUG sqlalchemy.engine.base.Engine Thread-528 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:12,745 DEBUG sqlalchemy.engine.base.Engine Thread-528 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:06:12,748 INFO sqlalchemy.engine.base.Engine Thread-528 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:06:12,748 INFO sqlalchemy.engine.base.Engine Thread-528 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:12,749 DEBUG sqlalchemy.engine.base.Engine Thread-528 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:12,749 DEBUG sqlalchemy.engine.base.Engine Thread-528 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:12,749 DEBUG sqlalchemy.engine.base.Engine Thread-528 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:12,752 INFO sqlalchemy.engine.base.Engine Thread-528 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:06:12,752 INFO sqlalchemy.engine.base.Engine Thread-528 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:12,752 DEBUG sqlalchemy.engine.base.Engine Thread-528 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:12,753 DEBUG sqlalchemy.engine.base.Engine Thread-528 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:06:12,753 INFO sqlalchemy.engine.base.Engine Thread-528 : ROLLBACK
2020-02-08 00:06:29,526 INFO sqlalchemy.engine.base.Engine Thread-529 : BEGIN (implicit)
2020-02-08 00:06:29,529 INFO sqlalchemy.engine.base.Engine Thread-529 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:06:29,529 INFO sqlalchemy.engine.base.Engine Thread-529 : ()
2020-02-08 00:06:29,531 DEBUG sqlalchemy.engine.base.Engine Thread-529 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:06:29,531 DEBUG sqlalchemy.engine.base.Engine Thread-529 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:06:29,531 DEBUG sqlalchemy.engine.base.Engine Thread-529 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:06:29,534 INFO sqlalchemy.engine.base.Engine Thread-529 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:06:29,534 INFO sqlalchemy.engine.base.Engine Thread-529 : (1, 1)
2020-02-08 00:06:29,535 DEBUG sqlalchemy.engine.base.Engine Thread-529 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:29,535 DEBUG sqlalchemy.engine.base.Engine Thread-529 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:29,540 INFO sqlalchemy.engine.base.Engine Thread-529 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:06:29,540 INFO sqlalchemy.engine.base.Engine Thread-529 : ('philip', 1, 1)
2020-02-08 00:06:29,541 DEBUG sqlalchemy.engine.base.Engine Thread-529 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:06:29,541 DEBUG sqlalchemy.engine.base.Engine Thread-529 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:06:29,543 INFO sqlalchemy.engine.base.Engine Thread-529 : ROLLBACK
2020-02-08 00:06:30,090 INFO sqlalchemy.engine.base.Engine Thread-538 : BEGIN (implicit)
2020-02-08 00:06:30,092 INFO sqlalchemy.engine.base.Engine Thread-538 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:30,092 INFO sqlalchemy.engine.base.Engine Thread-538 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:06:30,093 DEBUG sqlalchemy.engine.base.Engine Thread-538 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:30,093 DEBUG sqlalchemy.engine.base.Engine Thread-538 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:06:30,097 INFO sqlalchemy.engine.base.Engine Thread-538 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:30,097 INFO sqlalchemy.engine.base.Engine Thread-538 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:06:30,098 DEBUG sqlalchemy.engine.base.Engine Thread-538 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:30,098 DEBUG sqlalchemy.engine.base.Engine Thread-538 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:06:30,102 INFO sqlalchemy.engine.base.Engine Thread-538 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:06:30,102 INFO sqlalchemy.engine.base.Engine Thread-538 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:30,103 DEBUG sqlalchemy.engine.base.Engine Thread-538 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:30,103 DEBUG sqlalchemy.engine.base.Engine Thread-538 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:30,103 DEBUG sqlalchemy.engine.base.Engine Thread-538 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:30,107 INFO sqlalchemy.engine.base.Engine Thread-538 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:06:30,107 INFO sqlalchemy.engine.base.Engine Thread-538 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:30,108 DEBUG sqlalchemy.engine.base.Engine Thread-538 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:30,108 DEBUG sqlalchemy.engine.base.Engine Thread-538 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:06:30,109 INFO sqlalchemy.engine.base.Engine Thread-538 : ROLLBACK
2020-02-08 00:06:30,133 INFO sqlalchemy.engine.base.Engine Thread-539 : BEGIN (implicit)
2020-02-08 00:06:30,134 INFO sqlalchemy.engine.base.Engine Thread-539 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:30,134 INFO sqlalchemy.engine.base.Engine Thread-539 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:06:30,135 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:30,135 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:06:30,140 INFO sqlalchemy.engine.base.Engine Thread-539 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:06:30,141 INFO sqlalchemy.engine.base.Engine Thread-539 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:06:30,141 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:30,142 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:06:30,145 INFO sqlalchemy.engine.base.Engine Thread-539 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:06:30,145 INFO sqlalchemy.engine.base.Engine Thread-539 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:30,146 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:30,146 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:30,146 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:06:30,150 INFO sqlalchemy.engine.base.Engine Thread-539 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:06:30,150 INFO sqlalchemy.engine.base.Engine Thread-539 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:06:30,150 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:06:30,151 DEBUG sqlalchemy.engine.base.Engine Thread-539 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:06:30,152 INFO sqlalchemy.engine.base.Engine Thread-539 : ROLLBACK
2020-02-08 00:09:25,311 INFO sqlalchemy.engine.base.Engine Thread-541 : BEGIN (implicit)
2020-02-08 00:09:25,314 INFO sqlalchemy.engine.base.Engine Thread-541 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:09:25,314 INFO sqlalchemy.engine.base.Engine Thread-541 : ()
2020-02-08 00:09:25,316 DEBUG sqlalchemy.engine.base.Engine Thread-541 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:09:25,316 DEBUG sqlalchemy.engine.base.Engine Thread-541 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:09:25,316 DEBUG sqlalchemy.engine.base.Engine Thread-541 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:09:25,319 INFO sqlalchemy.engine.base.Engine Thread-541 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:09:25,319 INFO sqlalchemy.engine.base.Engine Thread-541 : (1, 1)
2020-02-08 00:09:25,319 DEBUG sqlalchemy.engine.base.Engine Thread-541 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:09:25,320 DEBUG sqlalchemy.engine.base.Engine Thread-541 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:09:25,332 INFO sqlalchemy.engine.base.Engine Thread-541 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:09:25,332 INFO sqlalchemy.engine.base.Engine Thread-541 : ('philip', 1, 1)
2020-02-08 00:09:25,333 DEBUG sqlalchemy.engine.base.Engine Thread-541 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:09:25,334 DEBUG sqlalchemy.engine.base.Engine Thread-541 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:09:25,335 INFO sqlalchemy.engine.base.Engine Thread-541 : ROLLBACK
2020-02-08 00:09:25,905 INFO sqlalchemy.engine.base.Engine Thread-550 : BEGIN (implicit)
2020-02-08 00:09:25,906 INFO sqlalchemy.engine.base.Engine Thread-550 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:09:25,906 INFO sqlalchemy.engine.base.Engine Thread-550 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:09:25,908 DEBUG sqlalchemy.engine.base.Engine Thread-550 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:25,908 DEBUG sqlalchemy.engine.base.Engine Thread-550 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:09:25,911 INFO sqlalchemy.engine.base.Engine Thread-550 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:09:25,911 INFO sqlalchemy.engine.base.Engine Thread-550 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:09:25,912 DEBUG sqlalchemy.engine.base.Engine Thread-550 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:25,912 DEBUG sqlalchemy.engine.base.Engine Thread-550 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:09:25,915 INFO sqlalchemy.engine.base.Engine Thread-550 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:09:25,915 INFO sqlalchemy.engine.base.Engine Thread-550 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:09:25,916 DEBUG sqlalchemy.engine.base.Engine Thread-550 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:25,916 DEBUG sqlalchemy.engine.base.Engine Thread-550 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:09:25,916 DEBUG sqlalchemy.engine.base.Engine Thread-550 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:09:25,919 INFO sqlalchemy.engine.base.Engine Thread-550 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:09:25,919 INFO sqlalchemy.engine.base.Engine Thread-550 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:09:25,920 DEBUG sqlalchemy.engine.base.Engine Thread-550 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:25,920 DEBUG sqlalchemy.engine.base.Engine Thread-550 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:09:25,921 INFO sqlalchemy.engine.base.Engine Thread-550 : ROLLBACK
2020-02-08 00:09:25,943 INFO sqlalchemy.engine.base.Engine Thread-551 : BEGIN (implicit)
2020-02-08 00:09:25,945 INFO sqlalchemy.engine.base.Engine Thread-551 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:09:25,945 INFO sqlalchemy.engine.base.Engine Thread-551 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:09:25,945 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:25,946 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:09:25,949 INFO sqlalchemy.engine.base.Engine Thread-551 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:09:25,949 INFO sqlalchemy.engine.base.Engine Thread-551 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:09:25,949 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:25,950 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:09:25,953 INFO sqlalchemy.engine.base.Engine Thread-551 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:09:25,953 INFO sqlalchemy.engine.base.Engine Thread-551 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:09:25,954 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:25,954 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:09:25,954 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:09:25,957 INFO sqlalchemy.engine.base.Engine Thread-551 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:09:25,957 INFO sqlalchemy.engine.base.Engine Thread-551 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:09:25,958 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:25,958 DEBUG sqlalchemy.engine.base.Engine Thread-551 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:09:25,959 INFO sqlalchemy.engine.base.Engine Thread-551 : ROLLBACK
2020-02-08 00:09:48,356 INFO sqlalchemy.engine.base.Engine Thread-553 : BEGIN (implicit)
2020-02-08 00:09:48,357 INFO sqlalchemy.engine.base.Engine Thread-553 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:09:48,358 INFO sqlalchemy.engine.base.Engine Thread-553 : ()
2020-02-08 00:09:48,359 DEBUG sqlalchemy.engine.base.Engine Thread-553 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:09:48,359 DEBUG sqlalchemy.engine.base.Engine Thread-553 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:09:48,359 DEBUG sqlalchemy.engine.base.Engine Thread-553 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:09:48,361 INFO sqlalchemy.engine.base.Engine Thread-553 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:09:48,362 INFO sqlalchemy.engine.base.Engine Thread-553 : (1, 1)
2020-02-08 00:09:48,362 DEBUG sqlalchemy.engine.base.Engine Thread-553 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:09:48,362 DEBUG sqlalchemy.engine.base.Engine Thread-553 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:09:48,375 INFO sqlalchemy.engine.base.Engine Thread-553 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:09:48,375 INFO sqlalchemy.engine.base.Engine Thread-553 : ('philip', 1, 1)
2020-02-08 00:09:48,376 DEBUG sqlalchemy.engine.base.Engine Thread-553 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:09:48,376 DEBUG sqlalchemy.engine.base.Engine Thread-553 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:09:48,378 INFO sqlalchemy.engine.base.Engine Thread-553 : ROLLBACK
2020-02-08 00:09:48,833 INFO sqlalchemy.engine.base.Engine Thread-562 : BEGIN (implicit)
2020-02-08 00:09:48,834 INFO sqlalchemy.engine.base.Engine Thread-562 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:09:48,834 INFO sqlalchemy.engine.base.Engine Thread-562 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:09:48,835 DEBUG sqlalchemy.engine.base.Engine Thread-562 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:48,836 DEBUG sqlalchemy.engine.base.Engine Thread-562 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:09:48,839 INFO sqlalchemy.engine.base.Engine Thread-562 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:09:48,839 INFO sqlalchemy.engine.base.Engine Thread-562 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:09:48,840 DEBUG sqlalchemy.engine.base.Engine Thread-562 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:48,840 DEBUG sqlalchemy.engine.base.Engine Thread-562 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:09:48,844 INFO sqlalchemy.engine.base.Engine Thread-562 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:09:48,844 INFO sqlalchemy.engine.base.Engine Thread-562 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:09:48,845 DEBUG sqlalchemy.engine.base.Engine Thread-562 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:48,845 DEBUG sqlalchemy.engine.base.Engine Thread-562 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:09:48,845 DEBUG sqlalchemy.engine.base.Engine Thread-562 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:09:48,849 INFO sqlalchemy.engine.base.Engine Thread-562 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:09:48,849 INFO sqlalchemy.engine.base.Engine Thread-562 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:09:48,850 DEBUG sqlalchemy.engine.base.Engine Thread-562 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:48,850 DEBUG sqlalchemy.engine.base.Engine Thread-562 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:09:48,851 INFO sqlalchemy.engine.base.Engine Thread-562 : ROLLBACK
2020-02-08 00:09:48,872 INFO sqlalchemy.engine.base.Engine Thread-563 : BEGIN (implicit)
2020-02-08 00:09:48,874 INFO sqlalchemy.engine.base.Engine Thread-563 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:09:48,874 INFO sqlalchemy.engine.base.Engine Thread-563 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:09:48,875 DEBUG sqlalchemy.engine.base.Engine Thread-563 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:48,875 DEBUG sqlalchemy.engine.base.Engine Thread-563 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:09:48,879 INFO sqlalchemy.engine.base.Engine Thread-563 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:09:48,879 INFO sqlalchemy.engine.base.Engine Thread-563 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:09:48,879 DEBUG sqlalchemy.engine.base.Engine Thread-563 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:48,880 DEBUG sqlalchemy.engine.base.Engine Thread-563 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:09:48,883 INFO sqlalchemy.engine.base.Engine Thread-563 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:09:48,883 INFO sqlalchemy.engine.base.Engine Thread-563 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:09:48,884 DEBUG sqlalchemy.engine.base.Engine Thread-563 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:48,884 DEBUG sqlalchemy.engine.base.Engine Thread-563 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:09:48,884 DEBUG sqlalchemy.engine.base.Engine Thread-563 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:09:48,887 INFO sqlalchemy.engine.base.Engine Thread-563 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:09:48,887 INFO sqlalchemy.engine.base.Engine Thread-563 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:09:48,888 DEBUG sqlalchemy.engine.base.Engine Thread-563 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:09:48,888 DEBUG sqlalchemy.engine.base.Engine Thread-563 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:09:48,889 INFO sqlalchemy.engine.base.Engine Thread-563 : ROLLBACK
2020-02-08 00:11:38,246 INFO sqlalchemy.engine.base.Engine Thread-565 : BEGIN (implicit)
2020-02-08 00:11:38,249 INFO sqlalchemy.engine.base.Engine Thread-565 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:11:38,249 INFO sqlalchemy.engine.base.Engine Thread-565 : ()
2020-02-08 00:11:38,251 DEBUG sqlalchemy.engine.base.Engine Thread-565 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:11:38,251 DEBUG sqlalchemy.engine.base.Engine Thread-565 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:11:38,251 DEBUG sqlalchemy.engine.base.Engine Thread-565 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:11:38,253 INFO sqlalchemy.engine.base.Engine Thread-565 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:11:38,253 INFO sqlalchemy.engine.base.Engine Thread-565 : (1, 1)
2020-02-08 00:11:38,254 DEBUG sqlalchemy.engine.base.Engine Thread-565 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:11:38,254 DEBUG sqlalchemy.engine.base.Engine Thread-565 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:11:38,267 INFO sqlalchemy.engine.base.Engine Thread-565 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:11:38,268 INFO sqlalchemy.engine.base.Engine Thread-565 : ('philip', 1, 1)
2020-02-08 00:11:38,269 DEBUG sqlalchemy.engine.base.Engine Thread-565 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:11:38,269 DEBUG sqlalchemy.engine.base.Engine Thread-565 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:11:38,271 INFO sqlalchemy.engine.base.Engine Thread-565 : ROLLBACK
2020-02-08 00:11:38,887 INFO sqlalchemy.engine.base.Engine Thread-574 : BEGIN (implicit)
2020-02-08 00:11:38,889 INFO sqlalchemy.engine.base.Engine Thread-574 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:11:38,889 INFO sqlalchemy.engine.base.Engine Thread-574 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:11:38,890 DEBUG sqlalchemy.engine.base.Engine Thread-574 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:11:38,890 DEBUG sqlalchemy.engine.base.Engine Thread-574 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:11:38,896 INFO sqlalchemy.engine.base.Engine Thread-574 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:11:38,897 INFO sqlalchemy.engine.base.Engine Thread-574 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:11:38,897 DEBUG sqlalchemy.engine.base.Engine Thread-574 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:11:38,898 DEBUG sqlalchemy.engine.base.Engine Thread-574 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:11:38,901 INFO sqlalchemy.engine.base.Engine Thread-574 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:11:38,901 INFO sqlalchemy.engine.base.Engine Thread-574 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:11:38,902 DEBUG sqlalchemy.engine.base.Engine Thread-574 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:11:38,902 DEBUG sqlalchemy.engine.base.Engine Thread-574 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:11:38,902 DEBUG sqlalchemy.engine.base.Engine Thread-574 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:11:38,906 INFO sqlalchemy.engine.base.Engine Thread-574 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:11:38,906 INFO sqlalchemy.engine.base.Engine Thread-574 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:11:38,906 DEBUG sqlalchemy.engine.base.Engine Thread-574 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:11:38,906 DEBUG sqlalchemy.engine.base.Engine Thread-574 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:11:38,907 INFO sqlalchemy.engine.base.Engine Thread-574 : ROLLBACK
2020-02-08 00:11:38,927 INFO sqlalchemy.engine.base.Engine Thread-575 : BEGIN (implicit)
2020-02-08 00:11:38,929 INFO sqlalchemy.engine.base.Engine Thread-575 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:11:38,929 INFO sqlalchemy.engine.base.Engine Thread-575 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:11:38,930 DEBUG sqlalchemy.engine.base.Engine Thread-575 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:11:38,930 DEBUG sqlalchemy.engine.base.Engine Thread-575 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:11:38,933 INFO sqlalchemy.engine.base.Engine Thread-575 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:11:38,933 INFO sqlalchemy.engine.base.Engine Thread-575 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:11:38,934 DEBUG sqlalchemy.engine.base.Engine Thread-575 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:11:38,934 DEBUG sqlalchemy.engine.base.Engine Thread-575 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:11:38,938 INFO sqlalchemy.engine.base.Engine Thread-575 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:11:38,938 INFO sqlalchemy.engine.base.Engine Thread-575 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:11:38,939 DEBUG sqlalchemy.engine.base.Engine Thread-575 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:11:38,939 DEBUG sqlalchemy.engine.base.Engine Thread-575 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:11:38,939 DEBUG sqlalchemy.engine.base.Engine Thread-575 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:11:38,942 INFO sqlalchemy.engine.base.Engine Thread-575 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:11:38,942 INFO sqlalchemy.engine.base.Engine Thread-575 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:11:38,943 DEBUG sqlalchemy.engine.base.Engine Thread-575 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:11:38,943 DEBUG sqlalchemy.engine.base.Engine Thread-575 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:11:38,944 INFO sqlalchemy.engine.base.Engine Thread-575 : ROLLBACK
2020-02-08 00:22:10,774 INFO sqlalchemy.engine.base.Engine Thread-577 : BEGIN (implicit)
2020-02-08 00:22:10,777 INFO sqlalchemy.engine.base.Engine Thread-577 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:22:10,777 INFO sqlalchemy.engine.base.Engine Thread-577 : ()
2020-02-08 00:22:10,780 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:22:10,780 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:22:10,780 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:22:10,783 INFO sqlalchemy.engine.base.Engine Thread-577 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:22:10,783 INFO sqlalchemy.engine.base.Engine Thread-577 : (1, 1)
2020-02-08 00:22:10,783 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:22:10,784 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:22:10,796 INFO sqlalchemy.engine.base.Engine Thread-577 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:22:10,797 INFO sqlalchemy.engine.base.Engine Thread-577 : ('philip', 1, 1)
2020-02-08 00:22:10,797 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:22:10,798 DEBUG sqlalchemy.engine.base.Engine Thread-577 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:22:10,799 INFO sqlalchemy.engine.base.Engine Thread-577 : ROLLBACK
2020-02-08 00:22:11,538 INFO sqlalchemy.engine.base.Engine Thread-586 : BEGIN (implicit)
2020-02-08 00:22:11,540 INFO sqlalchemy.engine.base.Engine Thread-586 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:22:11,540 INFO sqlalchemy.engine.base.Engine Thread-586 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:22:11,541 DEBUG sqlalchemy.engine.base.Engine Thread-586 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:22:11,541 DEBUG sqlalchemy.engine.base.Engine Thread-586 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:22:11,544 INFO sqlalchemy.engine.base.Engine Thread-586 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:22:11,545 INFO sqlalchemy.engine.base.Engine Thread-586 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:22:11,545 DEBUG sqlalchemy.engine.base.Engine Thread-586 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:22:11,546 DEBUG sqlalchemy.engine.base.Engine Thread-586 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:22:11,549 INFO sqlalchemy.engine.base.Engine Thread-586 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:22:11,549 INFO sqlalchemy.engine.base.Engine Thread-586 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:22:11,549 DEBUG sqlalchemy.engine.base.Engine Thread-586 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:22:11,550 DEBUG sqlalchemy.engine.base.Engine Thread-586 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:22:11,550 DEBUG sqlalchemy.engine.base.Engine Thread-586 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:22:11,553 INFO sqlalchemy.engine.base.Engine Thread-586 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:22:11,553 INFO sqlalchemy.engine.base.Engine Thread-586 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:22:11,554 DEBUG sqlalchemy.engine.base.Engine Thread-586 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:22:11,554 DEBUG sqlalchemy.engine.base.Engine Thread-586 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:22:11,555 INFO sqlalchemy.engine.base.Engine Thread-586 : ROLLBACK
2020-02-08 00:22:11,580 INFO sqlalchemy.engine.base.Engine Thread-587 : BEGIN (implicit)
2020-02-08 00:22:11,582 INFO sqlalchemy.engine.base.Engine Thread-587 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:22:11,582 INFO sqlalchemy.engine.base.Engine Thread-587 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:22:11,583 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:22:11,583 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:22:11,586 INFO sqlalchemy.engine.base.Engine Thread-587 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:22:11,586 INFO sqlalchemy.engine.base.Engine Thread-587 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:22:11,587 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:22:11,587 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:22:11,590 INFO sqlalchemy.engine.base.Engine Thread-587 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:22:11,590 INFO sqlalchemy.engine.base.Engine Thread-587 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:22:11,591 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:22:11,591 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:22:11,591 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:22:11,594 INFO sqlalchemy.engine.base.Engine Thread-587 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:22:11,594 INFO sqlalchemy.engine.base.Engine Thread-587 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:22:11,595 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:22:11,595 DEBUG sqlalchemy.engine.base.Engine Thread-587 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:22:11,596 INFO sqlalchemy.engine.base.Engine Thread-587 : ROLLBACK
2020-02-08 00:27:00,576 INFO sqlalchemy.engine.base.Engine Thread-589 : BEGIN (implicit)
2020-02-08 00:27:00,580 INFO sqlalchemy.engine.base.Engine Thread-589 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:27:00,580 INFO sqlalchemy.engine.base.Engine Thread-589 : ()
2020-02-08 00:27:00,583 DEBUG sqlalchemy.engine.base.Engine Thread-589 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:27:00,583 DEBUG sqlalchemy.engine.base.Engine Thread-589 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:27:00,584 DEBUG sqlalchemy.engine.base.Engine Thread-589 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:27:00,586 INFO sqlalchemy.engine.base.Engine Thread-589 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:27:00,586 INFO sqlalchemy.engine.base.Engine Thread-589 : (1, 1)
2020-02-08 00:27:00,587 DEBUG sqlalchemy.engine.base.Engine Thread-589 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:27:00,587 DEBUG sqlalchemy.engine.base.Engine Thread-589 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:27:00,600 INFO sqlalchemy.engine.base.Engine Thread-589 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:27:00,600 INFO sqlalchemy.engine.base.Engine Thread-589 : ('philip', 1, 1)
2020-02-08 00:27:00,601 DEBUG sqlalchemy.engine.base.Engine Thread-589 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:27:00,601 DEBUG sqlalchemy.engine.base.Engine Thread-589 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:27:00,603 INFO sqlalchemy.engine.base.Engine Thread-589 : ROLLBACK
2020-02-08 00:27:01,182 INFO sqlalchemy.engine.base.Engine Thread-598 : BEGIN (implicit)
2020-02-08 00:27:01,184 INFO sqlalchemy.engine.base.Engine Thread-598 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:27:01,184 INFO sqlalchemy.engine.base.Engine Thread-598 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:27:01,186 DEBUG sqlalchemy.engine.base.Engine Thread-598 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:27:01,186 DEBUG sqlalchemy.engine.base.Engine Thread-598 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:27:01,189 INFO sqlalchemy.engine.base.Engine Thread-598 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:27:01,189 INFO sqlalchemy.engine.base.Engine Thread-598 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:27:01,190 DEBUG sqlalchemy.engine.base.Engine Thread-598 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:27:01,190 DEBUG sqlalchemy.engine.base.Engine Thread-598 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:27:01,193 INFO sqlalchemy.engine.base.Engine Thread-598 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:27:01,193 INFO sqlalchemy.engine.base.Engine Thread-598 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:27:01,194 DEBUG sqlalchemy.engine.base.Engine Thread-598 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:27:01,194 DEBUG sqlalchemy.engine.base.Engine Thread-598 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:27:01,194 DEBUG sqlalchemy.engine.base.Engine Thread-598 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:27:01,197 INFO sqlalchemy.engine.base.Engine Thread-598 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:27:01,197 INFO sqlalchemy.engine.base.Engine Thread-598 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:27:01,198 DEBUG sqlalchemy.engine.base.Engine Thread-598 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:27:01,198 DEBUG sqlalchemy.engine.base.Engine Thread-598 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:27:01,199 INFO sqlalchemy.engine.base.Engine Thread-598 : ROLLBACK
2020-02-08 00:27:01,218 INFO sqlalchemy.engine.base.Engine Thread-599 : BEGIN (implicit)
2020-02-08 00:27:01,220 INFO sqlalchemy.engine.base.Engine Thread-599 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:27:01,220 INFO sqlalchemy.engine.base.Engine Thread-599 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:27:01,221 DEBUG sqlalchemy.engine.base.Engine Thread-599 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:27:01,221 DEBUG sqlalchemy.engine.base.Engine Thread-599 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:27:01,224 INFO sqlalchemy.engine.base.Engine Thread-599 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:27:01,224 INFO sqlalchemy.engine.base.Engine Thread-599 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:27:01,225 DEBUG sqlalchemy.engine.base.Engine Thread-599 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:27:01,225 DEBUG sqlalchemy.engine.base.Engine Thread-599 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:27:01,228 INFO sqlalchemy.engine.base.Engine Thread-599 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:27:01,228 INFO sqlalchemy.engine.base.Engine Thread-599 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:27:01,229 DEBUG sqlalchemy.engine.base.Engine Thread-599 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:27:01,229 DEBUG sqlalchemy.engine.base.Engine Thread-599 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:27:01,229 DEBUG sqlalchemy.engine.base.Engine Thread-599 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:27:01,232 INFO sqlalchemy.engine.base.Engine Thread-599 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:27:01,232 INFO sqlalchemy.engine.base.Engine Thread-599 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:27:01,233 DEBUG sqlalchemy.engine.base.Engine Thread-599 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:27:01,233 DEBUG sqlalchemy.engine.base.Engine Thread-599 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:27:01,234 INFO sqlalchemy.engine.base.Engine Thread-599 : ROLLBACK
2020-02-08 00:28:42,871 INFO sqlalchemy.engine.base.Engine Thread-601 : BEGIN (implicit)
2020-02-08 00:28:42,877 INFO sqlalchemy.engine.base.Engine Thread-601 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:28:42,877 INFO sqlalchemy.engine.base.Engine Thread-601 : ()
2020-02-08 00:28:42,879 DEBUG sqlalchemy.engine.base.Engine Thread-601 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:28:42,879 DEBUG sqlalchemy.engine.base.Engine Thread-601 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:28:42,879 DEBUG sqlalchemy.engine.base.Engine Thread-601 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:28:42,882 INFO sqlalchemy.engine.base.Engine Thread-601 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:28:42,882 INFO sqlalchemy.engine.base.Engine Thread-601 : (1, 1)
2020-02-08 00:28:42,882 DEBUG sqlalchemy.engine.base.Engine Thread-601 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:28:42,883 DEBUG sqlalchemy.engine.base.Engine Thread-601 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:28:42,896 INFO sqlalchemy.engine.base.Engine Thread-601 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:28:42,896 INFO sqlalchemy.engine.base.Engine Thread-601 : ('philip', 1, 1)
2020-02-08 00:28:42,897 DEBUG sqlalchemy.engine.base.Engine Thread-601 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:28:42,897 DEBUG sqlalchemy.engine.base.Engine Thread-601 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:28:42,899 INFO sqlalchemy.engine.base.Engine Thread-601 : ROLLBACK
2020-02-08 00:28:43,504 INFO sqlalchemy.engine.base.Engine Thread-610 : BEGIN (implicit)
2020-02-08 00:28:43,506 INFO sqlalchemy.engine.base.Engine Thread-610 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:28:43,506 INFO sqlalchemy.engine.base.Engine Thread-610 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:28:43,507 DEBUG sqlalchemy.engine.base.Engine Thread-610 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:28:43,507 DEBUG sqlalchemy.engine.base.Engine Thread-610 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:28:43,511 INFO sqlalchemy.engine.base.Engine Thread-610 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:28:43,511 INFO sqlalchemy.engine.base.Engine Thread-610 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:28:43,512 DEBUG sqlalchemy.engine.base.Engine Thread-610 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:28:43,512 DEBUG sqlalchemy.engine.base.Engine Thread-610 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:28:43,515 INFO sqlalchemy.engine.base.Engine Thread-610 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:28:43,515 INFO sqlalchemy.engine.base.Engine Thread-610 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:28:43,516 DEBUG sqlalchemy.engine.base.Engine Thread-610 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:28:43,516 DEBUG sqlalchemy.engine.base.Engine Thread-610 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:28:43,516 DEBUG sqlalchemy.engine.base.Engine Thread-610 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:28:43,520 INFO sqlalchemy.engine.base.Engine Thread-610 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:28:43,520 INFO sqlalchemy.engine.base.Engine Thread-610 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:28:43,521 DEBUG sqlalchemy.engine.base.Engine Thread-610 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:28:43,521 DEBUG sqlalchemy.engine.base.Engine Thread-610 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:28:43,522 INFO sqlalchemy.engine.base.Engine Thread-610 : ROLLBACK
2020-02-08 00:28:43,543 INFO sqlalchemy.engine.base.Engine Thread-611 : BEGIN (implicit)
2020-02-08 00:28:43,545 INFO sqlalchemy.engine.base.Engine Thread-611 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:28:43,545 INFO sqlalchemy.engine.base.Engine Thread-611 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:28:43,546 DEBUG sqlalchemy.engine.base.Engine Thread-611 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:28:43,546 DEBUG sqlalchemy.engine.base.Engine Thread-611 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:28:43,549 INFO sqlalchemy.engine.base.Engine Thread-611 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:28:43,549 INFO sqlalchemy.engine.base.Engine Thread-611 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:28:43,550 DEBUG sqlalchemy.engine.base.Engine Thread-611 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:28:43,551 DEBUG sqlalchemy.engine.base.Engine Thread-611 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:28:43,554 INFO sqlalchemy.engine.base.Engine Thread-611 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:28:43,554 INFO sqlalchemy.engine.base.Engine Thread-611 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:28:43,555 DEBUG sqlalchemy.engine.base.Engine Thread-611 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:28:43,555 DEBUG sqlalchemy.engine.base.Engine Thread-611 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:28:43,555 DEBUG sqlalchemy.engine.base.Engine Thread-611 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:28:43,559 INFO sqlalchemy.engine.base.Engine Thread-611 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:28:43,559 INFO sqlalchemy.engine.base.Engine Thread-611 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:28:43,560 DEBUG sqlalchemy.engine.base.Engine Thread-611 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:28:43,560 DEBUG sqlalchemy.engine.base.Engine Thread-611 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:28:43,561 INFO sqlalchemy.engine.base.Engine Thread-611 : ROLLBACK
2020-02-08 00:29:00,263 INFO sqlalchemy.engine.base.Engine Thread-613 : BEGIN (implicit)
2020-02-08 00:29:00,265 INFO sqlalchemy.engine.base.Engine Thread-613 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:29:00,265 INFO sqlalchemy.engine.base.Engine Thread-613 : ()
2020-02-08 00:29:00,266 DEBUG sqlalchemy.engine.base.Engine Thread-613 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:29:00,266 DEBUG sqlalchemy.engine.base.Engine Thread-613 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:29:00,267 DEBUG sqlalchemy.engine.base.Engine Thread-613 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:29:00,269 INFO sqlalchemy.engine.base.Engine Thread-613 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:29:00,269 INFO sqlalchemy.engine.base.Engine Thread-613 : (1, 1)
2020-02-08 00:29:00,270 DEBUG sqlalchemy.engine.base.Engine Thread-613 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:29:00,270 DEBUG sqlalchemy.engine.base.Engine Thread-613 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:29:00,283 INFO sqlalchemy.engine.base.Engine Thread-613 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:29:00,284 INFO sqlalchemy.engine.base.Engine Thread-613 : ('philip', 1, 1)
2020-02-08 00:29:00,284 DEBUG sqlalchemy.engine.base.Engine Thread-613 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:29:00,285 DEBUG sqlalchemy.engine.base.Engine Thread-613 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:29:00,286 INFO sqlalchemy.engine.base.Engine Thread-613 : ROLLBACK
2020-02-08 00:29:00,812 INFO sqlalchemy.engine.base.Engine Thread-622 : BEGIN (implicit)
2020-02-08 00:29:00,813 INFO sqlalchemy.engine.base.Engine Thread-622 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:29:00,813 INFO sqlalchemy.engine.base.Engine Thread-622 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:29:00,814 DEBUG sqlalchemy.engine.base.Engine Thread-622 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:00,815 DEBUG sqlalchemy.engine.base.Engine Thread-622 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:29:00,818 INFO sqlalchemy.engine.base.Engine Thread-622 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:29:00,818 INFO sqlalchemy.engine.base.Engine Thread-622 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:29:00,819 DEBUG sqlalchemy.engine.base.Engine Thread-622 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:00,819 DEBUG sqlalchemy.engine.base.Engine Thread-622 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:29:00,823 INFO sqlalchemy.engine.base.Engine Thread-622 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:29:00,823 INFO sqlalchemy.engine.base.Engine Thread-622 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:29:00,823 DEBUG sqlalchemy.engine.base.Engine Thread-622 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:00,824 DEBUG sqlalchemy.engine.base.Engine Thread-622 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:29:00,824 DEBUG sqlalchemy.engine.base.Engine Thread-622 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:29:00,827 INFO sqlalchemy.engine.base.Engine Thread-622 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:29:00,827 INFO sqlalchemy.engine.base.Engine Thread-622 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:29:00,828 DEBUG sqlalchemy.engine.base.Engine Thread-622 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:00,828 DEBUG sqlalchemy.engine.base.Engine Thread-622 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:29:00,829 INFO sqlalchemy.engine.base.Engine Thread-622 : ROLLBACK
2020-02-08 00:29:00,848 INFO sqlalchemy.engine.base.Engine Thread-623 : BEGIN (implicit)
2020-02-08 00:29:00,850 INFO sqlalchemy.engine.base.Engine Thread-623 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:29:00,850 INFO sqlalchemy.engine.base.Engine Thread-623 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:29:00,850 DEBUG sqlalchemy.engine.base.Engine Thread-623 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:00,851 DEBUG sqlalchemy.engine.base.Engine Thread-623 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:29:00,854 INFO sqlalchemy.engine.base.Engine Thread-623 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:29:00,854 INFO sqlalchemy.engine.base.Engine Thread-623 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:29:00,854 DEBUG sqlalchemy.engine.base.Engine Thread-623 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:00,855 DEBUG sqlalchemy.engine.base.Engine Thread-623 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:29:00,858 INFO sqlalchemy.engine.base.Engine Thread-623 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:29:00,858 INFO sqlalchemy.engine.base.Engine Thread-623 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:29:00,859 DEBUG sqlalchemy.engine.base.Engine Thread-623 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:00,859 DEBUG sqlalchemy.engine.base.Engine Thread-623 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:29:00,859 DEBUG sqlalchemy.engine.base.Engine Thread-623 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:29:00,863 INFO sqlalchemy.engine.base.Engine Thread-623 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:29:00,863 INFO sqlalchemy.engine.base.Engine Thread-623 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:29:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-623 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:00,864 DEBUG sqlalchemy.engine.base.Engine Thread-623 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:29:00,865 INFO sqlalchemy.engine.base.Engine Thread-623 : ROLLBACK
2020-02-08 00:29:23,491 INFO sqlalchemy.engine.base.Engine Thread-625 : BEGIN (implicit)
2020-02-08 00:29:23,493 INFO sqlalchemy.engine.base.Engine Thread-625 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:29:23,493 INFO sqlalchemy.engine.base.Engine Thread-625 : ()
2020-02-08 00:29:23,495 DEBUG sqlalchemy.engine.base.Engine Thread-625 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:29:23,495 DEBUG sqlalchemy.engine.base.Engine Thread-625 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:29:23,495 DEBUG sqlalchemy.engine.base.Engine Thread-625 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:29:23,497 INFO sqlalchemy.engine.base.Engine Thread-625 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:29:23,498 INFO sqlalchemy.engine.base.Engine Thread-625 : (1, 1)
2020-02-08 00:29:23,498 DEBUG sqlalchemy.engine.base.Engine Thread-625 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:29:23,498 DEBUG sqlalchemy.engine.base.Engine Thread-625 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:29:23,511 INFO sqlalchemy.engine.base.Engine Thread-625 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:29:23,512 INFO sqlalchemy.engine.base.Engine Thread-625 : ('philip', 1, 1)
2020-02-08 00:29:23,512 DEBUG sqlalchemy.engine.base.Engine Thread-625 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:29:23,512 DEBUG sqlalchemy.engine.base.Engine Thread-625 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:29:23,514 INFO sqlalchemy.engine.base.Engine Thread-625 : ROLLBACK
2020-02-08 00:29:23,999 INFO sqlalchemy.engine.base.Engine Thread-634 : BEGIN (implicit)
2020-02-08 00:29:24,001 INFO sqlalchemy.engine.base.Engine Thread-634 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:29:24,001 INFO sqlalchemy.engine.base.Engine Thread-634 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:29:24,002 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:24,002 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:29:24,006 INFO sqlalchemy.engine.base.Engine Thread-634 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:29:24,006 INFO sqlalchemy.engine.base.Engine Thread-634 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:29:24,007 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:24,007 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:29:24,010 INFO sqlalchemy.engine.base.Engine Thread-634 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:29:24,010 INFO sqlalchemy.engine.base.Engine Thread-634 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:29:24,011 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:24,011 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:29:24,011 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:29:24,017 INFO sqlalchemy.engine.base.Engine Thread-634 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:29:24,018 INFO sqlalchemy.engine.base.Engine Thread-634 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:29:24,018 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:24,019 DEBUG sqlalchemy.engine.base.Engine Thread-634 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:29:24,019 INFO sqlalchemy.engine.base.Engine Thread-634 : ROLLBACK
2020-02-08 00:29:24,045 INFO sqlalchemy.engine.base.Engine Thread-635 : BEGIN (implicit)
2020-02-08 00:29:24,046 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:29:24,047 INFO sqlalchemy.engine.base.Engine Thread-635 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:29:24,047 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:24,048 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:29:24,051 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:29:24,051 INFO sqlalchemy.engine.base.Engine Thread-635 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:29:24,052 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:24,052 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:29:24,055 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:29:24,056 INFO sqlalchemy.engine.base.Engine Thread-635 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:29:24,056 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:24,056 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:29:24,057 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:29:24,060 INFO sqlalchemy.engine.base.Engine Thread-635 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:29:24,060 INFO sqlalchemy.engine.base.Engine Thread-635 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:29:24,061 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:29:24,061 DEBUG sqlalchemy.engine.base.Engine Thread-635 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:29:24,062 INFO sqlalchemy.engine.base.Engine Thread-635 : ROLLBACK
2020-02-08 00:30:22,043 INFO sqlalchemy.engine.base.Engine Thread-637 : BEGIN (implicit)
2020-02-08 00:30:22,045 INFO sqlalchemy.engine.base.Engine Thread-637 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:30:22,045 INFO sqlalchemy.engine.base.Engine Thread-637 : ()
2020-02-08 00:30:22,046 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:30:22,046 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:30:22,047 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:30:22,049 INFO sqlalchemy.engine.base.Engine Thread-637 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:30:22,049 INFO sqlalchemy.engine.base.Engine Thread-637 : (1, 1)
2020-02-08 00:30:22,049 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:30:22,050 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:30:22,062 INFO sqlalchemy.engine.base.Engine Thread-637 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:30:22,062 INFO sqlalchemy.engine.base.Engine Thread-637 : ('philip', 1, 1)
2020-02-08 00:30:22,062 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:30:22,063 DEBUG sqlalchemy.engine.base.Engine Thread-637 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:30:22,064 INFO sqlalchemy.engine.base.Engine Thread-637 : ROLLBACK
2020-02-08 00:30:22,610 INFO sqlalchemy.engine.base.Engine Thread-646 : BEGIN (implicit)
2020-02-08 00:30:22,611 INFO sqlalchemy.engine.base.Engine Thread-646 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:30:22,611 INFO sqlalchemy.engine.base.Engine Thread-646 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:30:22,613 DEBUG sqlalchemy.engine.base.Engine Thread-646 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:22,613 DEBUG sqlalchemy.engine.base.Engine Thread-646 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:30:22,616 INFO sqlalchemy.engine.base.Engine Thread-646 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:30:22,616 INFO sqlalchemy.engine.base.Engine Thread-646 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:30:22,617 DEBUG sqlalchemy.engine.base.Engine Thread-646 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:22,617 DEBUG sqlalchemy.engine.base.Engine Thread-646 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:30:22,621 INFO sqlalchemy.engine.base.Engine Thread-646 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:30:22,621 INFO sqlalchemy.engine.base.Engine Thread-646 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:30:22,622 DEBUG sqlalchemy.engine.base.Engine Thread-646 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:22,622 DEBUG sqlalchemy.engine.base.Engine Thread-646 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:30:22,622 DEBUG sqlalchemy.engine.base.Engine Thread-646 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:30:22,625 INFO sqlalchemy.engine.base.Engine Thread-646 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:30:22,625 INFO sqlalchemy.engine.base.Engine Thread-646 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:30:22,626 DEBUG sqlalchemy.engine.base.Engine Thread-646 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:22,626 DEBUG sqlalchemy.engine.base.Engine Thread-646 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:30:22,627 INFO sqlalchemy.engine.base.Engine Thread-646 : ROLLBACK
2020-02-08 00:30:22,647 INFO sqlalchemy.engine.base.Engine Thread-647 : BEGIN (implicit)
2020-02-08 00:30:22,648 INFO sqlalchemy.engine.base.Engine Thread-647 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:30:22,648 INFO sqlalchemy.engine.base.Engine Thread-647 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:30:22,649 DEBUG sqlalchemy.engine.base.Engine Thread-647 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:22,649 DEBUG sqlalchemy.engine.base.Engine Thread-647 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:30:22,652 INFO sqlalchemy.engine.base.Engine Thread-647 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:30:22,653 INFO sqlalchemy.engine.base.Engine Thread-647 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:30:22,653 DEBUG sqlalchemy.engine.base.Engine Thread-647 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:22,654 DEBUG sqlalchemy.engine.base.Engine Thread-647 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:30:22,656 INFO sqlalchemy.engine.base.Engine Thread-647 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:30:22,656 INFO sqlalchemy.engine.base.Engine Thread-647 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:30:22,657 DEBUG sqlalchemy.engine.base.Engine Thread-647 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:22,657 DEBUG sqlalchemy.engine.base.Engine Thread-647 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:30:22,658 DEBUG sqlalchemy.engine.base.Engine Thread-647 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:30:22,660 INFO sqlalchemy.engine.base.Engine Thread-647 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:30:22,661 INFO sqlalchemy.engine.base.Engine Thread-647 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:30:22,661 DEBUG sqlalchemy.engine.base.Engine Thread-647 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:22,661 DEBUG sqlalchemy.engine.base.Engine Thread-647 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:30:22,662 INFO sqlalchemy.engine.base.Engine Thread-647 : ROLLBACK
2020-02-08 00:30:42,195 INFO sqlalchemy.engine.base.Engine Thread-649 : BEGIN (implicit)
2020-02-08 00:30:42,198 INFO sqlalchemy.engine.base.Engine Thread-649 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:30:42,198 INFO sqlalchemy.engine.base.Engine Thread-649 : ()
2020-02-08 00:30:42,200 DEBUG sqlalchemy.engine.base.Engine Thread-649 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:30:42,200 DEBUG sqlalchemy.engine.base.Engine Thread-649 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:30:42,200 DEBUG sqlalchemy.engine.base.Engine Thread-649 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:30:42,203 INFO sqlalchemy.engine.base.Engine Thread-649 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:30:42,203 INFO sqlalchemy.engine.base.Engine Thread-649 : (1, 1)
2020-02-08 00:30:42,203 DEBUG sqlalchemy.engine.base.Engine Thread-649 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:30:42,204 DEBUG sqlalchemy.engine.base.Engine Thread-649 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:30:42,217 INFO sqlalchemy.engine.base.Engine Thread-649 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:30:42,217 INFO sqlalchemy.engine.base.Engine Thread-649 : ('philip', 1, 1)
2020-02-08 00:30:42,218 DEBUG sqlalchemy.engine.base.Engine Thread-649 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:30:42,218 DEBUG sqlalchemy.engine.base.Engine Thread-649 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:30:42,220 INFO sqlalchemy.engine.base.Engine Thread-649 : ROLLBACK
2020-02-08 00:30:42,782 INFO sqlalchemy.engine.base.Engine Thread-658 : BEGIN (implicit)
2020-02-08 00:30:42,784 INFO sqlalchemy.engine.base.Engine Thread-658 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:30:42,784 INFO sqlalchemy.engine.base.Engine Thread-658 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:30:42,785 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:42,785 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:30:42,789 INFO sqlalchemy.engine.base.Engine Thread-658 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:30:42,789 INFO sqlalchemy.engine.base.Engine Thread-658 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:30:42,790 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:42,790 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:30:42,794 INFO sqlalchemy.engine.base.Engine Thread-658 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:30:42,794 INFO sqlalchemy.engine.base.Engine Thread-658 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:30:42,794 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:42,795 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:30:42,795 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:30:42,798 INFO sqlalchemy.engine.base.Engine Thread-658 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:30:42,798 INFO sqlalchemy.engine.base.Engine Thread-658 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:30:42,799 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:42,799 DEBUG sqlalchemy.engine.base.Engine Thread-658 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:30:42,800 INFO sqlalchemy.engine.base.Engine Thread-658 : ROLLBACK
2020-02-08 00:30:42,831 INFO sqlalchemy.engine.base.Engine Thread-659 : BEGIN (implicit)
2020-02-08 00:30:42,832 INFO sqlalchemy.engine.base.Engine Thread-659 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:30:42,832 INFO sqlalchemy.engine.base.Engine Thread-659 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:30:42,833 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:42,834 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:30:42,838 INFO sqlalchemy.engine.base.Engine Thread-659 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:30:42,838 INFO sqlalchemy.engine.base.Engine Thread-659 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:30:42,839 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:42,839 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:30:42,842 INFO sqlalchemy.engine.base.Engine Thread-659 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:30:42,842 INFO sqlalchemy.engine.base.Engine Thread-659 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:30:42,843 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:42,843 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:30:42,843 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:30:42,847 INFO sqlalchemy.engine.base.Engine Thread-659 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:30:42,847 INFO sqlalchemy.engine.base.Engine Thread-659 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:30:42,847 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:30:42,848 DEBUG sqlalchemy.engine.base.Engine Thread-659 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:30:42,849 INFO sqlalchemy.engine.base.Engine Thread-659 : ROLLBACK
2020-02-08 00:31:05,852 INFO sqlalchemy.engine.base.Engine Thread-661 : BEGIN (implicit)
2020-02-08 00:31:05,854 INFO sqlalchemy.engine.base.Engine Thread-661 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:31:05,854 INFO sqlalchemy.engine.base.Engine Thread-661 : ()
2020-02-08 00:31:05,855 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:31:05,856 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:31:05,859 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:31:05,861 INFO sqlalchemy.engine.base.Engine Thread-661 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:31:05,861 INFO sqlalchemy.engine.base.Engine Thread-661 : (1, 1)
2020-02-08 00:31:05,862 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:31:05,862 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:31:05,873 INFO sqlalchemy.engine.base.Engine Thread-661 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:31:05,873 INFO sqlalchemy.engine.base.Engine Thread-661 : ('philip', 1, 1)
2020-02-08 00:31:05,874 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:31:05,874 DEBUG sqlalchemy.engine.base.Engine Thread-661 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:31:05,876 INFO sqlalchemy.engine.base.Engine Thread-661 : ROLLBACK
2020-02-08 00:31:06,405 INFO sqlalchemy.engine.base.Engine Thread-670 : BEGIN (implicit)
2020-02-08 00:31:06,407 INFO sqlalchemy.engine.base.Engine Thread-670 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:06,407 INFO sqlalchemy.engine.base.Engine Thread-670 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:31:06,408 DEBUG sqlalchemy.engine.base.Engine Thread-670 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:06,408 DEBUG sqlalchemy.engine.base.Engine Thread-670 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:31:06,411 INFO sqlalchemy.engine.base.Engine Thread-670 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:06,411 INFO sqlalchemy.engine.base.Engine Thread-670 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:31:06,412 DEBUG sqlalchemy.engine.base.Engine Thread-670 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:06,412 DEBUG sqlalchemy.engine.base.Engine Thread-670 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:31:06,415 INFO sqlalchemy.engine.base.Engine Thread-670 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:31:06,415 INFO sqlalchemy.engine.base.Engine Thread-670 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:06,416 DEBUG sqlalchemy.engine.base.Engine Thread-670 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:06,416 DEBUG sqlalchemy.engine.base.Engine Thread-670 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:06,416 DEBUG sqlalchemy.engine.base.Engine Thread-670 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:06,419 INFO sqlalchemy.engine.base.Engine Thread-670 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:31:06,419 INFO sqlalchemy.engine.base.Engine Thread-670 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:06,420 DEBUG sqlalchemy.engine.base.Engine Thread-670 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:06,420 DEBUG sqlalchemy.engine.base.Engine Thread-670 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:31:06,421 INFO sqlalchemy.engine.base.Engine Thread-670 : ROLLBACK
2020-02-08 00:31:06,442 INFO sqlalchemy.engine.base.Engine Thread-671 : BEGIN (implicit)
2020-02-08 00:31:06,443 INFO sqlalchemy.engine.base.Engine Thread-671 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:06,443 INFO sqlalchemy.engine.base.Engine Thread-671 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:31:06,444 DEBUG sqlalchemy.engine.base.Engine Thread-671 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:06,444 DEBUG sqlalchemy.engine.base.Engine Thread-671 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:31:06,447 INFO sqlalchemy.engine.base.Engine Thread-671 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:06,447 INFO sqlalchemy.engine.base.Engine Thread-671 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:31:06,448 DEBUG sqlalchemy.engine.base.Engine Thread-671 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:06,448 DEBUG sqlalchemy.engine.base.Engine Thread-671 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:31:06,451 INFO sqlalchemy.engine.base.Engine Thread-671 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:31:06,451 INFO sqlalchemy.engine.base.Engine Thread-671 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:06,452 DEBUG sqlalchemy.engine.base.Engine Thread-671 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:06,452 DEBUG sqlalchemy.engine.base.Engine Thread-671 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:06,452 DEBUG sqlalchemy.engine.base.Engine Thread-671 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:06,455 INFO sqlalchemy.engine.base.Engine Thread-671 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:31:06,455 INFO sqlalchemy.engine.base.Engine Thread-671 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:06,456 DEBUG sqlalchemy.engine.base.Engine Thread-671 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:06,456 DEBUG sqlalchemy.engine.base.Engine Thread-671 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:31:06,457 INFO sqlalchemy.engine.base.Engine Thread-671 : ROLLBACK
2020-02-08 00:31:19,464 INFO sqlalchemy.engine.base.Engine Thread-673 : BEGIN (implicit)
2020-02-08 00:31:19,466 INFO sqlalchemy.engine.base.Engine Thread-673 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:31:19,466 INFO sqlalchemy.engine.base.Engine Thread-673 : ()
2020-02-08 00:31:19,467 DEBUG sqlalchemy.engine.base.Engine Thread-673 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:31:19,468 DEBUG sqlalchemy.engine.base.Engine Thread-673 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:31:19,468 DEBUG sqlalchemy.engine.base.Engine Thread-673 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:31:19,470 INFO sqlalchemy.engine.base.Engine Thread-673 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:31:19,470 INFO sqlalchemy.engine.base.Engine Thread-673 : (1, 1)
2020-02-08 00:31:19,471 DEBUG sqlalchemy.engine.base.Engine Thread-673 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:31:19,471 DEBUG sqlalchemy.engine.base.Engine Thread-673 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:31:19,486 INFO sqlalchemy.engine.base.Engine Thread-673 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:31:19,486 INFO sqlalchemy.engine.base.Engine Thread-673 : ('philip', 1, 1)
2020-02-08 00:31:19,487 DEBUG sqlalchemy.engine.base.Engine Thread-673 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:31:19,488 DEBUG sqlalchemy.engine.base.Engine Thread-673 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:31:19,489 INFO sqlalchemy.engine.base.Engine Thread-673 : ROLLBACK
2020-02-08 00:31:20,010 INFO sqlalchemy.engine.base.Engine Thread-682 : BEGIN (implicit)
2020-02-08 00:31:20,012 INFO sqlalchemy.engine.base.Engine Thread-682 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:20,013 INFO sqlalchemy.engine.base.Engine Thread-682 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:31:20,014 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:20,014 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:31:20,017 INFO sqlalchemy.engine.base.Engine Thread-682 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:20,017 INFO sqlalchemy.engine.base.Engine Thread-682 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:31:20,018 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:20,018 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:31:20,022 INFO sqlalchemy.engine.base.Engine Thread-682 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:31:20,022 INFO sqlalchemy.engine.base.Engine Thread-682 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:20,023 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:20,024 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:20,024 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:20,028 INFO sqlalchemy.engine.base.Engine Thread-682 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:31:20,028 INFO sqlalchemy.engine.base.Engine Thread-682 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:20,029 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:20,029 DEBUG sqlalchemy.engine.base.Engine Thread-682 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:31:20,030 INFO sqlalchemy.engine.base.Engine Thread-682 : ROLLBACK
2020-02-08 00:31:20,061 INFO sqlalchemy.engine.base.Engine Thread-683 : BEGIN (implicit)
2020-02-08 00:31:20,063 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:20,063 INFO sqlalchemy.engine.base.Engine Thread-683 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:31:20,065 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:20,065 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:31:20,069 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:20,069 INFO sqlalchemy.engine.base.Engine Thread-683 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:31:20,070 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:20,070 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:31:20,074 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:31:20,075 INFO sqlalchemy.engine.base.Engine Thread-683 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:20,075 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:20,076 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:20,076 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:20,080 INFO sqlalchemy.engine.base.Engine Thread-683 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:31:20,080 INFO sqlalchemy.engine.base.Engine Thread-683 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:20,081 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:20,081 DEBUG sqlalchemy.engine.base.Engine Thread-683 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:31:20,082 INFO sqlalchemy.engine.base.Engine Thread-683 : ROLLBACK
2020-02-08 00:31:32,500 INFO sqlalchemy.engine.base.Engine Thread-685 : BEGIN (implicit)
2020-02-08 00:31:32,503 INFO sqlalchemy.engine.base.Engine Thread-685 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:31:32,503 INFO sqlalchemy.engine.base.Engine Thread-685 : ()
2020-02-08 00:31:32,504 DEBUG sqlalchemy.engine.base.Engine Thread-685 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:31:32,504 DEBUG sqlalchemy.engine.base.Engine Thread-685 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:31:32,505 DEBUG sqlalchemy.engine.base.Engine Thread-685 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:31:32,506 INFO sqlalchemy.engine.base.Engine Thread-685 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:31:32,507 INFO sqlalchemy.engine.base.Engine Thread-685 : (1, 1)
2020-02-08 00:31:32,507 DEBUG sqlalchemy.engine.base.Engine Thread-685 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:31:32,508 DEBUG sqlalchemy.engine.base.Engine Thread-685 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:31:32,520 INFO sqlalchemy.engine.base.Engine Thread-685 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:31:32,520 INFO sqlalchemy.engine.base.Engine Thread-685 : ('philip', 1, 1)
2020-02-08 00:31:32,520 DEBUG sqlalchemy.engine.base.Engine Thread-685 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:31:32,521 DEBUG sqlalchemy.engine.base.Engine Thread-685 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:31:32,522 INFO sqlalchemy.engine.base.Engine Thread-685 : ROLLBACK
2020-02-08 00:31:33,056 INFO sqlalchemy.engine.base.Engine Thread-694 : BEGIN (implicit)
2020-02-08 00:31:33,058 INFO sqlalchemy.engine.base.Engine Thread-694 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:33,058 INFO sqlalchemy.engine.base.Engine Thread-694 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:31:33,059 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:33,060 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:31:33,063 INFO sqlalchemy.engine.base.Engine Thread-694 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:33,063 INFO sqlalchemy.engine.base.Engine Thread-694 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:31:33,064 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:33,064 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:31:33,067 INFO sqlalchemy.engine.base.Engine Thread-694 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:31:33,067 INFO sqlalchemy.engine.base.Engine Thread-694 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:33,068 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:33,068 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:33,068 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:33,071 INFO sqlalchemy.engine.base.Engine Thread-694 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:31:33,071 INFO sqlalchemy.engine.base.Engine Thread-694 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:33,072 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:33,072 DEBUG sqlalchemy.engine.base.Engine Thread-694 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:31:33,073 INFO sqlalchemy.engine.base.Engine Thread-694 : ROLLBACK
2020-02-08 00:31:33,095 INFO sqlalchemy.engine.base.Engine Thread-695 : BEGIN (implicit)
2020-02-08 00:31:33,097 INFO sqlalchemy.engine.base.Engine Thread-695 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:33,097 INFO sqlalchemy.engine.base.Engine Thread-695 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:31:33,098 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:33,098 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:31:33,138 INFO sqlalchemy.engine.base.Engine Thread-695 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:33,138 INFO sqlalchemy.engine.base.Engine Thread-695 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:31:33,139 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:33,140 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:31:33,143 INFO sqlalchemy.engine.base.Engine Thread-695 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:31:33,143 INFO sqlalchemy.engine.base.Engine Thread-695 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:33,143 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:33,144 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:33,144 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:33,147 INFO sqlalchemy.engine.base.Engine Thread-695 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:31:33,147 INFO sqlalchemy.engine.base.Engine Thread-695 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:33,147 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:33,148 DEBUG sqlalchemy.engine.base.Engine Thread-695 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:31:33,149 INFO sqlalchemy.engine.base.Engine Thread-695 : ROLLBACK
2020-02-08 00:31:55,036 INFO sqlalchemy.engine.base.Engine Thread-697 : BEGIN (implicit)
2020-02-08 00:31:55,038 INFO sqlalchemy.engine.base.Engine Thread-697 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:31:55,039 INFO sqlalchemy.engine.base.Engine Thread-697 : ()
2020-02-08 00:31:55,040 DEBUG sqlalchemy.engine.base.Engine Thread-697 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:31:55,040 DEBUG sqlalchemy.engine.base.Engine Thread-697 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:31:55,040 DEBUG sqlalchemy.engine.base.Engine Thread-697 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:31:55,042 INFO sqlalchemy.engine.base.Engine Thread-697 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:31:55,043 INFO sqlalchemy.engine.base.Engine Thread-697 : (1, 1)
2020-02-08 00:31:55,043 DEBUG sqlalchemy.engine.base.Engine Thread-697 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:31:55,044 DEBUG sqlalchemy.engine.base.Engine Thread-697 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:31:55,057 INFO sqlalchemy.engine.base.Engine Thread-697 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:31:55,057 INFO sqlalchemy.engine.base.Engine Thread-697 : ('philip', 1, 1)
2020-02-08 00:31:55,058 DEBUG sqlalchemy.engine.base.Engine Thread-697 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:31:55,058 DEBUG sqlalchemy.engine.base.Engine Thread-697 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:31:55,060 INFO sqlalchemy.engine.base.Engine Thread-697 : ROLLBACK
2020-02-08 00:31:55,670 INFO sqlalchemy.engine.base.Engine Thread-706 : BEGIN (implicit)
2020-02-08 00:31:55,672 INFO sqlalchemy.engine.base.Engine Thread-706 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:55,672 INFO sqlalchemy.engine.base.Engine Thread-706 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:31:55,673 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:55,673 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:31:55,677 INFO sqlalchemy.engine.base.Engine Thread-706 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:55,677 INFO sqlalchemy.engine.base.Engine Thread-706 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:31:55,678 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:55,678 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:31:55,682 INFO sqlalchemy.engine.base.Engine Thread-706 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:31:55,682 INFO sqlalchemy.engine.base.Engine Thread-706 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:55,683 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:55,683 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:55,683 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:55,686 INFO sqlalchemy.engine.base.Engine Thread-706 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:31:55,686 INFO sqlalchemy.engine.base.Engine Thread-706 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:55,687 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:55,687 DEBUG sqlalchemy.engine.base.Engine Thread-706 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:31:55,688 INFO sqlalchemy.engine.base.Engine Thread-706 : ROLLBACK
2020-02-08 00:31:55,720 INFO sqlalchemy.engine.base.Engine Thread-707 : BEGIN (implicit)
2020-02-08 00:31:55,722 INFO sqlalchemy.engine.base.Engine Thread-707 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:55,722 INFO sqlalchemy.engine.base.Engine Thread-707 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:31:55,723 DEBUG sqlalchemy.engine.base.Engine Thread-707 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:55,723 DEBUG sqlalchemy.engine.base.Engine Thread-707 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:31:55,727 INFO sqlalchemy.engine.base.Engine Thread-707 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:31:55,727 INFO sqlalchemy.engine.base.Engine Thread-707 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:31:55,728 DEBUG sqlalchemy.engine.base.Engine Thread-707 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:55,728 DEBUG sqlalchemy.engine.base.Engine Thread-707 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:31:55,731 INFO sqlalchemy.engine.base.Engine Thread-707 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:31:55,732 INFO sqlalchemy.engine.base.Engine Thread-707 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:55,732 DEBUG sqlalchemy.engine.base.Engine Thread-707 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:55,733 DEBUG sqlalchemy.engine.base.Engine Thread-707 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:55,733 DEBUG sqlalchemy.engine.base.Engine Thread-707 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:31:55,736 INFO sqlalchemy.engine.base.Engine Thread-707 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:31:55,736 INFO sqlalchemy.engine.base.Engine Thread-707 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:31:55,737 DEBUG sqlalchemy.engine.base.Engine Thread-707 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:31:55,737 DEBUG sqlalchemy.engine.base.Engine Thread-707 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:31:55,738 INFO sqlalchemy.engine.base.Engine Thread-707 : ROLLBACK
2020-02-08 00:33:08,253 INFO sqlalchemy.engine.base.Engine Thread-709 : BEGIN (implicit)
2020-02-08 00:33:08,255 INFO sqlalchemy.engine.base.Engine Thread-709 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:33:08,255 INFO sqlalchemy.engine.base.Engine Thread-709 : ()
2020-02-08 00:33:08,257 DEBUG sqlalchemy.engine.base.Engine Thread-709 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:33:08,257 DEBUG sqlalchemy.engine.base.Engine Thread-709 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:33:08,257 DEBUG sqlalchemy.engine.base.Engine Thread-709 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:33:08,259 INFO sqlalchemy.engine.base.Engine Thread-709 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:08,259 INFO sqlalchemy.engine.base.Engine Thread-709 : (1, 1)
2020-02-08 00:33:08,260 DEBUG sqlalchemy.engine.base.Engine Thread-709 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:08,260 DEBUG sqlalchemy.engine.base.Engine Thread-709 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:08,273 INFO sqlalchemy.engine.base.Engine Thread-709 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:33:08,273 INFO sqlalchemy.engine.base.Engine Thread-709 : ('philip', 1, 1)
2020-02-08 00:33:08,274 DEBUG sqlalchemy.engine.base.Engine Thread-709 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:08,274 DEBUG sqlalchemy.engine.base.Engine Thread-709 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:08,275 INFO sqlalchemy.engine.base.Engine Thread-709 : ROLLBACK
2020-02-08 00:33:08,849 INFO sqlalchemy.engine.base.Engine Thread-718 : BEGIN (implicit)
2020-02-08 00:33:08,850 INFO sqlalchemy.engine.base.Engine Thread-718 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:08,851 INFO sqlalchemy.engine.base.Engine Thread-718 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:33:08,852 DEBUG sqlalchemy.engine.base.Engine Thread-718 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:08,852 DEBUG sqlalchemy.engine.base.Engine Thread-718 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:33:08,855 INFO sqlalchemy.engine.base.Engine Thread-718 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:08,855 INFO sqlalchemy.engine.base.Engine Thread-718 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:33:08,856 DEBUG sqlalchemy.engine.base.Engine Thread-718 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:08,856 DEBUG sqlalchemy.engine.base.Engine Thread-718 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:33:08,859 INFO sqlalchemy.engine.base.Engine Thread-718 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:33:08,859 INFO sqlalchemy.engine.base.Engine Thread-718 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:08,860 DEBUG sqlalchemy.engine.base.Engine Thread-718 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:08,860 DEBUG sqlalchemy.engine.base.Engine Thread-718 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:08,860 DEBUG sqlalchemy.engine.base.Engine Thread-718 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:08,863 INFO sqlalchemy.engine.base.Engine Thread-718 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:33:08,863 INFO sqlalchemy.engine.base.Engine Thread-718 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:08,864 DEBUG sqlalchemy.engine.base.Engine Thread-718 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:08,864 DEBUG sqlalchemy.engine.base.Engine Thread-718 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:33:08,865 INFO sqlalchemy.engine.base.Engine Thread-718 : ROLLBACK
2020-02-08 00:33:08,889 INFO sqlalchemy.engine.base.Engine Thread-719 : BEGIN (implicit)
2020-02-08 00:33:08,890 INFO sqlalchemy.engine.base.Engine Thread-719 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:08,890 INFO sqlalchemy.engine.base.Engine Thread-719 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:33:08,891 DEBUG sqlalchemy.engine.base.Engine Thread-719 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:08,891 DEBUG sqlalchemy.engine.base.Engine Thread-719 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:33:08,895 INFO sqlalchemy.engine.base.Engine Thread-719 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:08,895 INFO sqlalchemy.engine.base.Engine Thread-719 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:33:08,895 DEBUG sqlalchemy.engine.base.Engine Thread-719 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:08,896 DEBUG sqlalchemy.engine.base.Engine Thread-719 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:33:08,899 INFO sqlalchemy.engine.base.Engine Thread-719 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:33:08,899 INFO sqlalchemy.engine.base.Engine Thread-719 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:08,899 DEBUG sqlalchemy.engine.base.Engine Thread-719 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:08,900 DEBUG sqlalchemy.engine.base.Engine Thread-719 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:08,900 DEBUG sqlalchemy.engine.base.Engine Thread-719 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:08,903 INFO sqlalchemy.engine.base.Engine Thread-719 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:33:08,903 INFO sqlalchemy.engine.base.Engine Thread-719 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:08,903 DEBUG sqlalchemy.engine.base.Engine Thread-719 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:08,904 DEBUG sqlalchemy.engine.base.Engine Thread-719 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:33:08,904 INFO sqlalchemy.engine.base.Engine Thread-719 : ROLLBACK
2020-02-08 00:33:16,822 INFO sqlalchemy.engine.base.Engine Thread-721 : BEGIN (implicit)
2020-02-08 00:33:16,826 INFO sqlalchemy.engine.base.Engine Thread-721 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:33:16,826 INFO sqlalchemy.engine.base.Engine Thread-721 : ()
2020-02-08 00:33:16,828 DEBUG sqlalchemy.engine.base.Engine Thread-721 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:33:16,828 DEBUG sqlalchemy.engine.base.Engine Thread-721 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:33:16,828 DEBUG sqlalchemy.engine.base.Engine Thread-721 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:33:16,830 INFO sqlalchemy.engine.base.Engine Thread-721 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:16,830 INFO sqlalchemy.engine.base.Engine Thread-721 : (1, 1)
2020-02-08 00:33:16,831 DEBUG sqlalchemy.engine.base.Engine Thread-721 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:16,831 DEBUG sqlalchemy.engine.base.Engine Thread-721 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:16,843 INFO sqlalchemy.engine.base.Engine Thread-721 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:33:16,843 INFO sqlalchemy.engine.base.Engine Thread-721 : ('philip', 1, 1)
2020-02-08 00:33:16,844 DEBUG sqlalchemy.engine.base.Engine Thread-721 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:16,844 DEBUG sqlalchemy.engine.base.Engine Thread-721 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:16,845 INFO sqlalchemy.engine.base.Engine Thread-721 : ROLLBACK
2020-02-08 00:33:17,404 INFO sqlalchemy.engine.base.Engine Thread-730 : BEGIN (implicit)
2020-02-08 00:33:17,406 INFO sqlalchemy.engine.base.Engine Thread-730 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:17,406 INFO sqlalchemy.engine.base.Engine Thread-730 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:33:17,407 DEBUG sqlalchemy.engine.base.Engine Thread-730 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:17,407 DEBUG sqlalchemy.engine.base.Engine Thread-730 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:33:17,410 INFO sqlalchemy.engine.base.Engine Thread-730 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:17,410 INFO sqlalchemy.engine.base.Engine Thread-730 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:33:17,411 DEBUG sqlalchemy.engine.base.Engine Thread-730 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:17,411 DEBUG sqlalchemy.engine.base.Engine Thread-730 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:33:17,414 INFO sqlalchemy.engine.base.Engine Thread-730 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:33:17,415 INFO sqlalchemy.engine.base.Engine Thread-730 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:17,415 DEBUG sqlalchemy.engine.base.Engine Thread-730 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:17,416 DEBUG sqlalchemy.engine.base.Engine Thread-730 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:17,416 DEBUG sqlalchemy.engine.base.Engine Thread-730 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:17,419 INFO sqlalchemy.engine.base.Engine Thread-730 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:33:17,419 INFO sqlalchemy.engine.base.Engine Thread-730 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:17,419 DEBUG sqlalchemy.engine.base.Engine Thread-730 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:17,420 DEBUG sqlalchemy.engine.base.Engine Thread-730 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:33:17,420 INFO sqlalchemy.engine.base.Engine Thread-730 : ROLLBACK
2020-02-08 00:33:17,444 INFO sqlalchemy.engine.base.Engine Thread-731 : BEGIN (implicit)
2020-02-08 00:33:17,446 INFO sqlalchemy.engine.base.Engine Thread-731 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:17,446 INFO sqlalchemy.engine.base.Engine Thread-731 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:33:17,446 DEBUG sqlalchemy.engine.base.Engine Thread-731 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:17,447 DEBUG sqlalchemy.engine.base.Engine Thread-731 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:33:17,450 INFO sqlalchemy.engine.base.Engine Thread-731 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:17,450 INFO sqlalchemy.engine.base.Engine Thread-731 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:33:17,451 DEBUG sqlalchemy.engine.base.Engine Thread-731 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:17,451 DEBUG sqlalchemy.engine.base.Engine Thread-731 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:33:17,454 INFO sqlalchemy.engine.base.Engine Thread-731 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:33:17,454 INFO sqlalchemy.engine.base.Engine Thread-731 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:17,455 DEBUG sqlalchemy.engine.base.Engine Thread-731 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:17,455 DEBUG sqlalchemy.engine.base.Engine Thread-731 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:17,455 DEBUG sqlalchemy.engine.base.Engine Thread-731 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:17,458 INFO sqlalchemy.engine.base.Engine Thread-731 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:33:17,458 INFO sqlalchemy.engine.base.Engine Thread-731 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:17,459 DEBUG sqlalchemy.engine.base.Engine Thread-731 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:17,459 DEBUG sqlalchemy.engine.base.Engine Thread-731 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:33:17,460 INFO sqlalchemy.engine.base.Engine Thread-731 : ROLLBACK
2020-02-08 00:33:23,092 INFO sqlalchemy.engine.base.Engine Thread-733 : BEGIN (implicit)
2020-02-08 00:33:23,093 INFO sqlalchemy.engine.base.Engine Thread-733 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:23,094 INFO sqlalchemy.engine.base.Engine Thread-733 : (1, 1)
2020-02-08 00:33:23,094 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:23,095 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:23,097 INFO sqlalchemy.engine.base.Engine Thread-733 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:33:23,097 INFO sqlalchemy.engine.base.Engine Thread-733 : ('philip', 1, 1)
2020-02-08 00:33:23,098 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:23,098 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:23,115 INFO sqlalchemy.engine.base.Engine Thread-733 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:33:23,115 INFO sqlalchemy.engine.base.Engine Thread-733 : ('philip', 1, 1)
2020-02-08 00:33:23,115 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:23,116 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:23,119 INFO sqlalchemy.engine.base.Engine Thread-733 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled, roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled, parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM users INNER JOIN roles ON roles.id = users.`role` LEFT OUTER JOIN parameters ON parameters.id = users.vendor ORDER BY users.id ASC
2020-02-08 00:33:23,119 INFO sqlalchemy.engine.base.Engine Thread-733 : ()
2020-02-08 00:33:23,120 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled', 'roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled', 'parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:33:23,121 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 00:33:23,121 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 00:33:23,122 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:33:23,122 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Row (4, 'evan', 'Evan', 'Troon', 'Account for Evan Troon', '$2b$12$fRYijfQhLPT1wH9/akayhu/1F9l1IgozFbXG4uMk0p5H2u66/tUVy', 'evan@someone.com', 1, 70, datetime.datetime(2019, 9, 2, 15, 14, 53), None, datetime.datetime(2020, 1, 28, 16, 52, 21), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 00:33:23,122 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Row (6, 'dylan', 'Dylan', 'Troon', 'Dylan Troon TEST12399', '$2b$12$kyttQmBiV7Gxn4NdG1gh1eOwfzfp8LEy5.PUhMLcUyWlVd8F9DSku', 'dylan@somewhere.com', 1, 65, datetime.datetime(2019, 9, 2, 16, 50, 50), None, datetime.datetime(2020, 1, 26, 19, 12, 30), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:33:23,122 DEBUG sqlalchemy.engine.base.Engine Thread-733 : Row (8, 'philip2', 'Philip', 'Troon', 'Test account', '$2b$12$Hpbh0Dfjr9dtIcXAngUGKedF9XdsPlZWtQ0a.iZg0J0zdzAepBKru', 'philiptroon@gmail.com', 6, 65, datetime.datetime(2020, 1, 29, 19, 28, 53), None, datetime.datetime(2020, 2, 4, 12, 44), 'philip', 1, 6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:33:23,124 INFO sqlalchemy.engine.base.Engine Thread-733 : ROLLBACK
2020-02-08 00:33:23,650 INFO sqlalchemy.engine.base.Engine Thread-742 : BEGIN (implicit)
2020-02-08 00:33:23,651 INFO sqlalchemy.engine.base.Engine Thread-742 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:23,652 INFO sqlalchemy.engine.base.Engine Thread-742 : (1, 1)
2020-02-08 00:33:23,652 DEBUG sqlalchemy.engine.base.Engine Thread-742 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:23,653 DEBUG sqlalchemy.engine.base.Engine Thread-742 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:23,654 INFO sqlalchemy.engine.base.Engine Thread-742 : ROLLBACK
2020-02-08 00:33:23,675 INFO sqlalchemy.engine.base.Engine Thread-743 : BEGIN (implicit)
2020-02-08 00:33:23,677 INFO sqlalchemy.engine.base.Engine Thread-743 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:23,677 INFO sqlalchemy.engine.base.Engine Thread-743 : (1, 1)
2020-02-08 00:33:23,677 DEBUG sqlalchemy.engine.base.Engine Thread-743 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:23,678 DEBUG sqlalchemy.engine.base.Engine Thread-743 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:23,678 INFO sqlalchemy.engine.base.Engine Thread-743 : ROLLBACK
2020-02-08 00:33:26,486 INFO sqlalchemy.engine.base.Engine Thread-744 : BEGIN (implicit)
2020-02-08 00:33:26,487 INFO sqlalchemy.engine.base.Engine Thread-744 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:26,487 INFO sqlalchemy.engine.base.Engine Thread-744 : (1, 1)
2020-02-08 00:33:26,488 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:26,488 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:26,490 INFO sqlalchemy.engine.base.Engine Thread-744 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:33:26,490 INFO sqlalchemy.engine.base.Engine Thread-744 : ('philip', 1, 1)
2020-02-08 00:33:26,491 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:26,492 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:26,496 INFO sqlalchemy.engine.base.Engine Thread-744 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:33:26,496 INFO sqlalchemy.engine.base.Engine Thread-744 : ('philip', 1, 1)
2020-02-08 00:33:26,497 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:26,497 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:26,500 INFO sqlalchemy.engine.base.Engine Thread-744 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled, roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled, parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM users INNER JOIN roles ON roles.id = users.`role` LEFT OUTER JOIN parameters ON parameters.id = users.vendor ORDER BY users.id ASC
2020-02-08 00:33:26,500 INFO sqlalchemy.engine.base.Engine Thread-744 : ()
2020-02-08 00:33:26,501 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled', 'roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled', 'parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:33:26,501 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 00:33:26,502 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 00:33:26,502 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:33:26,502 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Row (4, 'evan', 'Evan', 'Troon', 'Account for Evan Troon', '$2b$12$fRYijfQhLPT1wH9/akayhu/1F9l1IgozFbXG4uMk0p5H2u66/tUVy', 'evan@someone.com', 1, 70, datetime.datetime(2019, 9, 2, 15, 14, 53), None, datetime.datetime(2020, 1, 28, 16, 52, 21), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 00:33:26,502 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Row (6, 'dylan', 'Dylan', 'Troon', 'Dylan Troon TEST12399', '$2b$12$kyttQmBiV7Gxn4NdG1gh1eOwfzfp8LEy5.PUhMLcUyWlVd8F9DSku', 'dylan@somewhere.com', 1, 65, datetime.datetime(2019, 9, 2, 16, 50, 50), None, datetime.datetime(2020, 1, 26, 19, 12, 30), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:33:26,502 DEBUG sqlalchemy.engine.base.Engine Thread-744 : Row (8, 'philip2', 'Philip', 'Troon', 'Test account', '$2b$12$Hpbh0Dfjr9dtIcXAngUGKedF9XdsPlZWtQ0a.iZg0J0zdzAepBKru', 'philiptroon@gmail.com', 6, 65, datetime.datetime(2020, 1, 29, 19, 28, 53), None, datetime.datetime(2020, 2, 4, 12, 44), 'philip', 1, 6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:33:26,504 INFO sqlalchemy.engine.base.Engine Thread-744 : ROLLBACK
2020-02-08 00:33:27,010 INFO sqlalchemy.engine.base.Engine Thread-753 : BEGIN (implicit)
2020-02-08 00:33:27,011 INFO sqlalchemy.engine.base.Engine Thread-753 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:27,011 INFO sqlalchemy.engine.base.Engine Thread-753 : (1, 1)
2020-02-08 00:33:27,012 DEBUG sqlalchemy.engine.base.Engine Thread-753 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:27,012 DEBUG sqlalchemy.engine.base.Engine Thread-753 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:27,013 INFO sqlalchemy.engine.base.Engine Thread-753 : ROLLBACK
2020-02-08 00:33:27,033 INFO sqlalchemy.engine.base.Engine Thread-754 : BEGIN (implicit)
2020-02-08 00:33:27,034 INFO sqlalchemy.engine.base.Engine Thread-754 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:27,034 INFO sqlalchemy.engine.base.Engine Thread-754 : (1, 1)
2020-02-08 00:33:27,034 DEBUG sqlalchemy.engine.base.Engine Thread-754 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:27,035 DEBUG sqlalchemy.engine.base.Engine Thread-754 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:27,036 INFO sqlalchemy.engine.base.Engine Thread-754 : ROLLBACK
2020-02-08 00:33:29,882 INFO sqlalchemy.engine.base.Engine Thread-755 : BEGIN (implicit)
2020-02-08 00:33:29,883 INFO sqlalchemy.engine.base.Engine Thread-755 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:29,883 INFO sqlalchemy.engine.base.Engine Thread-755 : (1, 1)
2020-02-08 00:33:29,884 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:29,884 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:29,886 INFO sqlalchemy.engine.base.Engine Thread-755 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:33:29,886 INFO sqlalchemy.engine.base.Engine Thread-755 : ('philip', 1, 1)
2020-02-08 00:33:29,887 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:29,887 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:29,889 INFO sqlalchemy.engine.base.Engine Thread-755 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:29,889 INFO sqlalchemy.engine.base.Engine Thread-755 : ('2', 1)
2020-02-08 00:33:29,890 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:29,890 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 00:33:29,892 INFO sqlalchemy.engine.base.Engine Thread-755 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-08 00:33:29,892 INFO sqlalchemy.engine.base.Engine Thread-755 : ()
2020-02-08 00:33:29,893 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 00:33:29,893 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-08 00:33:29,893 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-08 00:33:29,893 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 00:33:29,894 INFO sqlalchemy.engine.base.Engine Thread-755 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:33:29,895 INFO sqlalchemy.engine.base.Engine Thread-755 : (63,)
2020-02-08 00:33:29,895 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:33:29,896 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 00:33:29,896 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 00:33:29,896 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:33:29,930 INFO sqlalchemy.engine.base.Engine Thread-755 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:33:29,930 INFO sqlalchemy.engine.base.Engine Thread-755 : ('philip', 1, 1)
2020-02-08 00:33:29,931 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:29,931 DEBUG sqlalchemy.engine.base.Engine Thread-755 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:29,933 INFO sqlalchemy.engine.base.Engine Thread-755 : ROLLBACK
2020-02-08 00:33:34,735 INFO sqlalchemy.engine.base.Engine Thread-764 : BEGIN (implicit)
2020-02-08 00:33:34,736 INFO sqlalchemy.engine.base.Engine Thread-764 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:34,736 INFO sqlalchemy.engine.base.Engine Thread-764 : (1, 1)
2020-02-08 00:33:34,736 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:34,736 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:34,738 INFO sqlalchemy.engine.base.Engine Thread-764 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 00:33:34,738 INFO sqlalchemy.engine.base.Engine Thread-764 : ('philip',)
2020-02-08 00:33:34,739 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:33:34,741 INFO sqlalchemy.engine.base.Engine Thread-764 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 00:33:34,741 INFO sqlalchemy.engine.base.Engine Thread-764 : ()
2020-02-08 00:33:34,741 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:33:34,742 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 00:33:34,742 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 00:33:34,742 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 00:33:34,742 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 00:33:34,746 INFO sqlalchemy.engine.base.Engine Thread-764 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:33:34,746 INFO sqlalchemy.engine.base.Engine Thread-764 : ('philip', 1, 1)
2020-02-08 00:33:34,747 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:34,747 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:34,750 INFO sqlalchemy.engine.base.Engine Thread-764 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:33:34,751 INFO sqlalchemy.engine.base.Engine Thread-764 : ('philip', 1, 1)
2020-02-08 00:33:34,751 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:34,751 DEBUG sqlalchemy.engine.base.Engine Thread-764 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:34,753 INFO sqlalchemy.engine.base.Engine Thread-764 : ROLLBACK
2020-02-08 00:33:35,245 INFO sqlalchemy.engine.base.Engine Thread-773 : BEGIN (implicit)
2020-02-08 00:33:35,246 INFO sqlalchemy.engine.base.Engine Thread-773 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:35,246 INFO sqlalchemy.engine.base.Engine Thread-773 : (1, 1)
2020-02-08 00:33:35,247 DEBUG sqlalchemy.engine.base.Engine Thread-773 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:35,247 DEBUG sqlalchemy.engine.base.Engine Thread-773 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:35,248 INFO sqlalchemy.engine.base.Engine Thread-773 : ROLLBACK
2020-02-08 00:33:35,274 INFO sqlalchemy.engine.base.Engine Thread-774 : BEGIN (implicit)
2020-02-08 00:33:35,275 INFO sqlalchemy.engine.base.Engine Thread-774 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:35,275 INFO sqlalchemy.engine.base.Engine Thread-774 : (1, 1)
2020-02-08 00:33:35,276 DEBUG sqlalchemy.engine.base.Engine Thread-774 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:35,276 DEBUG sqlalchemy.engine.base.Engine Thread-774 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:35,277 INFO sqlalchemy.engine.base.Engine Thread-774 : ROLLBACK
2020-02-08 00:33:37,169 INFO sqlalchemy.engine.base.Engine Thread-775 : BEGIN (implicit)
2020-02-08 00:33:37,171 INFO sqlalchemy.engine.base.Engine Thread-775 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:33:37,172 INFO sqlalchemy.engine.base.Engine Thread-775 : ()
2020-02-08 00:33:37,173 DEBUG sqlalchemy.engine.base.Engine Thread-775 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:33:37,173 DEBUG sqlalchemy.engine.base.Engine Thread-775 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:33:37,174 DEBUG sqlalchemy.engine.base.Engine Thread-775 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:33:37,175 INFO sqlalchemy.engine.base.Engine Thread-775 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:33:37,176 INFO sqlalchemy.engine.base.Engine Thread-775 : (1, 1)
2020-02-08 00:33:37,176 DEBUG sqlalchemy.engine.base.Engine Thread-775 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:37,176 DEBUG sqlalchemy.engine.base.Engine Thread-775 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:37,180 INFO sqlalchemy.engine.base.Engine Thread-775 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:33:37,180 INFO sqlalchemy.engine.base.Engine Thread-775 : ('philip', 1, 1)
2020-02-08 00:33:37,181 DEBUG sqlalchemy.engine.base.Engine Thread-775 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:33:37,181 DEBUG sqlalchemy.engine.base.Engine Thread-775 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:33:37,183 INFO sqlalchemy.engine.base.Engine Thread-775 : ROLLBACK
2020-02-08 00:33:37,648 INFO sqlalchemy.engine.base.Engine Thread-784 : BEGIN (implicit)
2020-02-08 00:33:37,649 INFO sqlalchemy.engine.base.Engine Thread-784 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:37,649 INFO sqlalchemy.engine.base.Engine Thread-784 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:33:37,650 DEBUG sqlalchemy.engine.base.Engine Thread-784 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:37,651 DEBUG sqlalchemy.engine.base.Engine Thread-784 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:33:37,654 INFO sqlalchemy.engine.base.Engine Thread-784 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:37,654 INFO sqlalchemy.engine.base.Engine Thread-784 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:33:37,655 DEBUG sqlalchemy.engine.base.Engine Thread-784 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:37,655 DEBUG sqlalchemy.engine.base.Engine Thread-784 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:33:37,660 INFO sqlalchemy.engine.base.Engine Thread-784 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:33:37,660 INFO sqlalchemy.engine.base.Engine Thread-784 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:37,661 DEBUG sqlalchemy.engine.base.Engine Thread-784 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:37,661 DEBUG sqlalchemy.engine.base.Engine Thread-784 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:37,661 DEBUG sqlalchemy.engine.base.Engine Thread-784 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:37,664 INFO sqlalchemy.engine.base.Engine Thread-784 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:33:37,664 INFO sqlalchemy.engine.base.Engine Thread-784 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:37,665 DEBUG sqlalchemy.engine.base.Engine Thread-784 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:37,665 DEBUG sqlalchemy.engine.base.Engine Thread-784 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:33:37,666 INFO sqlalchemy.engine.base.Engine Thread-784 : ROLLBACK
2020-02-08 00:33:37,686 INFO sqlalchemy.engine.base.Engine Thread-785 : BEGIN (implicit)
2020-02-08 00:33:37,687 INFO sqlalchemy.engine.base.Engine Thread-785 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:37,687 INFO sqlalchemy.engine.base.Engine Thread-785 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:33:37,688 DEBUG sqlalchemy.engine.base.Engine Thread-785 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:37,688 DEBUG sqlalchemy.engine.base.Engine Thread-785 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:33:37,691 INFO sqlalchemy.engine.base.Engine Thread-785 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:33:37,691 INFO sqlalchemy.engine.base.Engine Thread-785 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:33:37,692 DEBUG sqlalchemy.engine.base.Engine Thread-785 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:37,692 DEBUG sqlalchemy.engine.base.Engine Thread-785 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:33:37,695 INFO sqlalchemy.engine.base.Engine Thread-785 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:33:37,695 INFO sqlalchemy.engine.base.Engine Thread-785 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:37,696 DEBUG sqlalchemy.engine.base.Engine Thread-785 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:37,696 DEBUG sqlalchemy.engine.base.Engine Thread-785 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:37,696 DEBUG sqlalchemy.engine.base.Engine Thread-785 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:33:37,699 INFO sqlalchemy.engine.base.Engine Thread-785 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:33:37,700 INFO sqlalchemy.engine.base.Engine Thread-785 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:33:37,700 DEBUG sqlalchemy.engine.base.Engine Thread-785 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:33:37,700 DEBUG sqlalchemy.engine.base.Engine Thread-785 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:33:37,701 INFO sqlalchemy.engine.base.Engine Thread-785 : ROLLBACK
2020-02-08 00:34:16,222 INFO sqlalchemy.engine.base.Engine Thread-786 : BEGIN (implicit)
2020-02-08 00:34:16,225 INFO sqlalchemy.engine.base.Engine Thread-786 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:34:16,225 INFO sqlalchemy.engine.base.Engine Thread-786 : ()
2020-02-08 00:34:16,226 DEBUG sqlalchemy.engine.base.Engine Thread-786 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:34:16,226 DEBUG sqlalchemy.engine.base.Engine Thread-786 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:34:16,227 DEBUG sqlalchemy.engine.base.Engine Thread-786 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:34:16,229 INFO sqlalchemy.engine.base.Engine Thread-786 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:34:16,229 INFO sqlalchemy.engine.base.Engine Thread-786 : (1, 1)
2020-02-08 00:34:16,230 DEBUG sqlalchemy.engine.base.Engine Thread-786 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:16,230 DEBUG sqlalchemy.engine.base.Engine Thread-786 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:16,243 INFO sqlalchemy.engine.base.Engine Thread-786 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:34:16,244 INFO sqlalchemy.engine.base.Engine Thread-786 : ('philip', 1, 1)
2020-02-08 00:34:16,244 DEBUG sqlalchemy.engine.base.Engine Thread-786 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:16,245 DEBUG sqlalchemy.engine.base.Engine Thread-786 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:16,246 INFO sqlalchemy.engine.base.Engine Thread-786 : ROLLBACK
2020-02-08 00:34:16,859 INFO sqlalchemy.engine.base.Engine Thread-795 : BEGIN (implicit)
2020-02-08 00:34:16,860 INFO sqlalchemy.engine.base.Engine Thread-795 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:16,860 INFO sqlalchemy.engine.base.Engine Thread-795 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:34:16,862 DEBUG sqlalchemy.engine.base.Engine Thread-795 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:16,862 DEBUG sqlalchemy.engine.base.Engine Thread-795 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:34:16,865 INFO sqlalchemy.engine.base.Engine Thread-795 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:16,865 INFO sqlalchemy.engine.base.Engine Thread-795 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:34:16,866 DEBUG sqlalchemy.engine.base.Engine Thread-795 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:16,866 DEBUG sqlalchemy.engine.base.Engine Thread-795 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:34:16,869 INFO sqlalchemy.engine.base.Engine Thread-795 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:34:16,869 INFO sqlalchemy.engine.base.Engine Thread-795 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:16,870 DEBUG sqlalchemy.engine.base.Engine Thread-795 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:16,870 DEBUG sqlalchemy.engine.base.Engine Thread-795 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:16,870 DEBUG sqlalchemy.engine.base.Engine Thread-795 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:16,874 INFO sqlalchemy.engine.base.Engine Thread-795 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:34:16,874 INFO sqlalchemy.engine.base.Engine Thread-795 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:16,875 DEBUG sqlalchemy.engine.base.Engine Thread-795 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:16,875 DEBUG sqlalchemy.engine.base.Engine Thread-795 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:34:16,876 INFO sqlalchemy.engine.base.Engine Thread-795 : ROLLBACK
2020-02-08 00:34:16,899 INFO sqlalchemy.engine.base.Engine Thread-796 : BEGIN (implicit)
2020-02-08 00:34:16,901 INFO sqlalchemy.engine.base.Engine Thread-796 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:16,901 INFO sqlalchemy.engine.base.Engine Thread-796 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:34:16,901 DEBUG sqlalchemy.engine.base.Engine Thread-796 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:16,902 DEBUG sqlalchemy.engine.base.Engine Thread-796 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:34:16,905 INFO sqlalchemy.engine.base.Engine Thread-796 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:16,905 INFO sqlalchemy.engine.base.Engine Thread-796 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:34:16,906 DEBUG sqlalchemy.engine.base.Engine Thread-796 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:16,906 DEBUG sqlalchemy.engine.base.Engine Thread-796 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:34:16,909 INFO sqlalchemy.engine.base.Engine Thread-796 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:34:16,909 INFO sqlalchemy.engine.base.Engine Thread-796 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:16,910 DEBUG sqlalchemy.engine.base.Engine Thread-796 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:16,910 DEBUG sqlalchemy.engine.base.Engine Thread-796 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:16,911 DEBUG sqlalchemy.engine.base.Engine Thread-796 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:16,914 INFO sqlalchemy.engine.base.Engine Thread-796 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:34:16,914 INFO sqlalchemy.engine.base.Engine Thread-796 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:16,914 DEBUG sqlalchemy.engine.base.Engine Thread-796 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:16,915 DEBUG sqlalchemy.engine.base.Engine Thread-796 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:34:16,915 INFO sqlalchemy.engine.base.Engine Thread-796 : ROLLBACK
2020-02-08 00:34:23,196 INFO sqlalchemy.engine.base.Engine Thread-798 : BEGIN (implicit)
2020-02-08 00:34:23,197 INFO sqlalchemy.engine.base.Engine Thread-798 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:34:23,197 INFO sqlalchemy.engine.base.Engine Thread-798 : (1, 1)
2020-02-08 00:34:23,198 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:23,199 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:23,201 INFO sqlalchemy.engine.base.Engine Thread-798 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:34:23,202 INFO sqlalchemy.engine.base.Engine Thread-798 : ('philip', 1, 1)
2020-02-08 00:34:23,202 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:23,202 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:23,207 INFO sqlalchemy.engine.base.Engine Thread-798 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:34:23,207 INFO sqlalchemy.engine.base.Engine Thread-798 : ('philip', 1, 1)
2020-02-08 00:34:23,208 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:23,208 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:23,211 INFO sqlalchemy.engine.base.Engine Thread-798 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled, roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled, parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM users INNER JOIN roles ON roles.id = users.`role` LEFT OUTER JOIN parameters ON parameters.id = users.vendor ORDER BY users.id ASC
2020-02-08 00:34:23,211 INFO sqlalchemy.engine.base.Engine Thread-798 : ()
2020-02-08 00:34:23,212 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled', 'roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled', 'parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:34:23,213 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 00:34:23,213 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 00:34:23,213 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:34:23,213 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Row (4, 'evan', 'Evan', 'Troon', 'Account for Evan Troon', '$2b$12$fRYijfQhLPT1wH9/akayhu/1F9l1IgozFbXG4uMk0p5H2u66/tUVy', 'evan@someone.com', 1, 70, datetime.datetime(2019, 9, 2, 15, 14, 53), None, datetime.datetime(2020, 1, 28, 16, 52, 21), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 00:34:23,213 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Row (6, 'dylan', 'Dylan', 'Troon', 'Dylan Troon TEST12399', '$2b$12$kyttQmBiV7Gxn4NdG1gh1eOwfzfp8LEy5.PUhMLcUyWlVd8F9DSku', 'dylan@somewhere.com', 1, 65, datetime.datetime(2019, 9, 2, 16, 50, 50), None, datetime.datetime(2020, 1, 26, 19, 12, 30), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:34:23,213 DEBUG sqlalchemy.engine.base.Engine Thread-798 : Row (8, 'philip2', 'Philip', 'Troon', 'Test account', '$2b$12$Hpbh0Dfjr9dtIcXAngUGKedF9XdsPlZWtQ0a.iZg0J0zdzAepBKru', 'philiptroon@gmail.com', 6, 65, datetime.datetime(2020, 1, 29, 19, 28, 53), None, datetime.datetime(2020, 2, 4, 12, 44), 'philip', 1, 6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:34:23,216 INFO sqlalchemy.engine.base.Engine Thread-798 : ROLLBACK
2020-02-08 00:34:25,979 INFO sqlalchemy.engine.base.Engine Thread-807 : BEGIN (implicit)
2020-02-08 00:34:25,980 INFO sqlalchemy.engine.base.Engine Thread-807 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:34:25,980 INFO sqlalchemy.engine.base.Engine Thread-807 : (1, 1)
2020-02-08 00:34:25,981 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:25,981 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:25,984 INFO sqlalchemy.engine.base.Engine Thread-807 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:34:25,984 INFO sqlalchemy.engine.base.Engine Thread-807 : ('philip', 1, 1)
2020-02-08 00:34:25,985 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:25,985 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:25,987 INFO sqlalchemy.engine.base.Engine Thread-807 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:34:25,987 INFO sqlalchemy.engine.base.Engine Thread-807 : ('2', 1)
2020-02-08 00:34:25,988 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:25,988 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 00:34:25,991 INFO sqlalchemy.engine.base.Engine Thread-807 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-08 00:34:25,991 INFO sqlalchemy.engine.base.Engine Thread-807 : ()
2020-02-08 00:34:25,991 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 00:34:25,992 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-08 00:34:25,992 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-08 00:34:25,992 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 00:34:25,993 INFO sqlalchemy.engine.base.Engine Thread-807 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:34:25,993 INFO sqlalchemy.engine.base.Engine Thread-807 : (63,)
2020-02-08 00:34:25,994 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:34:25,994 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 00:34:25,994 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 00:34:25,994 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:34:25,999 INFO sqlalchemy.engine.base.Engine Thread-807 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:34:25,999 INFO sqlalchemy.engine.base.Engine Thread-807 : ('philip', 1, 1)
2020-02-08 00:34:26,000 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:26,000 DEBUG sqlalchemy.engine.base.Engine Thread-807 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:26,002 INFO sqlalchemy.engine.base.Engine Thread-807 : ROLLBACK
2020-02-08 00:34:28,876 INFO sqlalchemy.engine.base.Engine Thread-816 : BEGIN (implicit)
2020-02-08 00:34:28,879 INFO sqlalchemy.engine.base.Engine Thread-816 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:34:28,879 INFO sqlalchemy.engine.base.Engine Thread-816 : ()
2020-02-08 00:34:28,880 DEBUG sqlalchemy.engine.base.Engine Thread-816 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:34:28,880 DEBUG sqlalchemy.engine.base.Engine Thread-816 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:34:28,880 DEBUG sqlalchemy.engine.base.Engine Thread-816 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:34:28,883 INFO sqlalchemy.engine.base.Engine Thread-816 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:34:28,883 INFO sqlalchemy.engine.base.Engine Thread-816 : (1, 1)
2020-02-08 00:34:28,884 DEBUG sqlalchemy.engine.base.Engine Thread-816 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:28,884 DEBUG sqlalchemy.engine.base.Engine Thread-816 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:28,888 INFO sqlalchemy.engine.base.Engine Thread-816 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:34:28,888 INFO sqlalchemy.engine.base.Engine Thread-816 : ('philip', 1, 1)
2020-02-08 00:34:28,888 DEBUG sqlalchemy.engine.base.Engine Thread-816 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:28,889 DEBUG sqlalchemy.engine.base.Engine Thread-816 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:28,890 INFO sqlalchemy.engine.base.Engine Thread-816 : ROLLBACK
2020-02-08 00:34:29,342 INFO sqlalchemy.engine.base.Engine Thread-825 : BEGIN (implicit)
2020-02-08 00:34:29,343 INFO sqlalchemy.engine.base.Engine Thread-825 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:29,343 INFO sqlalchemy.engine.base.Engine Thread-825 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:34:29,344 DEBUG sqlalchemy.engine.base.Engine Thread-825 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:29,345 DEBUG sqlalchemy.engine.base.Engine Thread-825 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:34:29,348 INFO sqlalchemy.engine.base.Engine Thread-825 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:29,348 INFO sqlalchemy.engine.base.Engine Thread-825 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:34:29,348 DEBUG sqlalchemy.engine.base.Engine Thread-825 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:29,349 DEBUG sqlalchemy.engine.base.Engine Thread-825 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:34:29,351 INFO sqlalchemy.engine.base.Engine Thread-825 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:34:29,352 INFO sqlalchemy.engine.base.Engine Thread-825 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:29,352 DEBUG sqlalchemy.engine.base.Engine Thread-825 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:29,353 DEBUG sqlalchemy.engine.base.Engine Thread-825 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:29,353 DEBUG sqlalchemy.engine.base.Engine Thread-825 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:29,356 INFO sqlalchemy.engine.base.Engine Thread-825 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:34:29,356 INFO sqlalchemy.engine.base.Engine Thread-825 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:29,357 DEBUG sqlalchemy.engine.base.Engine Thread-825 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:29,357 DEBUG sqlalchemy.engine.base.Engine Thread-825 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:34:29,358 INFO sqlalchemy.engine.base.Engine Thread-825 : ROLLBACK
2020-02-08 00:34:29,384 INFO sqlalchemy.engine.base.Engine Thread-826 : BEGIN (implicit)
2020-02-08 00:34:29,386 INFO sqlalchemy.engine.base.Engine Thread-826 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:29,386 INFO sqlalchemy.engine.base.Engine Thread-826 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:34:29,387 DEBUG sqlalchemy.engine.base.Engine Thread-826 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:29,387 DEBUG sqlalchemy.engine.base.Engine Thread-826 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:34:29,391 INFO sqlalchemy.engine.base.Engine Thread-826 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:29,391 INFO sqlalchemy.engine.base.Engine Thread-826 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:34:29,391 DEBUG sqlalchemy.engine.base.Engine Thread-826 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:29,392 DEBUG sqlalchemy.engine.base.Engine Thread-826 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:34:29,395 INFO sqlalchemy.engine.base.Engine Thread-826 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:34:29,395 INFO sqlalchemy.engine.base.Engine Thread-826 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:29,396 DEBUG sqlalchemy.engine.base.Engine Thread-826 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:29,396 DEBUG sqlalchemy.engine.base.Engine Thread-826 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:29,396 DEBUG sqlalchemy.engine.base.Engine Thread-826 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:29,400 INFO sqlalchemy.engine.base.Engine Thread-826 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:34:29,400 INFO sqlalchemy.engine.base.Engine Thread-826 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:29,401 DEBUG sqlalchemy.engine.base.Engine Thread-826 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:29,401 DEBUG sqlalchemy.engine.base.Engine Thread-826 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:34:29,402 INFO sqlalchemy.engine.base.Engine Thread-826 : ROLLBACK
2020-02-08 00:34:30,397 INFO sqlalchemy.engine.base.Engine Thread-827 : BEGIN (implicit)
2020-02-08 00:34:30,398 INFO sqlalchemy.engine.base.Engine Thread-827 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:34:30,398 INFO sqlalchemy.engine.base.Engine Thread-827 : (1, 1)
2020-02-08 00:34:30,399 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:30,399 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:30,401 INFO sqlalchemy.engine.base.Engine Thread-827 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 00:34:30,401 INFO sqlalchemy.engine.base.Engine Thread-827 : ('philip',)
2020-02-08 00:34:30,402 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:34:30,404 INFO sqlalchemy.engine.base.Engine Thread-827 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 00:34:30,404 INFO sqlalchemy.engine.base.Engine Thread-827 : ()
2020-02-08 00:34:30,404 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:34:30,405 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 00:34:30,405 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 00:34:30,405 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 00:34:30,405 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 00:34:30,409 INFO sqlalchemy.engine.base.Engine Thread-827 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:34:30,409 INFO sqlalchemy.engine.base.Engine Thread-827 : ('philip', 1, 1)
2020-02-08 00:34:30,410 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:30,410 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:30,413 INFO sqlalchemy.engine.base.Engine Thread-827 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:34:30,413 INFO sqlalchemy.engine.base.Engine Thread-827 : ('philip', 1, 1)
2020-02-08 00:34:30,414 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:30,414 DEBUG sqlalchemy.engine.base.Engine Thread-827 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:30,415 INFO sqlalchemy.engine.base.Engine Thread-827 : ROLLBACK
2020-02-08 00:34:32,431 INFO sqlalchemy.engine.base.Engine Thread-836 : BEGIN (implicit)
2020-02-08 00:34:32,434 INFO sqlalchemy.engine.base.Engine Thread-836 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:34:32,434 INFO sqlalchemy.engine.base.Engine Thread-836 : ()
2020-02-08 00:34:32,435 DEBUG sqlalchemy.engine.base.Engine Thread-836 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:34:32,436 DEBUG sqlalchemy.engine.base.Engine Thread-836 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:34:32,436 DEBUG sqlalchemy.engine.base.Engine Thread-836 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:34:32,438 INFO sqlalchemy.engine.base.Engine Thread-836 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:34:32,438 INFO sqlalchemy.engine.base.Engine Thread-836 : (1, 1)
2020-02-08 00:34:32,439 DEBUG sqlalchemy.engine.base.Engine Thread-836 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:32,439 DEBUG sqlalchemy.engine.base.Engine Thread-836 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:32,444 INFO sqlalchemy.engine.base.Engine Thread-836 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:34:32,444 INFO sqlalchemy.engine.base.Engine Thread-836 : ('philip', 1, 1)
2020-02-08 00:34:32,445 DEBUG sqlalchemy.engine.base.Engine Thread-836 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:34:32,445 DEBUG sqlalchemy.engine.base.Engine Thread-836 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:34:32,447 INFO sqlalchemy.engine.base.Engine Thread-836 : ROLLBACK
2020-02-08 00:34:32,886 INFO sqlalchemy.engine.base.Engine Thread-845 : BEGIN (implicit)
2020-02-08 00:34:32,888 INFO sqlalchemy.engine.base.Engine Thread-845 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:32,888 INFO sqlalchemy.engine.base.Engine Thread-845 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:34:32,889 DEBUG sqlalchemy.engine.base.Engine Thread-845 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:32,889 DEBUG sqlalchemy.engine.base.Engine Thread-845 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:34:32,892 INFO sqlalchemy.engine.base.Engine Thread-845 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:32,892 INFO sqlalchemy.engine.base.Engine Thread-845 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:34:32,893 DEBUG sqlalchemy.engine.base.Engine Thread-845 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:32,893 DEBUG sqlalchemy.engine.base.Engine Thread-845 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:34:32,896 INFO sqlalchemy.engine.base.Engine Thread-845 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:34:32,896 INFO sqlalchemy.engine.base.Engine Thread-845 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:32,897 DEBUG sqlalchemy.engine.base.Engine Thread-845 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:32,897 DEBUG sqlalchemy.engine.base.Engine Thread-845 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:32,897 DEBUG sqlalchemy.engine.base.Engine Thread-845 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:32,900 INFO sqlalchemy.engine.base.Engine Thread-845 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:34:32,900 INFO sqlalchemy.engine.base.Engine Thread-845 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:32,901 DEBUG sqlalchemy.engine.base.Engine Thread-845 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:32,901 DEBUG sqlalchemy.engine.base.Engine Thread-845 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:34:32,902 INFO sqlalchemy.engine.base.Engine Thread-845 : ROLLBACK
2020-02-08 00:34:32,923 INFO sqlalchemy.engine.base.Engine Thread-846 : BEGIN (implicit)
2020-02-08 00:34:32,925 INFO sqlalchemy.engine.base.Engine Thread-846 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:32,925 INFO sqlalchemy.engine.base.Engine Thread-846 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:34:32,925 DEBUG sqlalchemy.engine.base.Engine Thread-846 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:32,926 DEBUG sqlalchemy.engine.base.Engine Thread-846 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:34:32,929 INFO sqlalchemy.engine.base.Engine Thread-846 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:34:32,929 INFO sqlalchemy.engine.base.Engine Thread-846 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:34:32,929 DEBUG sqlalchemy.engine.base.Engine Thread-846 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:32,930 DEBUG sqlalchemy.engine.base.Engine Thread-846 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:34:32,933 INFO sqlalchemy.engine.base.Engine Thread-846 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:34:32,933 INFO sqlalchemy.engine.base.Engine Thread-846 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:32,934 DEBUG sqlalchemy.engine.base.Engine Thread-846 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:32,934 DEBUG sqlalchemy.engine.base.Engine Thread-846 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:32,934 DEBUG sqlalchemy.engine.base.Engine Thread-846 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:34:32,937 INFO sqlalchemy.engine.base.Engine Thread-846 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:34:32,937 INFO sqlalchemy.engine.base.Engine Thread-846 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:34:32,938 DEBUG sqlalchemy.engine.base.Engine Thread-846 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:34:32,938 DEBUG sqlalchemy.engine.base.Engine Thread-846 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:34:32,939 INFO sqlalchemy.engine.base.Engine Thread-846 : ROLLBACK
2020-02-08 00:38:00,653 INFO sqlalchemy.engine.base.Engine Thread-847 : BEGIN (implicit)
2020-02-08 00:38:00,656 INFO sqlalchemy.engine.base.Engine Thread-847 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:38:00,656 INFO sqlalchemy.engine.base.Engine Thread-847 : ()
2020-02-08 00:38:00,659 DEBUG sqlalchemy.engine.base.Engine Thread-847 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:38:00,659 DEBUG sqlalchemy.engine.base.Engine Thread-847 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:38:00,659 DEBUG sqlalchemy.engine.base.Engine Thread-847 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:38:00,662 INFO sqlalchemy.engine.base.Engine Thread-847 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:38:00,662 INFO sqlalchemy.engine.base.Engine Thread-847 : (1, 1)
2020-02-08 00:38:00,663 DEBUG sqlalchemy.engine.base.Engine Thread-847 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:38:00,663 DEBUG sqlalchemy.engine.base.Engine Thread-847 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:38:00,668 INFO sqlalchemy.engine.base.Engine Thread-847 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:38:00,668 INFO sqlalchemy.engine.base.Engine Thread-847 : ('philip', 1, 1)
2020-02-08 00:38:00,669 DEBUG sqlalchemy.engine.base.Engine Thread-847 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:38:00,669 DEBUG sqlalchemy.engine.base.Engine Thread-847 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:38:00,671 INFO sqlalchemy.engine.base.Engine Thread-847 : ROLLBACK
2020-02-08 00:38:01,173 INFO sqlalchemy.engine.base.Engine Thread-856 : BEGIN (implicit)
2020-02-08 00:38:01,174 INFO sqlalchemy.engine.base.Engine Thread-856 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:38:01,174 INFO sqlalchemy.engine.base.Engine Thread-856 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:38:01,175 DEBUG sqlalchemy.engine.base.Engine Thread-856 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:01,175 DEBUG sqlalchemy.engine.base.Engine Thread-856 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:38:01,179 INFO sqlalchemy.engine.base.Engine Thread-856 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:38:01,179 INFO sqlalchemy.engine.base.Engine Thread-856 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:38:01,179 DEBUG sqlalchemy.engine.base.Engine Thread-856 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:01,180 DEBUG sqlalchemy.engine.base.Engine Thread-856 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:38:01,182 INFO sqlalchemy.engine.base.Engine Thread-856 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:38:01,183 INFO sqlalchemy.engine.base.Engine Thread-856 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:38:01,183 DEBUG sqlalchemy.engine.base.Engine Thread-856 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:01,183 DEBUG sqlalchemy.engine.base.Engine Thread-856 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:38:01,183 DEBUG sqlalchemy.engine.base.Engine Thread-856 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:38:01,187 INFO sqlalchemy.engine.base.Engine Thread-856 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:38:01,187 INFO sqlalchemy.engine.base.Engine Thread-856 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:38:01,187 DEBUG sqlalchemy.engine.base.Engine Thread-856 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:01,187 DEBUG sqlalchemy.engine.base.Engine Thread-856 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:38:01,188 INFO sqlalchemy.engine.base.Engine Thread-856 : ROLLBACK
2020-02-08 00:38:01,209 INFO sqlalchemy.engine.base.Engine Thread-857 : BEGIN (implicit)
2020-02-08 00:38:01,210 INFO sqlalchemy.engine.base.Engine Thread-857 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:38:01,210 INFO sqlalchemy.engine.base.Engine Thread-857 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:38:01,211 DEBUG sqlalchemy.engine.base.Engine Thread-857 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:01,212 DEBUG sqlalchemy.engine.base.Engine Thread-857 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:38:01,215 INFO sqlalchemy.engine.base.Engine Thread-857 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:38:01,215 INFO sqlalchemy.engine.base.Engine Thread-857 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:38:01,216 DEBUG sqlalchemy.engine.base.Engine Thread-857 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:01,216 DEBUG sqlalchemy.engine.base.Engine Thread-857 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:38:01,220 INFO sqlalchemy.engine.base.Engine Thread-857 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:38:01,220 INFO sqlalchemy.engine.base.Engine Thread-857 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:38:01,220 DEBUG sqlalchemy.engine.base.Engine Thread-857 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:01,221 DEBUG sqlalchemy.engine.base.Engine Thread-857 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:38:01,221 DEBUG sqlalchemy.engine.base.Engine Thread-857 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:38:01,224 INFO sqlalchemy.engine.base.Engine Thread-857 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:38:01,224 INFO sqlalchemy.engine.base.Engine Thread-857 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:38:01,224 DEBUG sqlalchemy.engine.base.Engine Thread-857 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:01,225 DEBUG sqlalchemy.engine.base.Engine Thread-857 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:38:01,225 INFO sqlalchemy.engine.base.Engine Thread-857 : ROLLBACK
2020-02-08 00:38:47,269 INFO sqlalchemy.engine.base.Engine Thread-859 : BEGIN (implicit)
2020-02-08 00:38:47,272 INFO sqlalchemy.engine.base.Engine Thread-859 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:38:47,272 INFO sqlalchemy.engine.base.Engine Thread-859 : ()
2020-02-08 00:38:47,273 DEBUG sqlalchemy.engine.base.Engine Thread-859 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:38:47,274 DEBUG sqlalchemy.engine.base.Engine Thread-859 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:38:47,274 DEBUG sqlalchemy.engine.base.Engine Thread-859 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:38:47,276 INFO sqlalchemy.engine.base.Engine Thread-859 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:38:47,276 INFO sqlalchemy.engine.base.Engine Thread-859 : (1, 1)
2020-02-08 00:38:47,277 DEBUG sqlalchemy.engine.base.Engine Thread-859 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:38:47,277 DEBUG sqlalchemy.engine.base.Engine Thread-859 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:38:47,281 INFO sqlalchemy.engine.base.Engine Thread-859 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:38:47,281 INFO sqlalchemy.engine.base.Engine Thread-859 : ('philip', 1, 1)
2020-02-08 00:38:47,282 DEBUG sqlalchemy.engine.base.Engine Thread-859 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:38:47,282 DEBUG sqlalchemy.engine.base.Engine Thread-859 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:38:47,283 INFO sqlalchemy.engine.base.Engine Thread-859 : ROLLBACK
2020-02-08 00:38:47,821 INFO sqlalchemy.engine.base.Engine Thread-868 : BEGIN (implicit)
2020-02-08 00:38:47,823 INFO sqlalchemy.engine.base.Engine Thread-868 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:38:47,823 INFO sqlalchemy.engine.base.Engine Thread-868 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:38:47,824 DEBUG sqlalchemy.engine.base.Engine Thread-868 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:47,824 DEBUG sqlalchemy.engine.base.Engine Thread-868 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:38:47,827 INFO sqlalchemy.engine.base.Engine Thread-868 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:38:47,827 INFO sqlalchemy.engine.base.Engine Thread-868 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:38:47,828 DEBUG sqlalchemy.engine.base.Engine Thread-868 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:47,828 DEBUG sqlalchemy.engine.base.Engine Thread-868 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:38:47,831 INFO sqlalchemy.engine.base.Engine Thread-868 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:38:47,831 INFO sqlalchemy.engine.base.Engine Thread-868 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:38:47,832 DEBUG sqlalchemy.engine.base.Engine Thread-868 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:47,832 DEBUG sqlalchemy.engine.base.Engine Thread-868 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:38:47,832 DEBUG sqlalchemy.engine.base.Engine Thread-868 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:38:47,835 INFO sqlalchemy.engine.base.Engine Thread-868 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:38:47,835 INFO sqlalchemy.engine.base.Engine Thread-868 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:38:47,836 DEBUG sqlalchemy.engine.base.Engine Thread-868 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:47,836 DEBUG sqlalchemy.engine.base.Engine Thread-868 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:38:47,837 INFO sqlalchemy.engine.base.Engine Thread-868 : ROLLBACK
2020-02-08 00:38:47,858 INFO sqlalchemy.engine.base.Engine Thread-869 : BEGIN (implicit)
2020-02-08 00:38:47,859 INFO sqlalchemy.engine.base.Engine Thread-869 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:38:47,859 INFO sqlalchemy.engine.base.Engine Thread-869 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:38:47,860 DEBUG sqlalchemy.engine.base.Engine Thread-869 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:47,860 DEBUG sqlalchemy.engine.base.Engine Thread-869 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:38:47,863 INFO sqlalchemy.engine.base.Engine Thread-869 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:38:47,863 INFO sqlalchemy.engine.base.Engine Thread-869 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:38:47,864 DEBUG sqlalchemy.engine.base.Engine Thread-869 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:47,864 DEBUG sqlalchemy.engine.base.Engine Thread-869 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:38:47,868 INFO sqlalchemy.engine.base.Engine Thread-869 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:38:47,868 INFO sqlalchemy.engine.base.Engine Thread-869 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:38:47,868 DEBUG sqlalchemy.engine.base.Engine Thread-869 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:47,869 DEBUG sqlalchemy.engine.base.Engine Thread-869 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:38:47,869 DEBUG sqlalchemy.engine.base.Engine Thread-869 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:38:47,872 INFO sqlalchemy.engine.base.Engine Thread-869 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:38:47,872 INFO sqlalchemy.engine.base.Engine Thread-869 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:38:47,872 DEBUG sqlalchemy.engine.base.Engine Thread-869 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:38:47,872 DEBUG sqlalchemy.engine.base.Engine Thread-869 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:38:47,873 INFO sqlalchemy.engine.base.Engine Thread-869 : ROLLBACK
2020-02-08 00:39:20,464 INFO sqlalchemy.engine.base.Engine Thread-871 : BEGIN (implicit)
2020-02-08 00:39:20,466 INFO sqlalchemy.engine.base.Engine Thread-871 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 00:39:20,466 INFO sqlalchemy.engine.base.Engine Thread-871 : ('0', 1)
2020-02-08 00:39:20,467 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:39:20,472 INFO sqlalchemy.engine.base.Engine Thread-871 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:39:20,472 INFO sqlalchemy.engine.base.Engine Thread-871 : ()
2020-02-08 00:39:20,473 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:39:20,473 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:39:20,474 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:39:20,475 INFO sqlalchemy.engine.base.Engine Thread-871 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:39:20,475 INFO sqlalchemy.engine.base.Engine Thread-871 : (97,)
2020-02-08 00:39:20,476 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:39:20,476 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 00:39:20,476 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 00:39:20,480 INFO sqlalchemy.engine.base.Engine Thread-871 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 00:39:20,480 INFO sqlalchemy.engine.base.Engine Thread-871 : (1, 1)
2020-02-08 00:39:20,481 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:39:20,481 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:39:20,486 INFO sqlalchemy.engine.base.Engine Thread-871 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:39:20,486 INFO sqlalchemy.engine.base.Engine Thread-871 : (1, 1)
2020-02-08 00:39:20,486 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:39:20,487 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:39:20,492 INFO sqlalchemy.engine.base.Engine Thread-871 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:39:20,492 INFO sqlalchemy.engine.base.Engine Thread-871 : ('philip', 1, 1)
2020-02-08 00:39:20,493 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:39:20,493 DEBUG sqlalchemy.engine.base.Engine Thread-871 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:39:20,496 INFO sqlalchemy.engine.base.Engine Thread-871 : ROLLBACK
2020-02-08 00:39:41,498 INFO sqlalchemy.engine.base.Engine Thread-880 : BEGIN (implicit)
2020-02-08 00:39:41,499 INFO sqlalchemy.engine.base.Engine Thread-880 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 00:39:41,499 INFO sqlalchemy.engine.base.Engine Thread-880 : ('0', 1)
2020-02-08 00:39:41,500 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:39:41,505 INFO sqlalchemy.engine.base.Engine Thread-880 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:39:41,505 INFO sqlalchemy.engine.base.Engine Thread-880 : ()
2020-02-08 00:39:41,507 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:39:41,507 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:39:41,508 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:39:41,509 INFO sqlalchemy.engine.base.Engine Thread-880 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:39:41,509 INFO sqlalchemy.engine.base.Engine Thread-880 : (97,)
2020-02-08 00:39:41,510 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:39:41,510 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 00:39:41,510 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 00:39:41,514 INFO sqlalchemy.engine.base.Engine Thread-880 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 00:39:41,514 INFO sqlalchemy.engine.base.Engine Thread-880 : (1, 1)
2020-02-08 00:39:41,514 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:39:41,515 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:39:41,518 INFO sqlalchemy.engine.base.Engine Thread-880 : SELECT parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value 
FROM parameters 
WHERE parameters.param_group = %s
2020-02-08 00:39:41,518 INFO sqlalchemy.engine.base.Engine Thread-880 : (109,)
2020-02-08 00:39:41,519 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Col ('parameters_param_name', 'parameters_param_value')
2020-02-08 00:39:41,519 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row ('TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '3')
2020-02-08 00:39:41,519 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row ('DIFFERENT_COMPLEXES_PER_DAY', '8')
2020-02-08 00:39:41,519 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row ('TOTAL_CHANGES_PER_DAY', '16')
2020-02-08 00:39:41,523 INFO sqlalchemy.engine.base.Engine Thread-880 : SELECT count(*) AS count_1 
FROM (SELECT bookings.id AS bookings_id 
FROM bookings 
WHERE bookings.start_dt BETWEEN %s AND %s) AS anon_1
2020-02-08 00:39:41,523 INFO sqlalchemy.engine.base.Engine Thread-880 : (datetime.datetime(2020, 2, 9, 0, 0), datetime.datetime(2020, 2, 9, 23, 59))
2020-02-08 00:39:41,524 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Col ('count_1',)
2020-02-08 00:39:41,524 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row (0,)
2020-02-08 00:39:41,526 INFO sqlalchemy.engine.base.Engine Thread-880 : SELECT count(*) AS count_1 
FROM (SELECT bookings.id AS bookings_id 
FROM bookings 
WHERE bookings.complex = %s AND bookings.start_dt BETWEEN %s AND %s) AS anon_1
2020-02-08 00:39:41,526 INFO sqlalchemy.engine.base.Engine Thread-880 : ('1', datetime.datetime(2020, 2, 9, 0, 0), datetime.datetime(2020, 2, 9, 23, 59))
2020-02-08 00:39:41,526 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Col ('count_1',)
2020-02-08 00:39:41,527 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row (0,)
2020-02-08 00:39:41,529 INFO sqlalchemy.engine.base.Engine Thread-880 : SELECT count(*) AS count_1 
FROM (SELECT count(bookings.complex) AS count_2 
FROM bookings GROUP BY bookings.complex) AS anon_1
2020-02-08 00:39:41,529 INFO sqlalchemy.engine.base.Engine Thread-880 : ()
2020-02-08 00:39:41,529 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Col ('count_1',)
2020-02-08 00:39:41,530 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row (2,)
2020-02-08 00:39:41,532 INFO sqlalchemy.engine.base.Engine Thread-880 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 00:39:41,533 INFO sqlalchemy.engine.base.Engine Thread-880 : (1, 1)
2020-02-08 00:39:41,533 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:39:41,534 DEBUG sqlalchemy.engine.base.Engine Thread-880 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:39:41,536 INFO sqlalchemy.engine.base.Engine Thread-880 : INSERT INTO bookings (id, slot_id, title, start_dt, end_dt, ticket, stakeholder_id, budget, project, description, owner_id, complex, cluster, approval_required, approved_date, approved_by, change_ref, change_subref, logged) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
2020-02-08 00:39:41,536 INFO sqlalchemy.engine.base.Engine Thread-880 : ('0', '0', 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', '1', 98, '1', None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41, 517981))
2020-02-08 00:39:41,537 INFO sqlalchemy.engine.base.Engine Thread-880 : COMMIT
2020-02-08 00:39:41,605 INFO sqlalchemy.engine.base.Engine Thread-881 : BEGIN (implicit)
2020-02-08 00:39:41,606 INFO sqlalchemy.engine.base.Engine Thread-881 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:39:41,607 INFO sqlalchemy.engine.base.Engine Thread-881 : (1, 1)
2020-02-08 00:39:41,607 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:39:41,608 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:39:41,609 INFO sqlalchemy.engine.base.Engine Thread-881 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 00:39:41,610 INFO sqlalchemy.engine.base.Engine Thread-881 : ('philip',)
2020-02-08 00:39:41,610 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:39:41,612 INFO sqlalchemy.engine.base.Engine Thread-881 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 00:39:41,612 INFO sqlalchemy.engine.base.Engine Thread-881 : ()
2020-02-08 00:39:41,613 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:39:41,613 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 00:39:41,613 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 00:39:41,613 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 00:39:41,613 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 00:39:41,613 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 00:39:41,617 INFO sqlalchemy.engine.base.Engine Thread-881 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:39:41,617 INFO sqlalchemy.engine.base.Engine Thread-881 : ('philip', 1, 1)
2020-02-08 00:39:41,618 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:39:41,618 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:39:41,621 INFO sqlalchemy.engine.base.Engine Thread-881 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:39:41,621 INFO sqlalchemy.engine.base.Engine Thread-881 : ('philip', 1, 1)
2020-02-08 00:39:41,622 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:39:41,622 DEBUG sqlalchemy.engine.base.Engine Thread-881 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:39:41,625 INFO sqlalchemy.engine.base.Engine Thread-881 : ROLLBACK
2020-02-08 00:39:42,306 INFO sqlalchemy.engine.base.Engine Thread-890 : BEGIN (implicit)
2020-02-08 00:39:42,308 INFO sqlalchemy.engine.base.Engine Thread-890 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:39:42,308 INFO sqlalchemy.engine.base.Engine Thread-890 : (1, 1)
2020-02-08 00:39:42,309 DEBUG sqlalchemy.engine.base.Engine Thread-890 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:39:42,309 DEBUG sqlalchemy.engine.base.Engine Thread-890 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:39:42,310 INFO sqlalchemy.engine.base.Engine Thread-890 : ROLLBACK
2020-02-08 00:39:42,343 INFO sqlalchemy.engine.base.Engine Thread-891 : BEGIN (implicit)
2020-02-08 00:39:42,344 INFO sqlalchemy.engine.base.Engine Thread-891 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:39:42,344 INFO sqlalchemy.engine.base.Engine Thread-891 : (1, 1)
2020-02-08 00:39:42,345 DEBUG sqlalchemy.engine.base.Engine Thread-891 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:39:42,345 DEBUG sqlalchemy.engine.base.Engine Thread-891 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:39:42,346 INFO sqlalchemy.engine.base.Engine Thread-891 : ROLLBACK
2020-02-08 00:39:47,269 INFO sqlalchemy.engine.base.Engine Thread-892 : BEGIN (implicit)
2020-02-08 00:39:47,271 INFO sqlalchemy.engine.base.Engine Thread-892 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:39:47,271 INFO sqlalchemy.engine.base.Engine Thread-892 : ()
2020-02-08 00:39:47,273 DEBUG sqlalchemy.engine.base.Engine Thread-892 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:39:47,273 DEBUG sqlalchemy.engine.base.Engine Thread-892 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:39:47,273 DEBUG sqlalchemy.engine.base.Engine Thread-892 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:39:47,276 INFO sqlalchemy.engine.base.Engine Thread-892 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:39:47,276 INFO sqlalchemy.engine.base.Engine Thread-892 : (1, 1)
2020-02-08 00:39:47,276 DEBUG sqlalchemy.engine.base.Engine Thread-892 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:39:47,277 DEBUG sqlalchemy.engine.base.Engine Thread-892 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:39:47,281 INFO sqlalchemy.engine.base.Engine Thread-892 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:39:47,281 INFO sqlalchemy.engine.base.Engine Thread-892 : ('philip', 1, 1)
2020-02-08 00:39:47,282 DEBUG sqlalchemy.engine.base.Engine Thread-892 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:39:47,282 DEBUG sqlalchemy.engine.base.Engine Thread-892 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:39:47,283 INFO sqlalchemy.engine.base.Engine Thread-892 : ROLLBACK
2020-02-08 00:39:47,867 INFO sqlalchemy.engine.base.Engine Thread-901 : BEGIN (implicit)
2020-02-08 00:39:47,869 INFO sqlalchemy.engine.base.Engine Thread-901 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:39:47,869 INFO sqlalchemy.engine.base.Engine Thread-901 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:39:47,870 DEBUG sqlalchemy.engine.base.Engine Thread-901 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:39:47,870 DEBUG sqlalchemy.engine.base.Engine Thread-901 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:39:47,873 INFO sqlalchemy.engine.base.Engine Thread-901 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:39:47,873 INFO sqlalchemy.engine.base.Engine Thread-901 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:39:47,874 DEBUG sqlalchemy.engine.base.Engine Thread-901 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:39:47,874 DEBUG sqlalchemy.engine.base.Engine Thread-901 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:39:47,877 INFO sqlalchemy.engine.base.Engine Thread-901 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:39:47,878 INFO sqlalchemy.engine.base.Engine Thread-901 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:39:47,878 DEBUG sqlalchemy.engine.base.Engine Thread-901 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:39:47,879 DEBUG sqlalchemy.engine.base.Engine Thread-901 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:39:47,879 DEBUG sqlalchemy.engine.base.Engine Thread-901 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:39:47,882 INFO sqlalchemy.engine.base.Engine Thread-901 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:39:47,882 INFO sqlalchemy.engine.base.Engine Thread-901 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:39:47,882 DEBUG sqlalchemy.engine.base.Engine Thread-901 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:39:47,883 DEBUG sqlalchemy.engine.base.Engine Thread-901 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:39:47,883 DEBUG sqlalchemy.engine.base.Engine Thread-901 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:39:47,883 INFO sqlalchemy.engine.base.Engine Thread-901 : ROLLBACK
2020-02-08 00:39:47,906 INFO sqlalchemy.engine.base.Engine Thread-902 : BEGIN (implicit)
2020-02-08 00:39:47,907 INFO sqlalchemy.engine.base.Engine Thread-902 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:39:47,907 INFO sqlalchemy.engine.base.Engine Thread-902 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:39:47,908 DEBUG sqlalchemy.engine.base.Engine Thread-902 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:39:47,908 DEBUG sqlalchemy.engine.base.Engine Thread-902 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:39:47,911 INFO sqlalchemy.engine.base.Engine Thread-902 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:39:47,911 INFO sqlalchemy.engine.base.Engine Thread-902 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:39:47,912 DEBUG sqlalchemy.engine.base.Engine Thread-902 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:39:47,912 DEBUG sqlalchemy.engine.base.Engine Thread-902 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:39:47,918 INFO sqlalchemy.engine.base.Engine Thread-902 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:39:47,918 INFO sqlalchemy.engine.base.Engine Thread-902 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:39:47,918 DEBUG sqlalchemy.engine.base.Engine Thread-902 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:39:47,919 DEBUG sqlalchemy.engine.base.Engine Thread-902 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:39:47,919 DEBUG sqlalchemy.engine.base.Engine Thread-902 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:39:47,922 INFO sqlalchemy.engine.base.Engine Thread-902 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:39:47,922 INFO sqlalchemy.engine.base.Engine Thread-902 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:39:47,923 DEBUG sqlalchemy.engine.base.Engine Thread-902 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:39:47,923 DEBUG sqlalchemy.engine.base.Engine Thread-902 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:39:47,923 DEBUG sqlalchemy.engine.base.Engine Thread-902 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:39:47,924 INFO sqlalchemy.engine.base.Engine Thread-902 : ROLLBACK
2020-02-08 00:40:09,166 INFO sqlalchemy.engine.base.Engine Thread-903 : BEGIN (implicit)
2020-02-08 00:40:09,168 INFO sqlalchemy.engine.base.Engine Thread-903 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:40:09,168 INFO sqlalchemy.engine.base.Engine Thread-903 : ()
2020-02-08 00:40:09,170 DEBUG sqlalchemy.engine.base.Engine Thread-903 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:40:09,170 DEBUG sqlalchemy.engine.base.Engine Thread-903 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:40:09,170 DEBUG sqlalchemy.engine.base.Engine Thread-903 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:40:09,172 INFO sqlalchemy.engine.base.Engine Thread-903 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:09,172 INFO sqlalchemy.engine.base.Engine Thread-903 : (1, 1)
2020-02-08 00:40:09,173 DEBUG sqlalchemy.engine.base.Engine Thread-903 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:09,173 DEBUG sqlalchemy.engine.base.Engine Thread-903 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:09,177 INFO sqlalchemy.engine.base.Engine Thread-903 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:40:09,177 INFO sqlalchemy.engine.base.Engine Thread-903 : ('philip', 1, 1)
2020-02-08 00:40:09,177 DEBUG sqlalchemy.engine.base.Engine Thread-903 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:09,177 DEBUG sqlalchemy.engine.base.Engine Thread-903 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:09,179 INFO sqlalchemy.engine.base.Engine Thread-903 : ROLLBACK
2020-02-08 00:40:09,693 INFO sqlalchemy.engine.base.Engine Thread-912 : BEGIN (implicit)
2020-02-08 00:40:09,695 INFO sqlalchemy.engine.base.Engine Thread-912 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:40:09,695 INFO sqlalchemy.engine.base.Engine Thread-912 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:40:09,696 DEBUG sqlalchemy.engine.base.Engine Thread-912 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:40:09,696 DEBUG sqlalchemy.engine.base.Engine Thread-912 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:40:09,699 INFO sqlalchemy.engine.base.Engine Thread-912 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:40:09,700 INFO sqlalchemy.engine.base.Engine Thread-912 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:40:09,701 DEBUG sqlalchemy.engine.base.Engine Thread-912 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:40:09,701 DEBUG sqlalchemy.engine.base.Engine Thread-912 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:40:09,704 INFO sqlalchemy.engine.base.Engine Thread-912 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:40:09,705 INFO sqlalchemy.engine.base.Engine Thread-912 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:40:09,705 DEBUG sqlalchemy.engine.base.Engine Thread-912 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:40:09,705 DEBUG sqlalchemy.engine.base.Engine Thread-912 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:40:09,706 DEBUG sqlalchemy.engine.base.Engine Thread-912 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:40:09,708 INFO sqlalchemy.engine.base.Engine Thread-912 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:40:09,709 INFO sqlalchemy.engine.base.Engine Thread-912 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:40:09,710 DEBUG sqlalchemy.engine.base.Engine Thread-912 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:40:09,710 DEBUG sqlalchemy.engine.base.Engine Thread-912 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:40:09,710 DEBUG sqlalchemy.engine.base.Engine Thread-912 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:40:09,711 INFO sqlalchemy.engine.base.Engine Thread-912 : ROLLBACK
2020-02-08 00:40:09,734 INFO sqlalchemy.engine.base.Engine Thread-913 : BEGIN (implicit)
2020-02-08 00:40:09,736 INFO sqlalchemy.engine.base.Engine Thread-913 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:40:09,736 INFO sqlalchemy.engine.base.Engine Thread-913 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:40:09,737 DEBUG sqlalchemy.engine.base.Engine Thread-913 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:40:09,737 DEBUG sqlalchemy.engine.base.Engine Thread-913 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:40:09,740 INFO sqlalchemy.engine.base.Engine Thread-913 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:40:09,740 INFO sqlalchemy.engine.base.Engine Thread-913 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:40:09,741 DEBUG sqlalchemy.engine.base.Engine Thread-913 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:40:09,741 DEBUG sqlalchemy.engine.base.Engine Thread-913 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:40:09,744 INFO sqlalchemy.engine.base.Engine Thread-913 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:40:09,744 INFO sqlalchemy.engine.base.Engine Thread-913 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:40:09,745 DEBUG sqlalchemy.engine.base.Engine Thread-913 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:40:09,745 DEBUG sqlalchemy.engine.base.Engine Thread-913 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:40:09,745 DEBUG sqlalchemy.engine.base.Engine Thread-913 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:40:09,748 INFO sqlalchemy.engine.base.Engine Thread-913 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:40:09,748 INFO sqlalchemy.engine.base.Engine Thread-913 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:40:09,749 DEBUG sqlalchemy.engine.base.Engine Thread-913 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:40:09,749 DEBUG sqlalchemy.engine.base.Engine Thread-913 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:40:09,749 DEBUG sqlalchemy.engine.base.Engine Thread-913 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:40:09,750 INFO sqlalchemy.engine.base.Engine Thread-913 : ROLLBACK
2020-02-08 00:40:10,451 INFO sqlalchemy.engine.base.Engine Thread-914 : BEGIN (implicit)
2020-02-08 00:40:10,452 INFO sqlalchemy.engine.base.Engine Thread-914 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:10,452 INFO sqlalchemy.engine.base.Engine Thread-914 : (1, 1)
2020-02-08 00:40:10,453 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:10,453 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:10,455 INFO sqlalchemy.engine.base.Engine Thread-914 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 00:40:10,455 INFO sqlalchemy.engine.base.Engine Thread-914 : ('philip',)
2020-02-08 00:40:10,455 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:40:10,457 INFO sqlalchemy.engine.base.Engine Thread-914 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 00:40:10,457 INFO sqlalchemy.engine.base.Engine Thread-914 : ()
2020-02-08 00:40:10,458 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:40:10,458 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 00:40:10,459 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 00:40:10,459 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 00:40:10,459 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 00:40:10,459 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 00:40:10,463 INFO sqlalchemy.engine.base.Engine Thread-914 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:40:10,463 INFO sqlalchemy.engine.base.Engine Thread-914 : ('philip', 1, 1)
2020-02-08 00:40:10,464 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:10,464 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:10,466 INFO sqlalchemy.engine.base.Engine Thread-914 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:40:10,466 INFO sqlalchemy.engine.base.Engine Thread-914 : ('philip', 1, 1)
2020-02-08 00:40:10,467 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:10,467 DEBUG sqlalchemy.engine.base.Engine Thread-914 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:10,469 INFO sqlalchemy.engine.base.Engine Thread-914 : ROLLBACK
2020-02-08 00:40:11,002 INFO sqlalchemy.engine.base.Engine Thread-923 : BEGIN (implicit)
2020-02-08 00:40:11,003 INFO sqlalchemy.engine.base.Engine Thread-923 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:11,003 INFO sqlalchemy.engine.base.Engine Thread-923 : (1, 1)
2020-02-08 00:40:11,003 DEBUG sqlalchemy.engine.base.Engine Thread-923 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:11,004 DEBUG sqlalchemy.engine.base.Engine Thread-923 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:11,005 INFO sqlalchemy.engine.base.Engine Thread-923 : ROLLBACK
2020-02-08 00:40:11,033 INFO sqlalchemy.engine.base.Engine Thread-924 : BEGIN (implicit)
2020-02-08 00:40:11,034 INFO sqlalchemy.engine.base.Engine Thread-924 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:11,034 INFO sqlalchemy.engine.base.Engine Thread-924 : (1, 1)
2020-02-08 00:40:11,034 DEBUG sqlalchemy.engine.base.Engine Thread-924 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:11,035 DEBUG sqlalchemy.engine.base.Engine Thread-924 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:11,036 INFO sqlalchemy.engine.base.Engine Thread-924 : ROLLBACK
2020-02-08 00:40:13,147 INFO sqlalchemy.engine.base.Engine Thread-925 : BEGIN (implicit)
2020-02-08 00:40:13,148 INFO sqlalchemy.engine.base.Engine Thread-925 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:13,148 INFO sqlalchemy.engine.base.Engine Thread-925 : (1, 1)
2020-02-08 00:40:13,149 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:13,149 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:13,151 INFO sqlalchemy.engine.base.Engine Thread-925 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:40:13,151 INFO sqlalchemy.engine.base.Engine Thread-925 : ('philip', 1, 1)
2020-02-08 00:40:13,152 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:13,152 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:13,158 INFO sqlalchemy.engine.base.Engine Thread-925 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:40:13,158 INFO sqlalchemy.engine.base.Engine Thread-925 : ('philip', 1, 1)
2020-02-08 00:40:13,158 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:13,158 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:13,161 INFO sqlalchemy.engine.base.Engine Thread-925 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled, roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled, parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM users INNER JOIN roles ON roles.id = users.`role` LEFT OUTER JOIN parameters ON parameters.id = users.vendor ORDER BY users.id ASC
2020-02-08 00:40:13,161 INFO sqlalchemy.engine.base.Engine Thread-925 : ()
2020-02-08 00:40:13,162 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled', 'roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled', 'parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:40:13,162 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 00:40:13,163 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 00:40:13,163 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Row (3, 'frank', 'Frank', 'Black', 'User account for Frank Black test 987654321', '$2b$12$nbRhfcVg5W70EbAxHek.3OABSd5twyY9Ezmr5Cr4LRXOgTNZsLYSe', 'frank@somewhere.com', 2, 65, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 9, 5, 57), 'frank', 0, 2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:40:13,163 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Row (4, 'evan', 'Evan', 'Troon', 'Account for Evan Troon', '$2b$12$fRYijfQhLPT1wH9/akayhu/1F9l1IgozFbXG4uMk0p5H2u66/tUVy', 'evan@someone.com', 1, 70, datetime.datetime(2019, 9, 2, 15, 14, 53), None, datetime.datetime(2020, 1, 28, 16, 52, 21), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 00:40:13,163 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Row (6, 'dylan', 'Dylan', 'Troon', 'Dylan Troon TEST12399', '$2b$12$kyttQmBiV7Gxn4NdG1gh1eOwfzfp8LEy5.PUhMLcUyWlVd8F9DSku', 'dylan@somewhere.com', 1, 65, datetime.datetime(2019, 9, 2, 16, 50, 50), None, datetime.datetime(2020, 1, 26, 19, 12, 30), 'philip', 1, 1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:40:13,163 DEBUG sqlalchemy.engine.base.Engine Thread-925 : Row (8, 'philip2', 'Philip', 'Troon', 'Test account', '$2b$12$Hpbh0Dfjr9dtIcXAngUGKedF9XdsPlZWtQ0a.iZg0J0zdzAepBKru', 'philiptroon@gmail.com', 6, 65, datetime.datetime(2020, 1, 29, 19, 28, 53), None, datetime.datetime(2020, 2, 4, 12, 44), 'philip', 1, 6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1, 65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:40:13,165 INFO sqlalchemy.engine.base.Engine Thread-925 : ROLLBACK
2020-02-08 00:40:13,669 INFO sqlalchemy.engine.base.Engine Thread-934 : BEGIN (implicit)
2020-02-08 00:40:13,670 INFO sqlalchemy.engine.base.Engine Thread-934 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:13,670 INFO sqlalchemy.engine.base.Engine Thread-934 : (1, 1)
2020-02-08 00:40:13,671 DEBUG sqlalchemy.engine.base.Engine Thread-934 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:13,671 DEBUG sqlalchemy.engine.base.Engine Thread-934 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:13,672 INFO sqlalchemy.engine.base.Engine Thread-934 : ROLLBACK
2020-02-08 00:40:13,693 INFO sqlalchemy.engine.base.Engine Thread-935 : BEGIN (implicit)
2020-02-08 00:40:13,694 INFO sqlalchemy.engine.base.Engine Thread-935 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:13,694 INFO sqlalchemy.engine.base.Engine Thread-935 : (1, 1)
2020-02-08 00:40:13,695 DEBUG sqlalchemy.engine.base.Engine Thread-935 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:13,695 DEBUG sqlalchemy.engine.base.Engine Thread-935 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:13,696 INFO sqlalchemy.engine.base.Engine Thread-935 : ROLLBACK
2020-02-08 00:40:19,173 INFO sqlalchemy.engine.base.Engine Thread-936 : BEGIN (implicit)
2020-02-08 00:40:19,174 INFO sqlalchemy.engine.base.Engine Thread-936 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:19,174 INFO sqlalchemy.engine.base.Engine Thread-936 : (1, 1)
2020-02-08 00:40:19,175 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:19,175 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:19,177 INFO sqlalchemy.engine.base.Engine Thread-936 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.login_id = %s 
 LIMIT %s
2020-02-08 00:40:19,177 INFO sqlalchemy.engine.base.Engine Thread-936 : ('philip', 1)
2020-02-08 00:40:19,178 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:19,178 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:19,181 INFO sqlalchemy.engine.base.Engine Thread-936 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-08 00:40:19,181 INFO sqlalchemy.engine.base.Engine Thread-936 : ()
2020-02-08 00:40:19,181 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 00:40:19,182 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-08 00:40:19,182 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-08 00:40:19,182 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 00:40:19,183 INFO sqlalchemy.engine.base.Engine Thread-936 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:40:19,183 INFO sqlalchemy.engine.base.Engine Thread-936 : (63,)
2020-02-08 00:40:19,183 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:40:19,184 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 00:40:19,184 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 00:40:19,184 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 00:40:19,208 INFO sqlalchemy.engine.base.Engine Thread-936 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:40:19,208 INFO sqlalchemy.engine.base.Engine Thread-936 : ('philip', 1, 1)
2020-02-08 00:40:19,209 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:19,209 DEBUG sqlalchemy.engine.base.Engine Thread-936 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:19,212 INFO sqlalchemy.engine.base.Engine Thread-936 : ROLLBACK
2020-02-08 00:40:22,743 INFO sqlalchemy.engine.base.Engine Thread-945 : BEGIN (implicit)
2020-02-08 00:40:22,744 INFO sqlalchemy.engine.base.Engine Thread-945 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:22,744 INFO sqlalchemy.engine.base.Engine Thread-945 : (1, 1)
2020-02-08 00:40:22,745 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:22,745 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:22,747 INFO sqlalchemy.engine.base.Engine Thread-945 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 00:40:22,747 INFO sqlalchemy.engine.base.Engine Thread-945 : ('philip',)
2020-02-08 00:40:22,748 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:40:22,750 INFO sqlalchemy.engine.base.Engine Thread-945 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 00:40:22,750 INFO sqlalchemy.engine.base.Engine Thread-945 : ()
2020-02-08 00:40:22,751 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 00:40:22,751 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 00:40:22,751 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 00:40:22,751 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 00:40:22,751 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 00:40:22,751 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 00:40:22,755 INFO sqlalchemy.engine.base.Engine Thread-945 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:40:22,755 INFO sqlalchemy.engine.base.Engine Thread-945 : ('philip', 1, 1)
2020-02-08 00:40:22,756 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:22,756 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:22,759 INFO sqlalchemy.engine.base.Engine Thread-945 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:40:22,759 INFO sqlalchemy.engine.base.Engine Thread-945 : ('philip', 1, 1)
2020-02-08 00:40:22,759 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:22,760 DEBUG sqlalchemy.engine.base.Engine Thread-945 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:22,762 INFO sqlalchemy.engine.base.Engine Thread-945 : ROLLBACK
2020-02-08 00:40:27,218 INFO sqlalchemy.engine.base.Engine Thread-954 : BEGIN (implicit)
2020-02-08 00:40:27,221 INFO sqlalchemy.engine.base.Engine Thread-954 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes
2020-02-08 00:40:27,221 INFO sqlalchemy.engine.base.Engine Thread-954 : ()
2020-02-08 00:40:27,222 DEBUG sqlalchemy.engine.base.Engine Thread-954 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:40:27,222 DEBUG sqlalchemy.engine.base.Engine Thread-954 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:40:27,222 DEBUG sqlalchemy.engine.base.Engine Thread-954 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:40:27,225 INFO sqlalchemy.engine.base.Engine Thread-954 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:27,225 INFO sqlalchemy.engine.base.Engine Thread-954 : (1, 1)
2020-02-08 00:40:27,226 DEBUG sqlalchemy.engine.base.Engine Thread-954 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:27,226 DEBUG sqlalchemy.engine.base.Engine Thread-954 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:27,241 INFO sqlalchemy.engine.base.Engine Thread-954 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:40:27,241 INFO sqlalchemy.engine.base.Engine Thread-954 : ('philip', 1, 1)
2020-02-08 00:40:27,242 DEBUG sqlalchemy.engine.base.Engine Thread-954 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:27,242 DEBUG sqlalchemy.engine.base.Engine Thread-954 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:27,243 INFO sqlalchemy.engine.base.Engine Thread-954 : ROLLBACK
2020-02-08 00:40:29,926 INFO sqlalchemy.engine.base.Engine Thread-963 : BEGIN (implicit)
2020-02-08 00:40:29,927 INFO sqlalchemy.engine.base.Engine Thread-963 : SELECT parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.id ASC
2020-02-08 00:40:29,927 INFO sqlalchemy.engine.base.Engine Thread-963 : (113,)
2020-02-08 00:40:29,928 DEBUG sqlalchemy.engine.base.Engine Thread-963 : Col ('parameters_param_name', 'parameters_param_value')
2020-02-08 00:40:29,928 DEBUG sqlalchemy.engine.base.Engine Thread-963 : Row ('1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.')
2020-02-08 00:40:29,928 DEBUG sqlalchemy.engine.base.Engine Thread-963 : Row ('2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>')
2020-02-08 00:40:29,930 INFO sqlalchemy.engine.base.Engine Thread-963 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:29,930 INFO sqlalchemy.engine.base.Engine Thread-963 : (1, 1)
2020-02-08 00:40:29,931 DEBUG sqlalchemy.engine.base.Engine Thread-963 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:29,931 DEBUG sqlalchemy.engine.base.Engine Thread-963 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:29,942 INFO sqlalchemy.engine.base.Engine Thread-963 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:40:29,942 INFO sqlalchemy.engine.base.Engine Thread-963 : ('philip', 1, 1)
2020-02-08 00:40:29,943 DEBUG sqlalchemy.engine.base.Engine Thread-963 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:29,943 DEBUG sqlalchemy.engine.base.Engine Thread-963 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:29,944 INFO sqlalchemy.engine.base.Engine Thread-963 : ROLLBACK
2020-02-08 00:40:38,752 INFO sqlalchemy.engine.base.Engine Thread-972 : BEGIN (implicit)
2020-02-08 00:40:38,752 INFO sqlalchemy.engine.base.Engine Thread-972 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:40:38,752 INFO sqlalchemy.engine.base.Engine Thread-972 : (71,)
2020-02-08 00:40:38,753 DEBUG sqlalchemy.engine.base.Engine Thread-972 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:40:38,753 DEBUG sqlalchemy.engine.base.Engine Thread-972 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:40:38,753 DEBUG sqlalchemy.engine.base.Engine Thread-972 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:40:38,754 DEBUG sqlalchemy.engine.base.Engine Thread-972 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:40:38,755 INFO sqlalchemy.engine.base.Engine Thread-972 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:40:38,756 INFO sqlalchemy.engine.base.Engine Thread-972 : (1, 1)
2020-02-08 00:40:38,756 DEBUG sqlalchemy.engine.base.Engine Thread-972 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:38,757 DEBUG sqlalchemy.engine.base.Engine Thread-972 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:38,774 INFO sqlalchemy.engine.base.Engine Thread-972 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:40:38,774 INFO sqlalchemy.engine.base.Engine Thread-972 : ('philip', 1, 1)
2020-02-08 00:40:38,775 DEBUG sqlalchemy.engine.base.Engine Thread-972 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:40:38,775 DEBUG sqlalchemy.engine.base.Engine Thread-972 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:40:38,776 INFO sqlalchemy.engine.base.Engine Thread-972 : ROLLBACK
2020-02-08 00:43:38,554 INFO sqlalchemy.engine.base.Engine Thread-981 : BEGIN (implicit)
2020-02-08 00:43:38,555 INFO sqlalchemy.engine.base.Engine Thread-981 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:43:38,555 INFO sqlalchemy.engine.base.Engine Thread-981 : (71,)
2020-02-08 00:43:38,557 DEBUG sqlalchemy.engine.base.Engine Thread-981 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:43:38,558 DEBUG sqlalchemy.engine.base.Engine Thread-981 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:43:38,558 DEBUG sqlalchemy.engine.base.Engine Thread-981 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:43:38,558 DEBUG sqlalchemy.engine.base.Engine Thread-981 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:43:38,560 INFO sqlalchemy.engine.base.Engine Thread-981 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:43:38,560 INFO sqlalchemy.engine.base.Engine Thread-981 : (1, 1)
2020-02-08 00:43:38,561 DEBUG sqlalchemy.engine.base.Engine Thread-981 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:43:38,561 DEBUG sqlalchemy.engine.base.Engine Thread-981 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:43:38,579 INFO sqlalchemy.engine.base.Engine Thread-981 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:43:38,579 INFO sqlalchemy.engine.base.Engine Thread-981 : ('philip', 1, 1)
2020-02-08 00:43:38,580 DEBUG sqlalchemy.engine.base.Engine Thread-981 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:43:38,580 DEBUG sqlalchemy.engine.base.Engine Thread-981 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:43:38,582 INFO sqlalchemy.engine.base.Engine Thread-981 : ROLLBACK
2020-02-08 00:44:06,891 INFO sqlalchemy.engine.base.Engine Thread-991 : BEGIN (implicit)
2020-02-08 00:44:06,892 INFO sqlalchemy.engine.base.Engine Thread-991 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:44:06,892 INFO sqlalchemy.engine.base.Engine Thread-991 : (71,)
2020-02-08 00:44:06,893 DEBUG sqlalchemy.engine.base.Engine Thread-991 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:44:06,893 DEBUG sqlalchemy.engine.base.Engine Thread-991 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:44:06,893 DEBUG sqlalchemy.engine.base.Engine Thread-991 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:44:06,894 DEBUG sqlalchemy.engine.base.Engine Thread-991 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:44:06,895 INFO sqlalchemy.engine.base.Engine Thread-991 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:44:06,896 INFO sqlalchemy.engine.base.Engine Thread-991 : (1, 1)
2020-02-08 00:44:06,896 DEBUG sqlalchemy.engine.base.Engine Thread-991 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:44:06,897 DEBUG sqlalchemy.engine.base.Engine Thread-991 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:44:06,914 INFO sqlalchemy.engine.base.Engine Thread-991 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:44:06,914 INFO sqlalchemy.engine.base.Engine Thread-991 : ('philip', 1, 1)
2020-02-08 00:44:06,914 DEBUG sqlalchemy.engine.base.Engine Thread-991 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:44:06,915 DEBUG sqlalchemy.engine.base.Engine Thread-991 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:44:06,916 INFO sqlalchemy.engine.base.Engine Thread-991 : ROLLBACK
2020-02-08 00:46:55,243 INFO sqlalchemy.engine.base.Engine Thread-1001 : BEGIN (implicit)
2020-02-08 00:46:55,245 INFO sqlalchemy.engine.base.Engine Thread-1001 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:46:55,245 INFO sqlalchemy.engine.base.Engine Thread-1001 : (71,)
2020-02-08 00:46:55,246 DEBUG sqlalchemy.engine.base.Engine Thread-1001 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:46:55,247 DEBUG sqlalchemy.engine.base.Engine Thread-1001 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:46:55,247 DEBUG sqlalchemy.engine.base.Engine Thread-1001 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:46:55,247 DEBUG sqlalchemy.engine.base.Engine Thread-1001 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:46:55,249 INFO sqlalchemy.engine.base.Engine Thread-1001 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:46:55,249 INFO sqlalchemy.engine.base.Engine Thread-1001 : (1, 1)
2020-02-08 00:46:55,250 DEBUG sqlalchemy.engine.base.Engine Thread-1001 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:46:55,251 DEBUG sqlalchemy.engine.base.Engine Thread-1001 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:46:55,272 INFO sqlalchemy.engine.base.Engine Thread-1001 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:46:55,272 INFO sqlalchemy.engine.base.Engine Thread-1001 : ('philip', 1, 1)
2020-02-08 00:46:55,273 DEBUG sqlalchemy.engine.base.Engine Thread-1001 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:46:55,273 DEBUG sqlalchemy.engine.base.Engine Thread-1001 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:46:55,275 INFO sqlalchemy.engine.base.Engine Thread-1001 : ROLLBACK
2020-02-08 00:47:45,824 INFO sqlalchemy.engine.base.Engine Thread-1011 : BEGIN (implicit)
2020-02-08 00:47:45,825 INFO sqlalchemy.engine.base.Engine Thread-1011 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:47:45,825 INFO sqlalchemy.engine.base.Engine Thread-1011 : (71,)
2020-02-08 00:47:45,827 DEBUG sqlalchemy.engine.base.Engine Thread-1011 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:47:45,827 DEBUG sqlalchemy.engine.base.Engine Thread-1011 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:47:45,827 DEBUG sqlalchemy.engine.base.Engine Thread-1011 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:47:45,827 DEBUG sqlalchemy.engine.base.Engine Thread-1011 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:47:45,829 INFO sqlalchemy.engine.base.Engine Thread-1011 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:47:45,829 INFO sqlalchemy.engine.base.Engine Thread-1011 : (1, 1)
2020-02-08 00:47:45,830 DEBUG sqlalchemy.engine.base.Engine Thread-1011 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:47:45,830 DEBUG sqlalchemy.engine.base.Engine Thread-1011 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:47:45,847 INFO sqlalchemy.engine.base.Engine Thread-1011 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:47:45,847 INFO sqlalchemy.engine.base.Engine Thread-1011 : ('philip', 1, 1)
2020-02-08 00:47:45,847 DEBUG sqlalchemy.engine.base.Engine Thread-1011 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:47:45,848 DEBUG sqlalchemy.engine.base.Engine Thread-1011 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:47:45,849 INFO sqlalchemy.engine.base.Engine Thread-1011 : ROLLBACK
2020-02-08 00:48:46,354 INFO sqlalchemy.engine.base.Engine Thread-1021 : BEGIN (implicit)
2020-02-08 00:48:46,355 INFO sqlalchemy.engine.base.Engine Thread-1021 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:48:46,356 INFO sqlalchemy.engine.base.Engine Thread-1021 : (71,)
2020-02-08 00:48:46,356 DEBUG sqlalchemy.engine.base.Engine Thread-1021 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:48:46,357 DEBUG sqlalchemy.engine.base.Engine Thread-1021 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:48:46,357 DEBUG sqlalchemy.engine.base.Engine Thread-1021 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:48:46,357 DEBUG sqlalchemy.engine.base.Engine Thread-1021 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:48:46,359 INFO sqlalchemy.engine.base.Engine Thread-1021 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:48:46,359 INFO sqlalchemy.engine.base.Engine Thread-1021 : (1, 1)
2020-02-08 00:48:46,360 DEBUG sqlalchemy.engine.base.Engine Thread-1021 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:48:46,360 DEBUG sqlalchemy.engine.base.Engine Thread-1021 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:48:46,378 INFO sqlalchemy.engine.base.Engine Thread-1021 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:48:46,379 INFO sqlalchemy.engine.base.Engine Thread-1021 : ('philip', 1, 1)
2020-02-08 00:48:46,379 DEBUG sqlalchemy.engine.base.Engine Thread-1021 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:48:46,380 DEBUG sqlalchemy.engine.base.Engine Thread-1021 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:48:46,381 INFO sqlalchemy.engine.base.Engine Thread-1021 : ROLLBACK
2020-02-08 00:48:55,490 INFO sqlalchemy.engine.base.Engine Thread-1031 : BEGIN (implicit)
2020-02-08 00:48:55,491 INFO sqlalchemy.engine.base.Engine Thread-1031 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:48:55,491 INFO sqlalchemy.engine.base.Engine Thread-1031 : (71,)
2020-02-08 00:48:55,491 DEBUG sqlalchemy.engine.base.Engine Thread-1031 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:48:55,492 DEBUG sqlalchemy.engine.base.Engine Thread-1031 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:48:55,492 DEBUG sqlalchemy.engine.base.Engine Thread-1031 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:48:55,492 DEBUG sqlalchemy.engine.base.Engine Thread-1031 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:48:55,495 INFO sqlalchemy.engine.base.Engine Thread-1031 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 00:48:55,496 INFO sqlalchemy.engine.base.Engine Thread-1031 : (' ', '%christmas%')
2020-02-08 00:48:55,496 DEBUG sqlalchemy.engine.base.Engine Thread-1031 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt')
2020-02-08 00:48:55,497 DEBUG sqlalchemy.engine.base.Engine Thread-1031 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 00:48:55,499 INFO sqlalchemy.engine.base.Engine Thread-1031 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:48:55,499 INFO sqlalchemy.engine.base.Engine Thread-1031 : (1, 1)
2020-02-08 00:48:55,499 DEBUG sqlalchemy.engine.base.Engine Thread-1031 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:48:55,500 DEBUG sqlalchemy.engine.base.Engine Thread-1031 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:48:55,504 INFO sqlalchemy.engine.base.Engine Thread-1031 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:48:55,504 INFO sqlalchemy.engine.base.Engine Thread-1031 : ('philip', 1, 1)
2020-02-08 00:48:55,504 DEBUG sqlalchemy.engine.base.Engine Thread-1031 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:48:55,505 DEBUG sqlalchemy.engine.base.Engine Thread-1031 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:48:55,506 INFO sqlalchemy.engine.base.Engine Thread-1031 : ROLLBACK
2020-02-08 00:48:57,408 INFO sqlalchemy.engine.base.Engine Thread-1040 : BEGIN (implicit)
2020-02-08 00:48:57,409 INFO sqlalchemy.engine.base.Engine Thread-1040 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:48:57,410 INFO sqlalchemy.engine.base.Engine Thread-1040 : ()
2020-02-08 00:48:57,411 DEBUG sqlalchemy.engine.base.Engine Thread-1040 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:48:57,411 DEBUG sqlalchemy.engine.base.Engine Thread-1040 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:48:57,411 DEBUG sqlalchemy.engine.base.Engine Thread-1040 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:48:57,413 INFO sqlalchemy.engine.base.Engine Thread-1040 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:48:57,413 INFO sqlalchemy.engine.base.Engine Thread-1040 : (1, 1)
2020-02-08 00:48:57,414 DEBUG sqlalchemy.engine.base.Engine Thread-1040 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:48:57,414 DEBUG sqlalchemy.engine.base.Engine Thread-1040 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:48:57,418 INFO sqlalchemy.engine.base.Engine Thread-1040 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:48:57,418 INFO sqlalchemy.engine.base.Engine Thread-1040 : ('philip', 1, 1)
2020-02-08 00:48:57,419 DEBUG sqlalchemy.engine.base.Engine Thread-1040 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:48:57,419 DEBUG sqlalchemy.engine.base.Engine Thread-1040 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:48:57,420 INFO sqlalchemy.engine.base.Engine Thread-1040 : ROLLBACK
2020-02-08 00:48:57,967 INFO sqlalchemy.engine.base.Engine Thread-1049 : BEGIN (implicit)
2020-02-08 00:48:57,969 INFO sqlalchemy.engine.base.Engine Thread-1049 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:48:57,969 INFO sqlalchemy.engine.base.Engine Thread-1049 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:48:57,976 DEBUG sqlalchemy.engine.base.Engine Thread-1049 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:48:57,979 INFO sqlalchemy.engine.base.Engine Thread-1050 : BEGIN (implicit)
2020-02-08 00:48:57,980 DEBUG sqlalchemy.engine.base.Engine Thread-1049 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:48:57,981 INFO sqlalchemy.engine.base.Engine Thread-1050 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:48:57,985 INFO sqlalchemy.engine.base.Engine Thread-1049 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:48:57,985 INFO sqlalchemy.engine.base.Engine Thread-1050 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), 'YES')
2020-02-08 00:48:57,985 INFO sqlalchemy.engine.base.Engine Thread-1049 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:48:57,986 DEBUG sqlalchemy.engine.base.Engine Thread-1050 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:48:57,986 DEBUG sqlalchemy.engine.base.Engine Thread-1050 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:48:57,989 INFO sqlalchemy.engine.base.Engine Thread-1050 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:48:57,989 INFO sqlalchemy.engine.base.Engine Thread-1050 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), 'NO')
2020-02-08 00:48:57,990 DEBUG sqlalchemy.engine.base.Engine Thread-1050 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:48:57,990 DEBUG sqlalchemy.engine.base.Engine Thread-1050 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:48:57,991 DEBUG sqlalchemy.engine.base.Engine Thread-1050 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:48:57,994 INFO sqlalchemy.engine.base.Engine Thread-1050 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:48:57,994 DEBUG sqlalchemy.engine.base.Engine Thread-1049 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:48:57,994 INFO sqlalchemy.engine.base.Engine Thread-1050 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0))
2020-02-08 00:48:57,994 DEBUG sqlalchemy.engine.base.Engine Thread-1049 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:48:57,998 INFO sqlalchemy.engine.base.Engine Thread-1049 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:48:57,998 INFO sqlalchemy.engine.base.Engine Thread-1049 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:48:57,998 DEBUG sqlalchemy.engine.base.Engine Thread-1050 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:48:58,002 INFO sqlalchemy.engine.base.Engine Thread-1050 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:48:58,002 INFO sqlalchemy.engine.base.Engine Thread-1050 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0))
2020-02-08 00:48:58,003 DEBUG sqlalchemy.engine.base.Engine Thread-1049 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:48:58,003 DEBUG sqlalchemy.engine.base.Engine Thread-1049 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:48:58,003 DEBUG sqlalchemy.engine.base.Engine Thread-1050 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:48:58,003 DEBUG sqlalchemy.engine.base.Engine Thread-1049 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:48:58,004 INFO sqlalchemy.engine.base.Engine Thread-1050 : ROLLBACK
2020-02-08 00:48:58,007 INFO sqlalchemy.engine.base.Engine Thread-1049 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:48:58,008 INFO sqlalchemy.engine.base.Engine Thread-1049 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:48:58,009 DEBUG sqlalchemy.engine.base.Engine Thread-1049 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:48:58,009 DEBUG sqlalchemy.engine.base.Engine Thread-1049 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:48:58,009 DEBUG sqlalchemy.engine.base.Engine Thread-1049 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:48:58,010 INFO sqlalchemy.engine.base.Engine Thread-1049 : ROLLBACK
2020-02-08 00:49:00,506 INFO sqlalchemy.engine.base.Engine Thread-1051 : BEGIN (implicit)
2020-02-08 00:49:00,507 INFO sqlalchemy.engine.base.Engine Thread-1051 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:49:00,507 INFO sqlalchemy.engine.base.Engine Thread-1051 : (71,)
2020-02-08 00:49:00,508 DEBUG sqlalchemy.engine.base.Engine Thread-1051 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:49:00,508 DEBUG sqlalchemy.engine.base.Engine Thread-1051 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:49:00,508 DEBUG sqlalchemy.engine.base.Engine Thread-1051 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:49:00,508 DEBUG sqlalchemy.engine.base.Engine Thread-1051 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:49:00,510 INFO sqlalchemy.engine.base.Engine Thread-1051 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:49:00,510 INFO sqlalchemy.engine.base.Engine Thread-1051 : (1, 1)
2020-02-08 00:49:00,510 DEBUG sqlalchemy.engine.base.Engine Thread-1051 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:00,511 DEBUG sqlalchemy.engine.base.Engine Thread-1051 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:00,515 INFO sqlalchemy.engine.base.Engine Thread-1051 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:49:00,515 INFO sqlalchemy.engine.base.Engine Thread-1051 : ('philip', 1, 1)
2020-02-08 00:49:00,515 DEBUG sqlalchemy.engine.base.Engine Thread-1051 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:00,516 DEBUG sqlalchemy.engine.base.Engine Thread-1051 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:00,517 INFO sqlalchemy.engine.base.Engine Thread-1051 : ROLLBACK
2020-02-08 00:49:05,579 INFO sqlalchemy.engine.base.Engine Thread-1060 : BEGIN (implicit)
2020-02-08 00:49:05,579 INFO sqlalchemy.engine.base.Engine Thread-1060 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:49:05,579 INFO sqlalchemy.engine.base.Engine Thread-1060 : (71,)
2020-02-08 00:49:05,580 DEBUG sqlalchemy.engine.base.Engine Thread-1060 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:49:05,580 DEBUG sqlalchemy.engine.base.Engine Thread-1060 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:49:05,580 DEBUG sqlalchemy.engine.base.Engine Thread-1060 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:49:05,581 DEBUG sqlalchemy.engine.base.Engine Thread-1060 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:49:05,584 INFO sqlalchemy.engine.base.Engine Thread-1060 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 00:49:05,585 INFO sqlalchemy.engine.base.Engine Thread-1060 : (' ', '%day wer%')
2020-02-08 00:49:05,585 DEBUG sqlalchemy.engine.base.Engine Thread-1060 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt')
2020-02-08 00:49:05,587 INFO sqlalchemy.engine.base.Engine Thread-1060 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:49:05,587 INFO sqlalchemy.engine.base.Engine Thread-1060 : (1, 1)
2020-02-08 00:49:05,588 DEBUG sqlalchemy.engine.base.Engine Thread-1060 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:05,588 DEBUG sqlalchemy.engine.base.Engine Thread-1060 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:05,592 INFO sqlalchemy.engine.base.Engine Thread-1060 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:49:05,593 INFO sqlalchemy.engine.base.Engine Thread-1060 : ('philip', 1, 1)
2020-02-08 00:49:05,593 DEBUG sqlalchemy.engine.base.Engine Thread-1060 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:05,593 DEBUG sqlalchemy.engine.base.Engine Thread-1060 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:05,595 INFO sqlalchemy.engine.base.Engine Thread-1060 : ROLLBACK
2020-02-08 00:49:11,708 INFO sqlalchemy.engine.base.Engine Thread-1069 : BEGIN (implicit)
2020-02-08 00:49:11,709 INFO sqlalchemy.engine.base.Engine Thread-1069 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:49:11,709 INFO sqlalchemy.engine.base.Engine Thread-1069 : (71,)
2020-02-08 00:49:11,710 DEBUG sqlalchemy.engine.base.Engine Thread-1069 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:49:11,710 DEBUG sqlalchemy.engine.base.Engine Thread-1069 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:49:11,710 DEBUG sqlalchemy.engine.base.Engine Thread-1069 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:49:11,710 DEBUG sqlalchemy.engine.base.Engine Thread-1069 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:49:11,714 INFO sqlalchemy.engine.base.Engine Thread-1069 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 00:49:11,714 INFO sqlalchemy.engine.base.Engine Thread-1069 : (' ', '%May%')
2020-02-08 00:49:11,715 DEBUG sqlalchemy.engine.base.Engine Thread-1069 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt')
2020-02-08 00:49:11,715 DEBUG sqlalchemy.engine.base.Engine Thread-1069 : Row (9, 'May Day', 'May Day Holiday', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45))
2020-02-08 00:49:11,715 DEBUG sqlalchemy.engine.base.Engine Thread-1069 : Row (10, 'Late May Holiday', 'Late May Holiday', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45))
2020-02-08 00:49:11,716 INFO sqlalchemy.engine.base.Engine Thread-1069 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:49:11,717 INFO sqlalchemy.engine.base.Engine Thread-1069 : (1, 1)
2020-02-08 00:49:11,717 DEBUG sqlalchemy.engine.base.Engine Thread-1069 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:11,717 DEBUG sqlalchemy.engine.base.Engine Thread-1069 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:11,721 INFO sqlalchemy.engine.base.Engine Thread-1069 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:49:11,721 INFO sqlalchemy.engine.base.Engine Thread-1069 : ('philip', 1, 1)
2020-02-08 00:49:11,722 DEBUG sqlalchemy.engine.base.Engine Thread-1069 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:11,722 DEBUG sqlalchemy.engine.base.Engine Thread-1069 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:11,724 INFO sqlalchemy.engine.base.Engine Thread-1069 : ROLLBACK
2020-02-08 00:49:13,806 INFO sqlalchemy.engine.base.Engine Thread-1078 : BEGIN (implicit)
2020-02-08 00:49:13,808 INFO sqlalchemy.engine.base.Engine Thread-1078 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 00:49:13,808 INFO sqlalchemy.engine.base.Engine Thread-1078 : ()
2020-02-08 00:49:13,809 DEBUG sqlalchemy.engine.base.Engine Thread-1078 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 00:49:13,809 DEBUG sqlalchemy.engine.base.Engine Thread-1078 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 00:49:13,810 DEBUG sqlalchemy.engine.base.Engine Thread-1078 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 00:49:13,811 INFO sqlalchemy.engine.base.Engine Thread-1078 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:49:13,812 INFO sqlalchemy.engine.base.Engine Thread-1078 : (1, 1)
2020-02-08 00:49:13,812 DEBUG sqlalchemy.engine.base.Engine Thread-1078 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:13,812 DEBUG sqlalchemy.engine.base.Engine Thread-1078 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:13,816 INFO sqlalchemy.engine.base.Engine Thread-1078 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:49:13,816 INFO sqlalchemy.engine.base.Engine Thread-1078 : ('philip', 1, 1)
2020-02-08 00:49:13,817 DEBUG sqlalchemy.engine.base.Engine Thread-1078 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:13,817 DEBUG sqlalchemy.engine.base.Engine Thread-1078 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:13,819 INFO sqlalchemy.engine.base.Engine Thread-1078 : ROLLBACK
2020-02-08 00:49:14,332 INFO sqlalchemy.engine.base.Engine Thread-1087 : BEGIN (implicit)
2020-02-08 00:49:14,337 INFO sqlalchemy.engine.base.Engine Thread-1088 : BEGIN (implicit)
2020-02-08 00:49:14,338 INFO sqlalchemy.engine.base.Engine Thread-1087 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:49:14,340 INFO sqlalchemy.engine.base.Engine Thread-1088 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:49:14,340 INFO sqlalchemy.engine.base.Engine Thread-1087 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 00:49:14,340 INFO sqlalchemy.engine.base.Engine Thread-1088 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'YES')
2020-02-08 00:49:14,341 DEBUG sqlalchemy.engine.base.Engine Thread-1088 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:49:14,342 DEBUG sqlalchemy.engine.base.Engine Thread-1087 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:49:14,342 DEBUG sqlalchemy.engine.base.Engine Thread-1088 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:49:14,342 DEBUG sqlalchemy.engine.base.Engine Thread-1087 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:49:14,342 DEBUG sqlalchemy.engine.base.Engine Thread-1088 : Row (datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45), 'Late May Holiday', 'Late May Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 00:49:14,346 INFO sqlalchemy.engine.base.Engine Thread-1087 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:49:14,349 INFO sqlalchemy.engine.base.Engine Thread-1088 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 00:49:14,349 INFO sqlalchemy.engine.base.Engine Thread-1087 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 00:49:14,349 INFO sqlalchemy.engine.base.Engine Thread-1088 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), 'NO')
2020-02-08 00:49:14,350 DEBUG sqlalchemy.engine.base.Engine Thread-1087 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:49:14,350 DEBUG sqlalchemy.engine.base.Engine Thread-1087 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 00:49:14,351 DEBUG sqlalchemy.engine.base.Engine Thread-1088 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:49:14,354 INFO sqlalchemy.engine.base.Engine Thread-1087 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:49:14,357 INFO sqlalchemy.engine.base.Engine Thread-1088 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 00:49:14,357 INFO sqlalchemy.engine.base.Engine Thread-1087 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:49:14,357 INFO sqlalchemy.engine.base.Engine Thread-1088 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-02-08 00:49:14,358 DEBUG sqlalchemy.engine.base.Engine Thread-1088 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:49:14,361 INFO sqlalchemy.engine.base.Engine Thread-1088 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:49:14,362 INFO sqlalchemy.engine.base.Engine Thread-1088 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0), datetime.datetime(2020, 4, 27, 0, 0), datetime.datetime(2020, 6, 8, 0, 0))
2020-02-08 00:49:14,362 DEBUG sqlalchemy.engine.base.Engine Thread-1087 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:49:14,362 DEBUG sqlalchemy.engine.base.Engine Thread-1087 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:49:14,362 DEBUG sqlalchemy.engine.base.Engine Thread-1087 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 00:49:14,366 INFO sqlalchemy.engine.base.Engine Thread-1087 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 00:49:14,366 INFO sqlalchemy.engine.base.Engine Thread-1087 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 00:49:14,366 DEBUG sqlalchemy.engine.base.Engine Thread-1088 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:49:14,367 DEBUG sqlalchemy.engine.base.Engine Thread-1087 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 00:49:14,367 DEBUG sqlalchemy.engine.base.Engine Thread-1088 : Row (datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), 'Test Booking 3', 'testing', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:49:14,367 DEBUG sqlalchemy.engine.base.Engine Thread-1087 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:49:14,368 INFO sqlalchemy.engine.base.Engine Thread-1088 : ROLLBACK
2020-02-08 00:49:14,368 DEBUG sqlalchemy.engine.base.Engine Thread-1087 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 00:49:14,369 INFO sqlalchemy.engine.base.Engine Thread-1087 : ROLLBACK
2020-02-08 00:49:23,055 INFO sqlalchemy.engine.base.Engine Thread-1089 : BEGIN (implicit)
2020-02-08 00:49:23,055 INFO sqlalchemy.engine.base.Engine Thread-1089 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:49:23,055 INFO sqlalchemy.engine.base.Engine Thread-1089 : (71,)
2020-02-08 00:49:23,056 DEBUG sqlalchemy.engine.base.Engine Thread-1089 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:49:23,056 DEBUG sqlalchemy.engine.base.Engine Thread-1089 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:49:23,056 DEBUG sqlalchemy.engine.base.Engine Thread-1089 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:49:23,057 DEBUG sqlalchemy.engine.base.Engine Thread-1089 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:49:23,058 INFO sqlalchemy.engine.base.Engine Thread-1089 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:49:23,058 INFO sqlalchemy.engine.base.Engine Thread-1089 : (1, 1)
2020-02-08 00:49:23,059 DEBUG sqlalchemy.engine.base.Engine Thread-1089 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:23,059 DEBUG sqlalchemy.engine.base.Engine Thread-1089 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:23,063 INFO sqlalchemy.engine.base.Engine Thread-1089 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:49:23,063 INFO sqlalchemy.engine.base.Engine Thread-1089 : ('philip', 1, 1)
2020-02-08 00:49:23,064 DEBUG sqlalchemy.engine.base.Engine Thread-1089 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:23,064 DEBUG sqlalchemy.engine.base.Engine Thread-1089 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:23,066 INFO sqlalchemy.engine.base.Engine Thread-1089 : ROLLBACK
2020-02-08 00:49:52,373 INFO sqlalchemy.engine.base.Engine Thread-1098 : BEGIN (implicit)
2020-02-08 00:49:52,374 INFO sqlalchemy.engine.base.Engine Thread-1098 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:49:52,374 INFO sqlalchemy.engine.base.Engine Thread-1098 : (71,)
2020-02-08 00:49:52,375 DEBUG sqlalchemy.engine.base.Engine Thread-1098 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:49:52,376 DEBUG sqlalchemy.engine.base.Engine Thread-1098 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:49:52,376 DEBUG sqlalchemy.engine.base.Engine Thread-1098 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:49:52,376 DEBUG sqlalchemy.engine.base.Engine Thread-1098 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:49:52,378 INFO sqlalchemy.engine.base.Engine Thread-1098 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:49:52,378 INFO sqlalchemy.engine.base.Engine Thread-1098 : (1, 1)
2020-02-08 00:49:52,378 DEBUG sqlalchemy.engine.base.Engine Thread-1098 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:52,379 DEBUG sqlalchemy.engine.base.Engine Thread-1098 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:52,383 INFO sqlalchemy.engine.base.Engine Thread-1098 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:49:52,383 INFO sqlalchemy.engine.base.Engine Thread-1098 : ('philip', 1, 1)
2020-02-08 00:49:52,384 DEBUG sqlalchemy.engine.base.Engine Thread-1098 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:49:52,384 DEBUG sqlalchemy.engine.base.Engine Thread-1098 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:49:52,386 INFO sqlalchemy.engine.base.Engine Thread-1098 : ROLLBACK
2020-02-08 00:50:45,327 INFO sqlalchemy.engine.base.Engine Thread-1107 : BEGIN (implicit)
2020-02-08 00:50:45,328 INFO sqlalchemy.engine.base.Engine Thread-1107 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:50:45,328 INFO sqlalchemy.engine.base.Engine Thread-1107 : (71,)
2020-02-08 00:50:45,330 DEBUG sqlalchemy.engine.base.Engine Thread-1107 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:50:45,330 DEBUG sqlalchemy.engine.base.Engine Thread-1107 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:50:45,330 DEBUG sqlalchemy.engine.base.Engine Thread-1107 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:50:45,330 DEBUG sqlalchemy.engine.base.Engine Thread-1107 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:50:45,332 INFO sqlalchemy.engine.base.Engine Thread-1107 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:50:45,333 INFO sqlalchemy.engine.base.Engine Thread-1107 : (1, 1)
2020-02-08 00:50:45,333 DEBUG sqlalchemy.engine.base.Engine Thread-1107 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:50:45,334 DEBUG sqlalchemy.engine.base.Engine Thread-1107 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:50:45,350 INFO sqlalchemy.engine.base.Engine Thread-1107 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:50:45,350 INFO sqlalchemy.engine.base.Engine Thread-1107 : ('philip', 1, 1)
2020-02-08 00:50:45,351 DEBUG sqlalchemy.engine.base.Engine Thread-1107 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:50:45,351 DEBUG sqlalchemy.engine.base.Engine Thread-1107 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:50:45,352 INFO sqlalchemy.engine.base.Engine Thread-1107 : ROLLBACK
2020-02-08 00:50:51,147 INFO sqlalchemy.engine.base.Engine Thread-1117 : BEGIN (implicit)
2020-02-08 00:50:51,148 INFO sqlalchemy.engine.base.Engine Thread-1117 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:50:51,148 INFO sqlalchemy.engine.base.Engine Thread-1117 : (71,)
2020-02-08 00:50:51,149 DEBUG sqlalchemy.engine.base.Engine Thread-1117 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:50:51,149 DEBUG sqlalchemy.engine.base.Engine Thread-1117 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:50:51,150 DEBUG sqlalchemy.engine.base.Engine Thread-1117 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:50:51,150 DEBUG sqlalchemy.engine.base.Engine Thread-1117 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:50:51,152 INFO sqlalchemy.engine.base.Engine Thread-1117 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:50:51,152 INFO sqlalchemy.engine.base.Engine Thread-1117 : (1, 1)
2020-02-08 00:50:51,153 DEBUG sqlalchemy.engine.base.Engine Thread-1117 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:50:51,153 DEBUG sqlalchemy.engine.base.Engine Thread-1117 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:50:51,157 INFO sqlalchemy.engine.base.Engine Thread-1117 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:50:51,157 INFO sqlalchemy.engine.base.Engine Thread-1117 : ('philip', 1, 1)
2020-02-08 00:50:51,158 DEBUG sqlalchemy.engine.base.Engine Thread-1117 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:50:51,158 DEBUG sqlalchemy.engine.base.Engine Thread-1117 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:50:51,160 INFO sqlalchemy.engine.base.Engine Thread-1117 : ROLLBACK
2020-02-08 00:50:54,513 INFO sqlalchemy.engine.base.Engine Thread-1126 : BEGIN (implicit)
2020-02-08 00:50:54,514 INFO sqlalchemy.engine.base.Engine Thread-1126 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:50:54,514 INFO sqlalchemy.engine.base.Engine Thread-1126 : (71,)
2020-02-08 00:50:54,515 DEBUG sqlalchemy.engine.base.Engine Thread-1126 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:50:54,515 DEBUG sqlalchemy.engine.base.Engine Thread-1126 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:50:54,516 DEBUG sqlalchemy.engine.base.Engine Thread-1126 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:50:54,516 DEBUG sqlalchemy.engine.base.Engine Thread-1126 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:50:54,519 INFO sqlalchemy.engine.base.Engine Thread-1126 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS datesofinterest_1_doi_name, datesofinterest_1.doi_comment AS datesofinterest_1_doi_comment, datesofinterest_1.doi_start_dt AS datesofinterest_1_doi_start_dt, datesofinterest_1.doi_end_dt AS datesofinterest_1_doi_end_dt 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 00:50:54,519 INFO sqlalchemy.engine.base.Engine Thread-1126 : (' ', '%christmas%')
2020-02-08 00:50:54,520 DEBUG sqlalchemy.engine.base.Engine Thread-1126 : Col ('datesofinterest_1_id', 'datesofinterest_1_doi_name', 'datesofinterest_1_doi_comment', 'datesofinterest_1_doi_start_dt', 'datesofinterest_1_doi_end_dt')
2020-02-08 00:50:54,520 DEBUG sqlalchemy.engine.base.Engine Thread-1126 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 00:50:54,522 INFO sqlalchemy.engine.base.Engine Thread-1126 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:50:54,522 INFO sqlalchemy.engine.base.Engine Thread-1126 : (1, 1)
2020-02-08 00:50:54,522 DEBUG sqlalchemy.engine.base.Engine Thread-1126 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:50:54,523 DEBUG sqlalchemy.engine.base.Engine Thread-1126 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:50:54,527 INFO sqlalchemy.engine.base.Engine Thread-1126 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:50:54,527 INFO sqlalchemy.engine.base.Engine Thread-1126 : ('philip', 1, 1)
2020-02-08 00:50:54,528 DEBUG sqlalchemy.engine.base.Engine Thread-1126 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:50:54,528 DEBUG sqlalchemy.engine.base.Engine Thread-1126 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:50:54,530 INFO sqlalchemy.engine.base.Engine Thread-1126 : ROLLBACK
2020-02-08 00:59:51,418 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 00:59:51,418 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 00:59:51,419 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 00:59:51,420 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 00:59:51,420 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 00:59:51,420 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 00:59:51,421 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 00:59:51,421 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 00:59:51,421 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 00:59:51,421 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 00:59:51,422 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 00:59:51,422 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 00:59:51,422 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 00:59:51,422 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 00:59:51,423 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 00:59:51,423 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 00:59:51,424 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 00:59:51,424 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 00:59:51,424 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 00:59:51,424 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 00:59:51,425 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 00:59:51,425 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 00:59:51,425 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 00:59:51,427 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:59:51,427 INFO sqlalchemy.engine.base.Engine Thread-2 : (71,)
2020-02-08 00:59:51,428 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:59:51,428 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:59:51,428 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:59:51,428 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:59:51,432 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:59:51,432 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 00:59:51,433 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:59:51,433 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:59:51,503 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:59:51,504 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 00:59:51,504 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:59:51,505 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:59:51,506 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 00:59:58,444 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 00:59:58,445 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 00:59:58,445 INFO sqlalchemy.engine.base.Engine Thread-11 : (71,)
2020-02-08 00:59:58,446 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 00:59:58,446 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 00:59:58,446 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 00:59:58,446 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 00:59:58,450 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 00:59:58,450 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%christmas%')
2020-02-08 00:59:58,451 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 00:59:58,451 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 00:59:58,455 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 00:59:58,455 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%christmas%')
2020-02-08 00:59:58,456 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 00:59:58,457 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 00:59:58,457 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-02-08 00:59:58,458 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:59:58,458 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:59:58,462 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 00:59:58,462 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 00:59:58,463 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 00:59:58,463 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 00:59:58,464 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 01:00:03,848 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-02-08 01:00:03,848 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:00:03,849 INFO sqlalchemy.engine.base.Engine Thread-20 : (71,)
2020-02-08 01:00:03,849 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:00:03,850 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:00:03,850 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:00:03,850 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:00:03,853 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:00:03,853 INFO sqlalchemy.engine.base.Engine Thread-20 : (' ', '%test%')
2020-02-08 01:00:03,854 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:00:03,854 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:00:03,857 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:00:03,857 INFO sqlalchemy.engine.base.Engine Thread-20 : (' ', '%test%')
2020-02-08 01:00:03,858 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:00:03,858 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:00:03,858 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:00:03,858 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:00:03,858 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:00:03,858 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:00:03,860 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:00:03,860 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-02-08 01:00:03,861 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:00:03,862 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:00:03,866 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:00:03,866 INFO sqlalchemy.engine.base.Engine Thread-20 : ('philip', 1, 1)
2020-02-08 01:00:03,867 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:00:03,867 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:00:03,869 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-02-08 01:00:08,901 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-02-08 01:00:08,907 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 01:00:08,907 INFO sqlalchemy.engine.base.Engine Thread-29 : ()
2020-02-08 01:00:08,909 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 01:00:08,909 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 01:00:08,909 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 01:00:08,911 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:00:08,911 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-02-08 01:00:08,912 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:00:08,912 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:00:08,924 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:00:08,924 INFO sqlalchemy.engine.base.Engine Thread-29 : ('philip', 1, 1)
2020-02-08 01:00:08,925 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:00:08,925 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:00:08,926 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-02-08 01:00:09,396 INFO sqlalchemy.engine.base.Engine Thread-38 : BEGIN (implicit)
2020-02-08 01:00:09,397 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:00:09,397 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:00:09,398 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:00:09,399 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:00:09,402 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:00:09,402 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:00:09,403 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:00:09,403 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:00:09,406 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:00:09,406 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:00:09,407 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:00:09,407 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:00:09,407 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:00:09,410 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:00:09,410 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:00:09,411 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:00:09,411 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:00:09,411 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:00:09,412 INFO sqlalchemy.engine.base.Engine Thread-38 : ROLLBACK
2020-02-08 01:00:09,439 INFO sqlalchemy.engine.base.Engine Thread-39 : BEGIN (implicit)
2020-02-08 01:00:09,440 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:00:09,440 INFO sqlalchemy.engine.base.Engine Thread-39 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:00:09,441 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:00:09,441 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:00:09,444 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:00:09,444 INFO sqlalchemy.engine.base.Engine Thread-39 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:00:09,445 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:00:09,445 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:00:09,448 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:00:09,449 INFO sqlalchemy.engine.base.Engine Thread-39 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:00:09,449 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:00:09,449 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:00:09,450 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:00:09,452 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:00:09,453 INFO sqlalchemy.engine.base.Engine Thread-39 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:00:09,453 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:00:09,453 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:00:09,453 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:00:09,454 INFO sqlalchemy.engine.base.Engine Thread-39 : ROLLBACK
2020-02-08 01:00:15,510 INFO sqlalchemy.engine.base.Engine Thread-40 : BEGIN (implicit)
2020-02-08 01:00:15,510 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:00:15,510 INFO sqlalchemy.engine.base.Engine Thread-40 : (71,)
2020-02-08 01:00:15,511 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:00:15,511 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:00:15,512 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:00:15,512 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:00:15,513 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:00:15,513 INFO sqlalchemy.engine.base.Engine Thread-40 : (1, 1)
2020-02-08 01:00:15,514 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:00:15,514 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:00:15,518 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:00:15,518 INFO sqlalchemy.engine.base.Engine Thread-40 : ('philip', 1, 1)
2020-02-08 01:00:15,519 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:00:15,519 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:00:15,520 INFO sqlalchemy.engine.base.Engine Thread-40 : ROLLBACK
2020-02-08 01:00:18,464 INFO sqlalchemy.engine.base.Engine Thread-49 : BEGIN (implicit)
2020-02-08 01:00:18,465 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:00:18,465 INFO sqlalchemy.engine.base.Engine Thread-49 : (71,)
2020-02-08 01:00:18,465 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:00:18,466 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:00:18,466 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:00:18,466 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:00:18,469 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:00:18,469 INFO sqlalchemy.engine.base.Engine Thread-49 : (' ', '%test%')
2020-02-08 01:00:18,469 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:00:18,470 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:00:18,473 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:00:18,473 INFO sqlalchemy.engine.base.Engine Thread-49 : (' ', '%test%')
2020-02-08 01:00:18,474 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:00:18,474 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:00:18,474 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:00:18,474 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:00:18,474 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:00:18,474 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:00:18,476 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:00:18,476 INFO sqlalchemy.engine.base.Engine Thread-49 : (1, 1)
2020-02-08 01:00:18,477 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:00:18,477 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:00:18,482 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:00:18,482 INFO sqlalchemy.engine.base.Engine Thread-49 : ('philip', 1, 1)
2020-02-08 01:00:18,483 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:00:18,483 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:00:18,486 INFO sqlalchemy.engine.base.Engine Thread-49 : ROLLBACK
2020-02-08 01:06:32,058 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-02-08 01:06:32,061 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 01:06:32,061 INFO sqlalchemy.engine.base.Engine Thread-58 : ()
2020-02-08 01:06:32,064 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 01:06:32,065 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 01:06:32,065 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 01:06:32,067 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:06:32,067 INFO sqlalchemy.engine.base.Engine Thread-58 : (1, 1)
2020-02-08 01:06:32,068 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:06:32,068 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:06:32,072 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:06:32,072 INFO sqlalchemy.engine.base.Engine Thread-58 : ('philip', 1, 1)
2020-02-08 01:06:32,073 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:06:32,073 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:06:32,075 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-02-08 01:06:32,747 INFO sqlalchemy.engine.base.Engine Thread-67 : BEGIN (implicit)
2020-02-08 01:06:32,749 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:32,749 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:06:32,750 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:32,750 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:06:32,753 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:32,753 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:06:32,754 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:32,754 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:06:32,759 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:06:32,759 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:06:32,760 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:32,760 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:32,760 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:32,763 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:06:32,763 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:06:32,764 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:32,764 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:32,764 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:32,765 INFO sqlalchemy.engine.base.Engine Thread-67 : ROLLBACK
2020-02-08 01:06:32,786 INFO sqlalchemy.engine.base.Engine Thread-68 : BEGIN (implicit)
2020-02-08 01:06:32,787 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:32,788 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:06:32,788 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:32,788 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:06:32,792 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:32,792 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:06:32,793 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:32,793 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:06:32,796 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:06:32,796 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:06:32,797 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:32,797 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:32,797 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:32,800 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:06:32,800 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:06:32,801 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:32,801 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:32,801 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:32,802 INFO sqlalchemy.engine.base.Engine Thread-68 : ROLLBACK
2020-02-08 01:06:36,850 INFO sqlalchemy.engine.base.Engine Thread-69 : BEGIN (implicit)
2020-02-08 01:06:36,852 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:36,852 INFO sqlalchemy.engine.base.Engine Thread-69 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'YES')
2020-02-08 01:06:36,853 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:36,853 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:06:36,856 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:36,856 INFO sqlalchemy.engine.base.Engine Thread-69 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'NO')
2020-02-08 01:06:36,857 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:36,857 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:06:36,860 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:06:36,860 INFO sqlalchemy.engine.base.Engine Thread-69 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-02-08 01:06:36,861 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:36,861 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:36,861 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:36,864 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:06:36,864 INFO sqlalchemy.engine.base.Engine Thread-69 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-02-08 01:06:36,865 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:36,865 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:36,866 INFO sqlalchemy.engine.base.Engine Thread-69 : ROLLBACK
2020-02-08 01:06:41,104 INFO sqlalchemy.engine.base.Engine Thread-70 : BEGIN (implicit)
2020-02-08 01:06:41,106 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:41,106 INFO sqlalchemy.engine.base.Engine Thread-70 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:06:41,107 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:41,107 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:06:41,110 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:41,110 INFO sqlalchemy.engine.base.Engine Thread-70 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:06:41,110 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:41,111 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:06:41,114 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:06:41,114 INFO sqlalchemy.engine.base.Engine Thread-70 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:06:41,115 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:41,115 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:41,115 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:41,118 INFO sqlalchemy.engine.base.Engine Thread-70 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:06:41,118 INFO sqlalchemy.engine.base.Engine Thread-70 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:06:41,119 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:41,119 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:41,119 DEBUG sqlalchemy.engine.base.Engine Thread-70 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:41,120 INFO sqlalchemy.engine.base.Engine Thread-70 : ROLLBACK
2020-02-08 01:06:42,686 INFO sqlalchemy.engine.base.Engine Thread-71 : BEGIN (implicit)
2020-02-08 01:06:42,688 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:42,688 INFO sqlalchemy.engine.base.Engine Thread-71 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'YES')
2020-02-08 01:06:42,689 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:42,689 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:06:42,692 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:42,692 INFO sqlalchemy.engine.base.Engine Thread-71 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'NO')
2020-02-08 01:06:42,693 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:42,694 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:06:42,697 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:06:42,698 INFO sqlalchemy.engine.base.Engine Thread-71 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-02-08 01:06:42,698 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:42,699 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:42,699 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:42,702 INFO sqlalchemy.engine.base.Engine Thread-71 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:06:42,702 INFO sqlalchemy.engine.base.Engine Thread-71 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-02-08 01:06:42,702 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:42,703 DEBUG sqlalchemy.engine.base.Engine Thread-71 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:42,703 INFO sqlalchemy.engine.base.Engine Thread-71 : ROLLBACK
2020-02-08 01:06:43,406 INFO sqlalchemy.engine.base.Engine Thread-72 : BEGIN (implicit)
2020-02-08 01:06:43,408 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:43,408 INFO sqlalchemy.engine.base.Engine Thread-72 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:06:43,409 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:43,409 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:06:43,413 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:43,413 INFO sqlalchemy.engine.base.Engine Thread-72 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:06:43,414 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:43,414 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:06:43,417 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:06:43,417 INFO sqlalchemy.engine.base.Engine Thread-72 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:06:43,418 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:43,418 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:43,418 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:43,421 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:06:43,421 INFO sqlalchemy.engine.base.Engine Thread-72 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:06:43,422 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:43,422 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:43,422 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:43,423 INFO sqlalchemy.engine.base.Engine Thread-72 : ROLLBACK
2020-02-08 01:06:45,920 INFO sqlalchemy.engine.base.Engine Thread-73 : BEGIN (implicit)
2020-02-08 01:06:45,921 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:06:45,921 INFO sqlalchemy.engine.base.Engine Thread-73 : (71,)
2020-02-08 01:06:45,922 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:06:45,922 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:06:45,922 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:06:45,922 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:06:45,924 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:06:45,924 INFO sqlalchemy.engine.base.Engine Thread-73 : (1, 1)
2020-02-08 01:06:45,924 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:06:45,925 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:06:45,928 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:06:45,929 INFO sqlalchemy.engine.base.Engine Thread-73 : ('philip', 1, 1)
2020-02-08 01:06:45,929 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:06:45,929 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:06:45,931 INFO sqlalchemy.engine.base.Engine Thread-73 : ROLLBACK
2020-02-08 01:06:49,405 INFO sqlalchemy.engine.base.Engine Thread-82 : BEGIN (implicit)
2020-02-08 01:06:49,406 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:06:49,406 INFO sqlalchemy.engine.base.Engine Thread-82 : (71,)
2020-02-08 01:06:49,407 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:06:49,408 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:06:49,408 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:06:49,408 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:06:49,411 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:06:49,411 INFO sqlalchemy.engine.base.Engine Thread-82 : (' ', '%test%')
2020-02-08 01:06:49,412 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:06:49,412 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:06:49,415 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:06:49,416 INFO sqlalchemy.engine.base.Engine Thread-82 : (' ', '%test%')
2020-02-08 01:06:49,416 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:06:49,416 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:06:49,416 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:06:49,416 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:06:49,417 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:06:49,417 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:06:49,419 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:06:49,419 INFO sqlalchemy.engine.base.Engine Thread-82 : (1, 1)
2020-02-08 01:06:49,419 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:06:49,419 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:06:49,427 INFO sqlalchemy.engine.base.Engine Thread-82 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:06:49,427 INFO sqlalchemy.engine.base.Engine Thread-82 : ('philip', 1, 1)
2020-02-08 01:06:49,427 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:06:49,428 DEBUG sqlalchemy.engine.base.Engine Thread-82 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:06:49,430 INFO sqlalchemy.engine.base.Engine Thread-82 : ROLLBACK
2020-02-08 01:06:53,908 INFO sqlalchemy.engine.base.Engine Thread-91 : BEGIN (implicit)
2020-02-08 01:06:53,911 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 01:06:53,911 INFO sqlalchemy.engine.base.Engine Thread-91 : ()
2020-02-08 01:06:53,912 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 01:06:53,912 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 01:06:53,913 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 01:06:53,915 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:06:53,915 INFO sqlalchemy.engine.base.Engine Thread-91 : (1, 1)
2020-02-08 01:06:53,915 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:06:53,916 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:06:53,919 INFO sqlalchemy.engine.base.Engine Thread-91 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:06:53,919 INFO sqlalchemy.engine.base.Engine Thread-91 : ('philip', 1, 1)
2020-02-08 01:06:53,920 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:06:53,920 DEBUG sqlalchemy.engine.base.Engine Thread-91 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:06:53,922 INFO sqlalchemy.engine.base.Engine Thread-91 : ROLLBACK
2020-02-08 01:06:54,481 INFO sqlalchemy.engine.base.Engine Thread-100 : BEGIN (implicit)
2020-02-08 01:06:54,482 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:54,483 INFO sqlalchemy.engine.base.Engine Thread-100 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:06:54,489 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:54,494 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:06:54,497 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:54,498 INFO sqlalchemy.engine.base.Engine Thread-100 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:06:54,498 INFO sqlalchemy.engine.base.Engine Thread-101 : BEGIN (implicit)
2020-02-08 01:06:54,499 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:54,499 INFO sqlalchemy.engine.base.Engine Thread-101 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'YES')
2020-02-08 01:06:54,500 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:54,500 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:54,500 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:06:54,501 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:06:54,504 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:06:54,507 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:06:54,507 INFO sqlalchemy.engine.base.Engine Thread-100 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:06:54,507 INFO sqlalchemy.engine.base.Engine Thread-101 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), 'NO')
2020-02-08 01:06:54,508 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:54,508 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:54,508 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:54,511 INFO sqlalchemy.engine.base.Engine Thread-100 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:06:54,511 INFO sqlalchemy.engine.base.Engine Thread-100 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:06:54,512 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:54,512 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:06:54,515 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:06:54,515 INFO sqlalchemy.engine.base.Engine Thread-101 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-02-08 01:06:54,516 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:54,516 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:54,516 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:54,517 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:54,517 DEBUG sqlalchemy.engine.base.Engine Thread-100 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:54,517 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:06:54,518 INFO sqlalchemy.engine.base.Engine Thread-100 : ROLLBACK
2020-02-08 01:06:54,521 INFO sqlalchemy.engine.base.Engine Thread-101 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:06:54,521 INFO sqlalchemy.engine.base.Engine Thread-101 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0), datetime.datetime(2020, 2, 24, 0, 0), datetime.datetime(2020, 4, 6, 0, 0))
2020-02-08 01:06:54,522 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:06:54,522 DEBUG sqlalchemy.engine.base.Engine Thread-101 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:06:54,523 INFO sqlalchemy.engine.base.Engine Thread-101 : ROLLBACK
2020-02-08 01:06:59,141 INFO sqlalchemy.engine.base.Engine Thread-102 : BEGIN (implicit)
2020-02-08 01:06:59,142 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:06:59,142 INFO sqlalchemy.engine.base.Engine Thread-102 : (71,)
2020-02-08 01:06:59,143 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:06:59,143 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:06:59,143 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:06:59,143 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:06:59,145 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:06:59,146 INFO sqlalchemy.engine.base.Engine Thread-102 : (1, 1)
2020-02-08 01:06:59,146 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:06:59,146 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:06:59,151 INFO sqlalchemy.engine.base.Engine Thread-102 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:06:59,151 INFO sqlalchemy.engine.base.Engine Thread-102 : ('philip', 1, 1)
2020-02-08 01:06:59,151 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:06:59,152 DEBUG sqlalchemy.engine.base.Engine Thread-102 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:06:59,153 INFO sqlalchemy.engine.base.Engine Thread-102 : ROLLBACK
2020-02-08 01:24:57,892 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 01:24:57,892 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:24:57,894 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:24:57,894 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 01:24:57,895 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 01:24:57,895 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:24:57,896 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:24:57,896 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 01:24:57,896 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 01:24:57,896 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:24:57,896 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 01:24:57,897 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 01:24:57,897 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 01:24:57,897 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:24:57,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 01:24:57,898 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 01:24:57,898 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 01:24:57,898 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:24:57,899 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 01:24:57,899 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:24:57,900 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 01:24:57,900 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:24:57,900 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 01:24:57,902 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:24:57,902 INFO sqlalchemy.engine.base.Engine Thread-2 : (71,)
2020-02-08 01:24:57,903 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:24:57,903 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:24:57,903 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:24:57,903 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:24:57,907 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:24:57,907 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%test%')
2020-02-08 01:24:57,908 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:24:57,908 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:24:57,912 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:24:57,912 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%test%')
2020-02-08 01:24:57,913 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:24:57,913 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:24:57,913 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:24:57,913 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:24:57,914 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:24:57,914 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:24:57,917 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:24:57,917 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 01:24:57,918 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:24:57,918 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:24:57,990 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:24:57,990 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 01:24:57,991 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:24:57,991 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:24:57,994 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 01:25:00,336 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 01:25:00,342 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 01:25:00,342 INFO sqlalchemy.engine.base.Engine Thread-11 : ()
2020-02-08 01:25:00,343 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 01:25:00,344 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 01:25:00,344 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 01:25:00,347 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:25:00,347 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-02-08 01:25:00,347 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:25:00,349 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:25:00,360 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:25:00,361 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 01:25:00,361 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:25:00,362 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:25:00,363 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 01:25:00,887 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-02-08 01:25:00,888 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:25:00,889 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:25:00,889 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:25:00,890 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:25:00,893 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:25:00,893 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:25:00,894 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:25:00,894 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:25:00,897 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:25:00,897 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:25:00,898 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:25:00,898 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:25:00,899 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:25:00,902 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:25:00,902 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:25:00,903 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:25:00,903 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:25:00,903 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:25:00,904 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-02-08 01:25:00,928 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-02-08 01:25:00,930 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:25:00,930 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:25:00,931 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:25:00,931 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:25:00,934 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:25:00,934 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:25:00,935 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:25:00,935 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:25:00,938 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:25:00,938 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:25:00,939 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:25:00,939 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:25:00,939 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:25:00,942 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:25:00,942 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:25:00,943 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:25:00,943 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:25:00,943 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:25:00,944 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-02-08 01:35:40,548 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 01:35:40,549 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:35:40,550 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:35:40,550 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 01:35:40,551 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 01:35:40,551 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:35:40,551 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:35:40,551 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 01:35:40,552 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 01:35:40,552 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:35:40,552 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 01:35:40,552 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 01:35:40,552 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 01:35:40,553 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:35:40,553 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 01:35:40,553 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 01:35:40,554 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 01:35:40,554 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:35:40,555 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 01:35:40,555 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:35:40,555 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 01:35:40,555 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:35:40,556 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 01:35:40,557 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:35:40,557 INFO sqlalchemy.engine.base.Engine Thread-2 : (71,)
2020-02-08 01:35:40,558 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:35:40,558 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:35:40,558 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:35:40,559 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:35:40,562 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:35:40,562 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 01:35:40,563 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:35:40,563 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:35:40,634 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:35:40,634 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 01:35:40,635 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:35:40,635 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:35:40,637 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 01:35:45,229 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 01:35:45,230 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:35:45,230 INFO sqlalchemy.engine.base.Engine Thread-11 : (71,)
2020-02-08 01:35:45,231 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:35:45,231 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:35:45,231 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:35:45,231 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:36:23,289 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 01:36:23,289 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:36:23,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:36:23,290 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 01:36:23,291 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 01:36:23,291 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:36:23,291 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:36:23,291 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 01:36:23,292 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 01:36:23,292 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:36:23,292 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 01:36:23,292 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 01:36:23,293 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 01:36:23,293 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:36:23,293 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 01:36:23,293 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 01:36:23,294 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 01:36:23,294 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:36:23,295 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 01:36:23,295 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:36:23,295 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 01:36:23,295 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:36:23,296 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 01:36:23,297 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:36:23,297 INFO sqlalchemy.engine.base.Engine Thread-2 : (71,)
2020-02-08 01:36:23,298 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:36:23,298 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:36:23,298 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:36:23,298 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:36:23,303 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:36:23,303 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%t%', ' ', '%e%', ' ', '%s%', ' ', '%t%')
2020-02-08 01:36:23,304 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:36:23,304 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45))
2020-02-08 01:36:23,304 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 'Easter Holiday', 'Easter Holiday', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45))
2020-02-08 01:36:23,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (10, 'Late May Holiday', 'Late May Holiday', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45))
2020-02-08 01:36:23,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:36:23,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', 'Summer Change Freeze', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45))
2020-02-08 01:36:23,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:36:23,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', '', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45))
2020-02-08 01:36:23,310 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:36:23,310 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%test%', ' ', '%test%', ' ', '%test%', ' ', '%test%')
2020-02-08 01:36:23,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:36:23,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:36:23,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:36:23,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:36:23,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:36:23,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:36:23,315 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:36:23,315 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 01:36:23,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:36:23,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:36:23,387 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:36:23,387 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 01:36:23,388 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:36:23,388 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:36:23,391 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 01:36:33,602 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 01:36:33,609 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 01:36:33,609 INFO sqlalchemy.engine.base.Engine Thread-11 : ()
2020-02-08 01:36:33,611 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 01:36:33,611 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 01:36:33,611 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 01:36:33,615 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:36:33,615 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-02-08 01:36:33,616 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:36:33,616 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:36:33,628 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:36:33,628 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 01:36:33,629 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:36:33,629 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:36:33,631 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 01:36:34,159 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-02-08 01:36:34,163 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:36:34,163 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), 'YES')
2020-02-08 01:36:34,164 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-02-08 01:36:34,165 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:36:34,165 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:36:34,166 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:34,166 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:34,167 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:36:34,167 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:36:34,170 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:36:34,173 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:36:34,174 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), 'NO')
2020-02-08 01:36:34,174 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:36:34,174 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:34,175 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:36:34,175 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:36:34,178 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:36:34,178 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0))
2020-02-08 01:36:34,178 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:34,179 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:36:34,182 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:36:34,182 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:36:34,183 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:34,183 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:34,187 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:36:34,188 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:36:34,188 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0))
2020-02-08 01:36:34,188 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:36:34,191 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:36:34,191 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:34,191 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:36:34,192 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-02-08 01:36:34,194 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:34,194 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:36:34,194 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:36:34,195 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-02-08 01:36:41,576 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-02-08 01:36:41,577 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:36:41,577 INFO sqlalchemy.engine.base.Engine Thread-22 : (71,)
2020-02-08 01:36:41,578 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:36:41,578 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:36:41,578 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:36:41,578 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:36:41,580 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:36:41,580 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-02-08 01:36:41,581 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:36:41,581 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:36:41,585 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:36:41,585 INFO sqlalchemy.engine.base.Engine Thread-22 : ('philip', 1, 1)
2020-02-08 01:36:41,586 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:36:41,586 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:36:41,588 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-02-08 01:36:45,973 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-02-08 01:36:45,974 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:36:45,974 INFO sqlalchemy.engine.base.Engine Thread-31 : (71,)
2020-02-08 01:36:45,975 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:36:45,975 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:36:45,975 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:36:45,975 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:36:45,982 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:36:45,982 INFO sqlalchemy.engine.base.Engine Thread-31 : (' ', '%c%', ' ', '%h%', ' ', '%r%', ' ', '%i%', ' ', '%s%', ' ', '%t%', ' ', '%m%', ' ', '%a%', ' ', '%s%', ' ', '% %', ' ', '%t%', ' ', '%e%', ' ', '%s%', ' ', '%t%')
2020-02-08 01:36:45,983 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:36:45,983 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45))
2020-02-08 01:36:45,984 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (8, 'Easter Holiday', 'Easter Holiday', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45))
2020-02-08 01:36:45,984 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (9, 'May Day', 'May Day Holiday', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45))
2020-02-08 01:36:45,984 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (10, 'Late May Holiday', 'Late May Holiday', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45))
2020-02-08 01:36:45,984 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:36:45,984 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (12, 'Boxing Day', 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45))
2020-02-08 01:36:45,984 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (13, 'Boxing Day Holiday', 'Boxing Day Holiday', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45))
2020-02-08 01:36:45,984 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (15, 'Summer Change Freeze', 'Summer Change Freeze', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45))
2020-02-08 01:36:45,984 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:36:45,984 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (19, 'Change Freeze RED', '', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45))
2020-02-08 01:36:45,993 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:36:45,993 INFO sqlalchemy.engine.base.Engine Thread-31 : (' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%', ' ', '%christmas test%')
2020-02-08 01:36:45,994 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:36:45,996 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:36:45,996 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-02-08 01:36:45,996 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:36:45,997 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:36:46,001 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:36:46,001 INFO sqlalchemy.engine.base.Engine Thread-31 : ('philip', 1, 1)
2020-02-08 01:36:46,002 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:36:46,002 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:36:46,005 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-02-08 01:36:53,279 INFO sqlalchemy.engine.base.Engine Thread-40 : BEGIN (implicit)
2020-02-08 01:36:53,282 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 01:36:53,282 INFO sqlalchemy.engine.base.Engine Thread-40 : ()
2020-02-08 01:36:53,283 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 01:36:53,283 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 01:36:53,283 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 01:36:53,286 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:36:53,286 INFO sqlalchemy.engine.base.Engine Thread-40 : (1, 1)
2020-02-08 01:36:53,286 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:36:53,287 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:36:53,290 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:36:53,291 INFO sqlalchemy.engine.base.Engine Thread-40 : ('philip', 1, 1)
2020-02-08 01:36:53,291 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:36:53,291 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:36:53,293 INFO sqlalchemy.engine.base.Engine Thread-40 : ROLLBACK
2020-02-08 01:36:53,731 INFO sqlalchemy.engine.base.Engine Thread-49 : BEGIN (implicit)
2020-02-08 01:36:53,738 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:36:53,738 INFO sqlalchemy.engine.base.Engine Thread-49 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:36:53,742 INFO sqlalchemy.engine.base.Engine Thread-50 : BEGIN (implicit)
2020-02-08 01:36:53,744 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:36:53,744 INFO sqlalchemy.engine.base.Engine Thread-50 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'YES')
2020-02-08 01:36:53,745 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:53,745 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:53,745 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:36:53,745 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45), 'May Day', 'May Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:36:53,748 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:36:53,749 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45), 'Change Freeze RED', '', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:36:53,749 INFO sqlalchemy.engine.base.Engine Thread-49 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:36:53,754 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:36:53,754 INFO sqlalchemy.engine.base.Engine Thread-50 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), 'NO')
2020-02-08 01:36:53,755 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:53,755 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:36:53,758 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:36:53,758 INFO sqlalchemy.engine.base.Engine Thread-49 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:36:53,759 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:53,759 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:53,759 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Row (datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45), 'Easter Holiday', 'Easter Holiday', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:36:53,759 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:36:53,763 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:36:53,763 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:36:53,763 INFO sqlalchemy.engine.base.Engine Thread-50 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-02-08 01:36:53,766 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:36:53,766 INFO sqlalchemy.engine.base.Engine Thread-49 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:36:53,767 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:53,770 INFO sqlalchemy.engine.base.Engine Thread-50 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:36:53,770 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:53,770 INFO sqlalchemy.engine.base.Engine Thread-50 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0), datetime.datetime(2020, 3, 30, 0, 0), datetime.datetime(2020, 5, 11, 0, 0))
2020-02-08 01:36:53,771 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:36:53,771 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:36:53,772 INFO sqlalchemy.engine.base.Engine Thread-49 : ROLLBACK
2020-02-08 01:36:53,772 DEBUG sqlalchemy.engine.base.Engine Thread-50 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:36:53,773 INFO sqlalchemy.engine.base.Engine Thread-50 : ROLLBACK
2020-02-08 01:38:36,991 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 01:38:36,991 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:38:36,992 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:38:36,993 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 01:38:36,993 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 01:38:36,993 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:38:36,994 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:38:36,994 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 01:38:36,995 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 01:38:36,995 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:38:36,995 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 01:38:36,995 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 01:38:36,995 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 01:38:36,995 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:38:36,996 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 01:38:36,996 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 01:38:36,997 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 01:38:36,997 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:38:36,998 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 01:38:36,998 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:38:36,998 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 01:38:36,998 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:38:36,999 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 01:38:37,000 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:38:37,001 INFO sqlalchemy.engine.base.Engine Thread-2 : (71,)
2020-02-08 01:38:37,001 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:38:37,002 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:38:37,002 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:38:37,002 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:38:37,006 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:38:37,006 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 01:38:37,007 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:38:37,007 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:38:37,080 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:38:37,081 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 01:38:37,081 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:38:37,082 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:38:37,083 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 01:38:48,031 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 01:38:48,032 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:38:48,032 INFO sqlalchemy.engine.base.Engine Thread-11 : (71,)
2020-02-08 01:38:48,033 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:38:48,033 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:38:48,033 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:38:48,033 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:38:48,040 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:38:48,041 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%t%', ' ', '%e%', ' ', '%s%', ' ', '%t%', ' ', '% %', ' ', '%C%', ' ', '%h%', ' ', '%r%', ' ', '%i%', ' ', '%s%', ' ', '%t%', ' ', '%m%', ' ', '%a%', ' ', '%s%')
2020-02-08 01:38:48,042 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:38:48,042 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45))
2020-02-08 01:38:48,042 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (8, 'Easter Holiday', 'Easter Holiday', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45))
2020-02-08 01:38:48,042 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (9, 'May Day', 'May Day Holiday', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45))
2020-02-08 01:38:48,042 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (10, 'Late May Holiday', 'Late May Holiday', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45))
2020-02-08 01:38:48,042 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:38:48,042 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (12, 'Boxing Day', 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45))
2020-02-08 01:38:48,042 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (13, 'Boxing Day Holiday', 'Boxing Day Holiday', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45))
2020-02-08 01:38:48,042 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (15, 'Summer Change Freeze', 'Summer Change Freeze', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45))
2020-02-08 01:38:48,043 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:38:48,043 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (19, 'Change Freeze RED', '', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45))
2020-02-08 01:38:48,052 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:38:48,053 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%', ' ', '%test Christmas%')
2020-02-08 01:38:48,054 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:38:48,056 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:38:48,056 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-02-08 01:38:48,056 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:38:48,057 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:38:48,060 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:38:48,061 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 01:38:48,061 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:38:48,061 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:38:48,064 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 01:39:38,325 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-02-08 01:39:38,326 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:39:38,326 INFO sqlalchemy.engine.base.Engine Thread-20 : (71,)
2020-02-08 01:39:38,327 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:39:38,328 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:39:38,328 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:39:38,328 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:39:38,333 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:39:38,333 INFO sqlalchemy.engine.base.Engine Thread-20 : (' ', '%C%', ' ', '%h%', ' ', '%r%', ' ', '%i%', ' ', '%s%', ' ', '%t%', ' ', '%m%', ' ', '%a%', ' ', '%s%')
2020-02-08 01:39:38,334 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:39:38,334 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45))
2020-02-08 01:39:38,334 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (8, 'Easter Holiday', 'Easter Holiday', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45))
2020-02-08 01:39:38,334 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (9, 'May Day', 'May Day Holiday', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45))
2020-02-08 01:39:38,334 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (10, 'Late May Holiday', 'Late May Holiday', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45))
2020-02-08 01:39:38,334 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:39:38,334 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (12, 'Boxing Day', 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45))
2020-02-08 01:39:38,334 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (13, 'Boxing Day Holiday', 'Boxing Day Holiday', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45))
2020-02-08 01:39:38,335 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (15, 'Summer Change Freeze', 'Summer Change Freeze', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45))
2020-02-08 01:39:38,335 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:39:38,335 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (19, 'Change Freeze RED', '', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45))
2020-02-08 01:39:38,342 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:39:38,342 INFO sqlalchemy.engine.base.Engine Thread-20 : (' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%')
2020-02-08 01:39:38,342 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:39:38,344 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:39:38,344 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-02-08 01:39:38,345 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:39:38,345 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:39:38,350 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:39:38,350 INFO sqlalchemy.engine.base.Engine Thread-20 : ('philip', 1, 1)
2020-02-08 01:39:38,350 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:39:38,351 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:39:38,353 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-02-08 01:40:44,571 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 01:40:44,571 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:40:44,573 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:40:44,573 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 01:40:44,574 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 01:40:44,574 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:40:44,574 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:40:44,574 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 01:40:44,575 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 01:40:44,575 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:40:44,575 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 01:40:44,575 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 01:40:44,575 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 01:40:44,576 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:40:44,576 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 01:40:44,576 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 01:40:44,577 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 01:40:44,577 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:40:44,578 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 01:40:44,578 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:40:44,578 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 01:40:44,579 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:40:44,579 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 01:40:44,581 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:40:44,581 INFO sqlalchemy.engine.base.Engine Thread-2 : (71,)
2020-02-08 01:40:44,581 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:40:44,582 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:40:44,582 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:40:44,582 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:40:44,589 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:40:44,589 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%C%', ' ', '%h%', ' ', '%r%', ' ', '%i%', ' ', '%s%', ' ', '%t%', ' ', '%m%', ' ', '%a%', ' ', '%s%')
2020-02-08 01:40:44,590 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:40:44,590 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45))
2020-02-08 01:40:44,590 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 'Easter Holiday', 'Easter Holiday', datetime.datetime(2020, 4, 10, 0, 0), datetime.datetime(2020, 4, 13, 23, 45))
2020-02-08 01:40:44,590 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 'May Day', 'May Day Holiday', datetime.datetime(2020, 5, 8, 0, 0), datetime.datetime(2020, 5, 8, 23, 45))
2020-02-08 01:40:44,590 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (10, 'Late May Holiday', 'Late May Holiday', datetime.datetime(2020, 5, 25, 0, 0), datetime.datetime(2020, 5, 25, 23, 45))
2020-02-08 01:40:44,590 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:40:44,591 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 'Boxing Day', 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45))
2020-02-08 01:40:44,591 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 'Boxing Day Holiday', 'Boxing Day Holiday', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45))
2020-02-08 01:40:44,591 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (15, 'Summer Change Freeze', 'Summer Change Freeze', datetime.datetime(2020, 7, 23, 0, 0), datetime.datetime(2020, 7, 25, 23, 45))
2020-02-08 01:40:44,591 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:40:44,591 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (19, 'Change Freeze RED', '', datetime.datetime(2020, 4, 14, 0, 0), datetime.datetime(2020, 4, 14, 23, 45))
2020-02-08 01:40:44,599 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:40:44,599 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%', ' ', '%Christmas%')
2020-02-08 01:40:44,600 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:40:44,604 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:40:44,604 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 01:40:44,605 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:40:44,605 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:40:44,677 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:40:44,677 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 01:40:44,678 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:40:44,678 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:40:44,681 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 01:42:14,592 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 01:42:14,592 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:42:14,593 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:42:14,594 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 01:42:14,594 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 01:42:14,595 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:42:14,595 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:42:14,595 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 01:42:14,596 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 01:42:14,596 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:42:14,596 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 01:42:14,596 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 01:42:14,597 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 01:42:14,597 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:42:14,597 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 01:42:14,598 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 01:42:14,598 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 01:42:14,598 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:42:14,599 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 01:42:14,599 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:42:14,600 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 01:42:14,600 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:42:14,601 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 01:42:14,602 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:42:14,602 INFO sqlalchemy.engine.base.Engine Thread-2 : (71,)
2020-02-08 01:42:14,603 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:42:14,603 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:42:14,603 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:42:14,604 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:42:14,609 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:42:14,609 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%Christmas%')
2020-02-08 01:42:14,610 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:42:14,610 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:42:14,615 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:42:14,615 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%Christmas%')
2020-02-08 01:42:14,616 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:42:14,620 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:42:14,620 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 01:42:14,620 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:42:14,621 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:42:14,696 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:42:14,696 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 01:42:14,697 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:42:14,697 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:42:14,699 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 01:42:22,031 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 01:42:22,032 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:42:22,032 INFO sqlalchemy.engine.base.Engine Thread-11 : (71,)
2020-02-08 01:42:22,033 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:42:22,033 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:42:22,033 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:42:22,034 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:42:22,037 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:42:22,037 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%test%')
2020-02-08 01:42:22,038 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:42:22,038 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:42:22,042 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:42:22,042 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%test%')
2020-02-08 01:42:22,042 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:42:22,043 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:42:22,043 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:42:22,043 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:42:22,043 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:42:22,043 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:42:22,045 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:42:22,045 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-02-08 01:42:22,046 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:42:22,046 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:42:22,050 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:42:22,050 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 01:42:22,051 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:42:22,051 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:42:22,054 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 01:42:26,060 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-02-08 01:42:26,061 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:42:26,061 INFO sqlalchemy.engine.base.Engine Thread-20 : (71,)
2020-02-08 01:42:26,062 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:42:26,062 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:42:26,062 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:42:26,062 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:42:26,068 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:42:26,068 INFO sqlalchemy.engine.base.Engine Thread-20 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 01:42:26,068 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:42:26,069 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:42:26,069 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:42:26,072 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:42:26,073 INFO sqlalchemy.engine.base.Engine Thread-20 : (' ', '%test Christmas%', ' ', '%test Christmas%')
2020-02-08 01:42:26,073 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:42:26,076 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:42:26,076 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-02-08 01:42:26,076 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:42:26,077 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:42:26,082 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:42:26,082 INFO sqlalchemy.engine.base.Engine Thread-20 : ('philip', 1, 1)
2020-02-08 01:42:26,083 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:42:26,083 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:42:26,086 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-02-08 01:42:33,533 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-02-08 01:42:33,534 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:42:33,534 INFO sqlalchemy.engine.base.Engine Thread-29 : (71,)
2020-02-08 01:42:33,535 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:42:33,535 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:42:33,535 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:42:33,535 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:42:33,538 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:42:33,538 INFO sqlalchemy.engine.base.Engine Thread-29 : (' ', '%test%')
2020-02-08 01:42:33,539 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:42:33,539 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:42:33,543 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:42:33,543 INFO sqlalchemy.engine.base.Engine Thread-29 : (' ', '%test%')
2020-02-08 01:42:33,544 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:42:33,544 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:42:33,544 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:42:33,544 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:42:33,544 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:42:33,544 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:42:33,546 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:42:33,546 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-02-08 01:42:33,547 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:42:33,547 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:42:33,551 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:42:33,551 INFO sqlalchemy.engine.base.Engine Thread-29 : ('philip', 1, 1)
2020-02-08 01:42:33,552 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:42:33,552 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:42:33,554 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-02-08 01:42:47,192 INFO sqlalchemy.engine.base.Engine Thread-38 : BEGIN (implicit)
2020-02-08 01:42:47,193 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:42:47,193 INFO sqlalchemy.engine.base.Engine Thread-38 : (71,)
2020-02-08 01:42:47,194 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:42:47,194 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:42:47,194 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:42:47,194 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:42:47,198 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:42:47,198 INFO sqlalchemy.engine.base.Engine Thread-38 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 01:42:47,199 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:42:47,199 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:42:47,199 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:42:47,203 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:42:47,203 INFO sqlalchemy.engine.base.Engine Thread-38 : (' ', '%test Christmas%', ' ', '%test Christmas%')
2020-02-08 01:42:47,204 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:42:47,205 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:42:47,206 INFO sqlalchemy.engine.base.Engine Thread-38 : (1, 1)
2020-02-08 01:42:47,206 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:42:47,206 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:42:47,210 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:42:47,210 INFO sqlalchemy.engine.base.Engine Thread-38 : ('philip', 1, 1)
2020-02-08 01:42:47,211 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:42:47,211 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:42:47,213 INFO sqlalchemy.engine.base.Engine Thread-38 : ROLLBACK
2020-02-08 01:43:11,718 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-02-08 01:43:11,725 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 01:43:11,725 INFO sqlalchemy.engine.base.Engine Thread-47 : ()
2020-02-08 01:43:11,727 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 01:43:11,728 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 01:43:11,728 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 01:43:11,730 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:43:11,730 INFO sqlalchemy.engine.base.Engine Thread-47 : (1, 1)
2020-02-08 01:43:11,731 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:43:11,731 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:43:11,743 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:43:11,744 INFO sqlalchemy.engine.base.Engine Thread-47 : ('philip', 1, 1)
2020-02-08 01:43:11,744 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:43:11,745 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:43:11,746 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-02-08 01:43:12,305 INFO sqlalchemy.engine.base.Engine Thread-56 : BEGIN (implicit)
2020-02-08 01:43:12,307 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:12,307 INFO sqlalchemy.engine.base.Engine Thread-56 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:43:12,308 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:12,308 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:43:12,312 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:12,312 INFO sqlalchemy.engine.base.Engine Thread-56 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:43:12,313 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:12,313 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:43:12,317 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:43:12,317 INFO sqlalchemy.engine.base.Engine Thread-56 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:43:12,318 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:12,318 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:43:12,318 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:43:12,321 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:43:12,322 INFO sqlalchemy.engine.base.Engine Thread-56 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:43:12,322 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:12,322 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:43:12,322 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:43:12,323 INFO sqlalchemy.engine.base.Engine Thread-56 : ROLLBACK
2020-02-08 01:43:12,346 INFO sqlalchemy.engine.base.Engine Thread-57 : BEGIN (implicit)
2020-02-08 01:43:12,347 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:12,347 INFO sqlalchemy.engine.base.Engine Thread-57 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:43:12,348 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:12,348 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:43:12,351 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:12,351 INFO sqlalchemy.engine.base.Engine Thread-57 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:43:12,352 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:12,352 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:43:12,355 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:43:12,355 INFO sqlalchemy.engine.base.Engine Thread-57 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:43:12,356 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:12,356 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:43:12,356 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:43:12,359 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:43:12,360 INFO sqlalchemy.engine.base.Engine Thread-57 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:43:12,360 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:12,360 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:43:12,361 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:43:12,361 INFO sqlalchemy.engine.base.Engine Thread-57 : ROLLBACK
2020-02-08 01:43:18,533 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-02-08 01:43:18,535 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 01:43:18,536 INFO sqlalchemy.engine.base.Engine Thread-58 : ()
2020-02-08 01:43:18,537 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 01:43:18,537 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 01:43:18,537 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 01:43:18,540 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:43:18,540 INFO sqlalchemy.engine.base.Engine Thread-58 : (1, 1)
2020-02-08 01:43:18,541 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:43:18,543 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:43:18,547 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:43:18,547 INFO sqlalchemy.engine.base.Engine Thread-58 : ('philip', 1, 1)
2020-02-08 01:43:18,548 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:43:18,548 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:43:18,549 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-02-08 01:43:19,014 INFO sqlalchemy.engine.base.Engine Thread-67 : BEGIN (implicit)
2020-02-08 01:43:19,015 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:19,015 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:43:19,016 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:19,017 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:43:19,020 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:19,020 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:43:19,021 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:19,021 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:43:19,024 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:43:19,024 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:43:19,025 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:19,025 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:43:19,025 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:43:19,028 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:43:19,028 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:43:19,029 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:19,029 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:43:19,029 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:43:19,030 INFO sqlalchemy.engine.base.Engine Thread-67 : ROLLBACK
2020-02-08 01:43:19,052 INFO sqlalchemy.engine.base.Engine Thread-68 : BEGIN (implicit)
2020-02-08 01:43:19,053 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:19,053 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:43:19,054 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:19,054 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:43:19,057 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:19,058 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:43:19,058 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:19,059 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:43:19,062 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:43:19,062 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:43:19,063 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:19,063 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:43:19,063 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:43:19,067 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:43:19,067 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:43:19,068 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:19,068 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:43:19,068 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:43:19,069 INFO sqlalchemy.engine.base.Engine Thread-68 : ROLLBACK
2020-02-08 01:43:31,405 INFO sqlalchemy.engine.base.Engine Thread-69 : BEGIN (implicit)
2020-02-08 01:43:31,408 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 01:43:31,408 INFO sqlalchemy.engine.base.Engine Thread-69 : ()
2020-02-08 01:43:31,410 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 01:43:31,410 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 01:43:31,410 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 01:43:31,413 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:43:31,413 INFO sqlalchemy.engine.base.Engine Thread-69 : (1, 1)
2020-02-08 01:43:31,414 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:43:31,414 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:43:31,418 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:43:31,419 INFO sqlalchemy.engine.base.Engine Thread-69 : ('philip', 1, 1)
2020-02-08 01:43:31,419 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:43:31,419 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:43:31,421 INFO sqlalchemy.engine.base.Engine Thread-69 : ROLLBACK
2020-02-08 01:43:31,882 INFO sqlalchemy.engine.base.Engine Thread-78 : BEGIN (implicit)
2020-02-08 01:43:31,885 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:31,890 INFO sqlalchemy.engine.base.Engine Thread-78 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:43:31,895 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:31,895 INFO sqlalchemy.engine.base.Engine Thread-79 : BEGIN (implicit)
2020-02-08 01:43:31,895 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:43:31,897 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:31,900 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:31,901 INFO sqlalchemy.engine.base.Engine Thread-79 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), 'YES')
2020-02-08 01:43:31,901 INFO sqlalchemy.engine.base.Engine Thread-78 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:43:31,902 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:31,902 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:43:31,905 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:43:31,906 INFO sqlalchemy.engine.base.Engine Thread-78 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:43:31,906 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:31,906 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:43:31,910 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:43:31,910 INFO sqlalchemy.engine.base.Engine Thread-79 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), 'NO')
2020-02-08 01:43:31,910 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:31,911 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:31,911 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:43:31,911 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:43:31,911 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:43:31,912 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:43:31,915 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:43:31,918 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:43:31,918 INFO sqlalchemy.engine.base.Engine Thread-78 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:43:31,918 INFO sqlalchemy.engine.base.Engine Thread-79 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0))
2020-02-08 01:43:31,919 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:31,922 INFO sqlalchemy.engine.base.Engine Thread-79 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:43:31,923 INFO sqlalchemy.engine.base.Engine Thread-79 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0))
2020-02-08 01:43:31,923 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:31,923 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:43:31,923 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:43:31,924 INFO sqlalchemy.engine.base.Engine Thread-78 : ROLLBACK
2020-02-08 01:43:31,924 DEBUG sqlalchemy.engine.base.Engine Thread-79 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:43:31,925 INFO sqlalchemy.engine.base.Engine Thread-79 : ROLLBACK
2020-02-08 01:43:42,577 INFO sqlalchemy.engine.base.Engine Thread-80 : BEGIN (implicit)
2020-02-08 01:43:42,578 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:43:42,578 INFO sqlalchemy.engine.base.Engine Thread-80 : (71,)
2020-02-08 01:43:42,578 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:43:42,579 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:43:42,579 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:43:42,579 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:43:42,582 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:43:42,582 INFO sqlalchemy.engine.base.Engine Thread-80 : (' ', '%test%', ' ', '%Boxing%')
2020-02-08 01:43:42,583 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:43:42,583 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (12, 'Boxing Day', 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45))
2020-02-08 01:43:42,584 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (13, 'Boxing Day Holiday', 'Boxing Day Holiday', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45))
2020-02-08 01:43:42,584 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:43:42,588 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:43:42,588 INFO sqlalchemy.engine.base.Engine Thread-80 : (' ', '%test Boxing%', ' ', '%test Boxing%')
2020-02-08 01:43:42,588 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:43:42,590 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:43:42,590 INFO sqlalchemy.engine.base.Engine Thread-80 : (1, 1)
2020-02-08 01:43:42,591 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:43:42,591 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:43:42,595 INFO sqlalchemy.engine.base.Engine Thread-80 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:43:42,595 INFO sqlalchemy.engine.base.Engine Thread-80 : ('philip', 1, 1)
2020-02-08 01:43:42,596 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:43:42,596 DEBUG sqlalchemy.engine.base.Engine Thread-80 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:43:42,597 INFO sqlalchemy.engine.base.Engine Thread-80 : ROLLBACK
2020-02-08 01:43:52,441 INFO sqlalchemy.engine.base.Engine Thread-89 : BEGIN (implicit)
2020-02-08 01:43:52,442 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:43:52,442 INFO sqlalchemy.engine.base.Engine Thread-89 : (71,)
2020-02-08 01:43:52,443 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:43:52,443 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:43:52,443 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:43:52,444 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:43:52,447 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:43:52,447 INFO sqlalchemy.engine.base.Engine Thread-89 : (' ', '%test%')
2020-02-08 01:43:52,448 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:43:52,448 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:43:52,452 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:43:52,452 INFO sqlalchemy.engine.base.Engine Thread-89 : (' ', '%test%')
2020-02-08 01:43:52,453 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:43:52,453 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:43:52,453 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:43:52,453 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:43:52,453 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:43:52,454 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:43:52,456 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:43:52,456 INFO sqlalchemy.engine.base.Engine Thread-89 : (1, 1)
2020-02-08 01:43:52,456 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:43:52,457 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:43:52,461 INFO sqlalchemy.engine.base.Engine Thread-89 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:43:52,461 INFO sqlalchemy.engine.base.Engine Thread-89 : ('philip', 1, 1)
2020-02-08 01:43:52,462 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:43:52,462 DEBUG sqlalchemy.engine.base.Engine Thread-89 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:43:52,464 INFO sqlalchemy.engine.base.Engine Thread-89 : ROLLBACK
2020-02-08 01:44:44,497 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 01:44:44,498 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:44:44,499 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:44:44,499 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 01:44:44,500 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 01:44:44,500 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:44:44,500 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:44:44,500 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 01:44:44,501 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 01:44:44,501 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:44:44,501 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 01:44:44,501 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 01:44:44,501 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 01:44:44,501 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:44:44,502 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 01:44:44,502 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 01:44:44,503 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 01:44:44,503 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:44:44,504 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 01:44:44,504 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:44:44,504 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 01:44:44,504 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:44:44,505 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 01:44:44,506 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:44:44,506 INFO sqlalchemy.engine.base.Engine Thread-2 : (71,)
2020-02-08 01:44:44,507 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:44:44,507 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:44:44,507 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:44:44,507 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:44:44,511 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:44:44,511 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%test%')
2020-02-08 01:44:44,512 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:44:44,512 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:44:44,518 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:44:44,519 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%test%')
2020-02-08 01:44:44,520 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:44:44,520 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:44:44,520 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:44:44,520 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:44:44,520 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:44:44,520 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:44:44,524 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:44:44,524 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 01:44:44,525 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:44:44,526 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:44:44,603 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:44:44,603 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 01:44:44,604 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:44:44,604 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:44:44,607 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 01:44:47,875 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 01:44:47,875 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:44:47,875 INFO sqlalchemy.engine.base.Engine Thread-11 : (71,)
2020-02-08 01:44:47,876 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:44:47,877 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:44:47,877 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:44:47,877 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:44:47,881 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:44:47,881 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 01:44:47,881 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:44:47,882 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:44:47,882 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:44:47,886 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) AND lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:44:47,886 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%test Christmas%', ' ', '%test Christmas%')
2020-02-08 01:44:47,887 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:44:47,889 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:44:47,889 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-02-08 01:44:47,889 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:44:47,890 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:44:47,895 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:44:47,895 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 01:44:47,895 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:44:47,896 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:44:47,898 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 01:45:12,836 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 01:45:12,836 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:45:12,837 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:45:12,838 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 01:45:12,838 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 01:45:12,838 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:45:12,839 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:45:12,839 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 01:45:12,839 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 01:45:12,839 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:45:12,839 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 01:45:12,840 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 01:45:12,840 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 01:45:12,840 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:45:12,841 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 01:45:12,841 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 01:45:12,841 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 01:45:12,842 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:45:12,842 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 01:45:12,842 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:45:12,843 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 01:45:12,843 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:45:12,844 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 01:45:12,845 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:45:12,845 INFO sqlalchemy.engine.base.Engine Thread-2 : (71,)
2020-02-08 01:45:12,846 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:45:12,846 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:45:12,846 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:45:12,846 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:45:12,851 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:45:12,851 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 01:45:12,852 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:45:12,853 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:45:12,853 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:45:12,858 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:45:12,858 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%test Christmas%', ' ', '%test Christmas%')
2020-02-08 01:45:12,859 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:45:12,862 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:45:12,863 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 01:45:12,863 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:45:12,863 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:45:12,935 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:45:12,935 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 01:45:12,936 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:45:12,936 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:45:12,938 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 01:45:15,070 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 01:45:15,071 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:45:15,072 INFO sqlalchemy.engine.base.Engine Thread-11 : (71,)
2020-02-08 01:45:15,072 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:45:15,073 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:45:15,073 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:45:15,073 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:45:15,077 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:45:15,077 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 01:45:15,077 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:45:15,078 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:45:15,078 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:45:15,082 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:45:15,082 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%test Christmas%', ' ', '%test Christmas%')
2020-02-08 01:45:15,083 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:45:15,085 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:45:15,085 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-02-08 01:45:15,086 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:45:15,086 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:45:15,090 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:45:15,090 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 01:45:15,091 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:45:15,091 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:45:15,093 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 01:46:11,622 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 01:46:11,622 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:46:11,624 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:46:11,624 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 01:46:11,625 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 01:46:11,625 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:46:11,625 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 01:46:11,625 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 01:46:11,626 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 01:46:11,626 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:46:11,626 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 01:46:11,626 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 01:46:11,627 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 01:46:11,627 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:46:11,628 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 01:46:11,628 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 01:46:11,628 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 01:46:11,629 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:46:11,629 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 01:46:11,629 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:46:11,630 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 01:46:11,630 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 01:46:11,631 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 01:46:11,632 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:46:11,632 INFO sqlalchemy.engine.base.Engine Thread-2 : (71,)
2020-02-08 01:46:11,633 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:46:11,633 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:46:11,633 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:46:11,633 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:46:11,638 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:46:11,638 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 01:46:11,638 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:46:11,639 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:46:11,639 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:46:11,643 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:46:11,644 INFO sqlalchemy.engine.base.Engine Thread-2 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 01:46:11,651 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:46:11,651 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:46:11,651 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:46:11,651 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:46:11,651 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:46:11,651 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:46:11,655 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:46:11,655 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 01:46:11,657 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:11,658 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:11,732 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:46:11,732 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 01:46:11,733 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:11,733 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:11,736 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 01:46:18,767 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 01:46:18,768 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:46:18,769 INFO sqlalchemy.engine.base.Engine Thread-11 : (71,)
2020-02-08 01:46:18,770 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:46:18,770 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:46:18,770 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:46:18,771 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:46:18,774 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:46:18,774 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%test%', ' ', '%Christmas%', ' ', '%feb%')
2020-02-08 01:46:18,775 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:46:18,775 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:46:18,775 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:46:18,779 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:46:18,780 INFO sqlalchemy.engine.base.Engine Thread-11 : (' ', '%test%', ' ', '%Christmas%', ' ', '%feb%')
2020-02-08 01:46:18,780 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:46:18,780 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:46:18,780 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:46:18,781 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:46:18,781 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:46:18,781 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:46:18,783 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:46:18,783 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-02-08 01:46:18,783 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:18,784 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:18,788 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:46:18,788 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 01:46:18,789 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:18,789 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:18,791 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 01:46:24,609 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-02-08 01:46:24,610 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:46:24,610 INFO sqlalchemy.engine.base.Engine Thread-20 : (71,)
2020-02-08 01:46:24,611 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:46:24,611 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:46:24,612 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:46:24,612 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:46:24,617 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:46:24,617 INFO sqlalchemy.engine.base.Engine Thread-20 : (' ', '%test%', ' ', '%feb%')
2020-02-08 01:46:24,618 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:46:24,618 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 01:46:24,622 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:46:24,622 INFO sqlalchemy.engine.base.Engine Thread-20 : (' ', '%test%', ' ', '%feb%')
2020-02-08 01:46:24,623 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:46:24,623 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 01:46:24,623 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 01:46:24,623 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 01:46:24,623 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 01:46:24,624 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 01:46:24,625 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:46:24,625 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-02-08 01:46:24,626 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:24,626 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:24,630 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:46:24,630 INFO sqlalchemy.engine.base.Engine Thread-20 : ('philip', 1, 1)
2020-02-08 01:46:24,631 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:24,631 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:24,633 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-02-08 01:46:29,517 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-02-08 01:46:29,524 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 01:46:29,524 INFO sqlalchemy.engine.base.Engine Thread-29 : ()
2020-02-08 01:46:29,525 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 01:46:29,526 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 01:46:29,526 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 01:46:29,528 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:46:29,528 INFO sqlalchemy.engine.base.Engine Thread-29 : (1, 1)
2020-02-08 01:46:29,529 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:29,529 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:29,541 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:46:29,541 INFO sqlalchemy.engine.base.Engine Thread-29 : ('philip', 1, 1)
2020-02-08 01:46:29,542 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:29,542 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:29,544 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-02-08 01:46:30,034 INFO sqlalchemy.engine.base.Engine Thread-38 : BEGIN (implicit)
2020-02-08 01:46:30,036 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:46:30,036 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:46:30,037 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:30,038 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:46:30,041 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:46:30,041 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:46:30,042 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:30,042 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:46:30,045 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:46:30,045 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:46:30,046 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:30,046 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:46:30,046 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:46:30,049 INFO sqlalchemy.engine.base.Engine Thread-38 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:46:30,049 INFO sqlalchemy.engine.base.Engine Thread-38 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:46:30,050 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:30,050 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:46:30,050 DEBUG sqlalchemy.engine.base.Engine Thread-38 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:46:30,051 INFO sqlalchemy.engine.base.Engine Thread-38 : ROLLBACK
2020-02-08 01:46:30,070 INFO sqlalchemy.engine.base.Engine Thread-39 : BEGIN (implicit)
2020-02-08 01:46:30,071 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:46:30,072 INFO sqlalchemy.engine.base.Engine Thread-39 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:46:30,072 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:30,073 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:46:30,076 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:46:30,076 INFO sqlalchemy.engine.base.Engine Thread-39 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:46:30,077 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:30,077 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:46:30,080 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:46:30,080 INFO sqlalchemy.engine.base.Engine Thread-39 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:46:30,081 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:30,081 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:46:30,081 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:46:30,084 INFO sqlalchemy.engine.base.Engine Thread-39 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:46:30,084 INFO sqlalchemy.engine.base.Engine Thread-39 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:46:30,085 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:30,085 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:46:30,085 DEBUG sqlalchemy.engine.base.Engine Thread-39 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:46:30,086 INFO sqlalchemy.engine.base.Engine Thread-39 : ROLLBACK
2020-02-08 01:46:40,017 INFO sqlalchemy.engine.base.Engine Thread-40 : BEGIN (implicit)
2020-02-08 01:46:40,017 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:46:40,018 INFO sqlalchemy.engine.base.Engine Thread-40 : (71,)
2020-02-08 01:46:40,018 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:46:40,019 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:46:40,019 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:46:40,019 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:46:40,021 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:46:40,021 INFO sqlalchemy.engine.base.Engine Thread-40 : (1, 1)
2020-02-08 01:46:40,021 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:40,022 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:40,026 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:46:40,026 INFO sqlalchemy.engine.base.Engine Thread-40 : ('philip', 1, 1)
2020-02-08 01:46:40,027 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:40,027 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:40,029 INFO sqlalchemy.engine.base.Engine Thread-40 : ROLLBACK
2020-02-08 01:46:47,819 INFO sqlalchemy.engine.base.Engine Thread-49 : BEGIN (implicit)
2020-02-08 01:46:47,820 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:46:47,820 INFO sqlalchemy.engine.base.Engine Thread-49 : (71,)
2020-02-08 01:46:47,821 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:46:47,821 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:46:47,821 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:46:47,821 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:46:47,825 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 01:46:47,825 INFO sqlalchemy.engine.base.Engine Thread-49 : (' ', '%boxing%', ' ', '%christmas%')
2020-02-08 01:46:47,825 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 01:46:47,826 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 01:46:47,826 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (12, 'Boxing Day', 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45))
2020-02-08 01:46:47,826 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (13, 'Boxing Day Holiday', 'Boxing Day Holiday', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45))
2020-02-08 01:46:47,830 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 01:46:47,830 INFO sqlalchemy.engine.base.Engine Thread-49 : (' ', '%boxing%', ' ', '%christmas%')
2020-02-08 01:46:47,830 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 01:46:47,832 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:46:47,832 INFO sqlalchemy.engine.base.Engine Thread-49 : (1, 1)
2020-02-08 01:46:47,833 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:47,833 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:47,837 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:46:47,837 INFO sqlalchemy.engine.base.Engine Thread-49 : ('philip', 1, 1)
2020-02-08 01:46:47,838 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:47,838 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:47,840 INFO sqlalchemy.engine.base.Engine Thread-49 : ROLLBACK
2020-02-08 01:46:49,829 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-02-08 01:46:49,832 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 01:46:49,832 INFO sqlalchemy.engine.base.Engine Thread-58 : ()
2020-02-08 01:46:49,833 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 01:46:49,833 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 01:46:49,833 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 01:46:49,835 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:46:49,835 INFO sqlalchemy.engine.base.Engine Thread-58 : (1, 1)
2020-02-08 01:46:49,836 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:49,836 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:49,840 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:46:49,840 INFO sqlalchemy.engine.base.Engine Thread-58 : ('philip', 1, 1)
2020-02-08 01:46:49,841 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:49,841 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:49,842 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-02-08 01:46:50,281 INFO sqlalchemy.engine.base.Engine Thread-67 : BEGIN (implicit)
2020-02-08 01:46:50,287 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:46:50,287 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 01:46:50,288 INFO sqlalchemy.engine.base.Engine Thread-68 : BEGIN (implicit)
2020-02-08 01:46:50,288 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:50,290 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:46:50,290 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:46:50,290 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), 'YES')
2020-02-08 01:46:50,294 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:46:50,294 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 01:46:50,295 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:50,295 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45), 'Boxing Day Holiday', 'Boxing Day Holiday', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 01:46:50,299 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 01:46:50,299 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), 'NO')
2020-02-08 01:46:50,299 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:50,299 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:46:50,302 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:46:50,303 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:46:50,303 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:50,303 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45), 'Christmas Day', 'Christmas Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:46:50,303 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45), 'Boxing Day', 'Boxing Day', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 01:46:50,307 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 01:46:50,307 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:50,310 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:46:50,310 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 01:46:50,314 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:46:50,314 INFO sqlalchemy.engine.base.Engine Thread-67 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 01:46:50,307 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0))
2020-02-08 01:46:50,315 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:50,315 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:50,319 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 01:46:50,319 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:46:50,322 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 01:46:50,323 INFO sqlalchemy.engine.base.Engine Thread-67 : ROLLBACK
2020-02-08 01:46:50,319 INFO sqlalchemy.engine.base.Engine Thread-68 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0), datetime.datetime(2020, 11, 30, 0, 0), datetime.datetime(2021, 1, 11, 0, 0))
2020-02-08 01:46:50,324 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 01:46:50,325 INFO sqlalchemy.engine.base.Engine Thread-68 : ROLLBACK
2020-02-08 01:46:54,756 INFO sqlalchemy.engine.base.Engine Thread-69 : BEGIN (implicit)
2020-02-08 01:46:54,757 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 01:46:54,757 INFO sqlalchemy.engine.base.Engine Thread-69 : (71,)
2020-02-08 01:46:54,758 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 01:46:54,758 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 01:46:54,758 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 01:46:54,758 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 01:46:54,760 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 01:46:54,760 INFO sqlalchemy.engine.base.Engine Thread-69 : (1, 1)
2020-02-08 01:46:54,761 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:54,761 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:54,766 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 01:46:54,766 INFO sqlalchemy.engine.base.Engine Thread-69 : ('philip', 1, 1)
2020-02-08 01:46:54,767 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 01:46:54,767 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 01:46:54,769 INFO sqlalchemy.engine.base.Engine Thread-69 : ROLLBACK
2020-02-08 20:26:23,689 INFO sqlalchemy.engine.base.Engine Thread-12 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 20:26:23,689 INFO sqlalchemy.engine.base.Engine Thread-12 : ()
2020-02-08 20:26:23,691 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('Variable_name', 'Value')
2020-02-08 20:26:23,692 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row ('sql_mode', '')
2020-02-08 20:26:23,692 INFO sqlalchemy.engine.base.Engine Thread-12 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 20:26:23,692 INFO sqlalchemy.engine.base.Engine Thread-12 : ()
2020-02-08 20:26:23,693 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('Variable_name', 'Value')
2020-02-08 20:26:23,693 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row ('lower_case_table_names', '0')
2020-02-08 20:26:23,694 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT DATABASE()
2020-02-08 20:26:23,694 INFO sqlalchemy.engine.base.Engine Thread-12 : ()
2020-02-08 20:26:23,694 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('DATABASE()',)
2020-02-08 20:26:23,694 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row ('fmapp',)
2020-02-08 20:26:23,694 INFO sqlalchemy.engine.base.Engine Thread-12 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 20:26:23,694 INFO sqlalchemy.engine.base.Engine Thread-12 : ()
2020-02-08 20:26:23,695 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 20:26:23,696 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 20:26:23,696 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 20:26:23,697 INFO sqlalchemy.engine.base.Engine Thread-12 : ()
2020-02-08 20:26:23,697 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 20:26:23,697 INFO sqlalchemy.engine.base.Engine Thread-12 : ()
2020-02-08 20:26:23,698 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 20:26:23,698 INFO sqlalchemy.engine.base.Engine Thread-12 : ()
2020-02-08 20:26:23,699 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-02-08 20:26:23,700 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 20:26:23,700 INFO sqlalchemy.engine.base.Engine Thread-12 : (71,)
2020-02-08 20:26:23,701 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 20:26:23,702 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 20:26:23,702 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 20:26:23,702 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 20:26:23,707 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 20:26:23,707 INFO sqlalchemy.engine.base.Engine Thread-12 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 20:26:23,708 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 20:26:23,708 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 20:26:23,708 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 20:26:23,713 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 20:26:23,713 INFO sqlalchemy.engine.base.Engine Thread-12 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 20:26:23,714 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 20:26:23,714 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 20:26:23,715 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 20:26:23,715 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 20:26:23,715 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 20:26:23,715 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 20:26:23,719 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:26:23,719 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-02-08 20:26:23,720 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:26:23,720 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:26:23,796 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:26:23,796 INFO sqlalchemy.engine.base.Engine Thread-12 : ('philip', 1, 1)
2020-02-08 20:26:23,797 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:26:23,797 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:26:23,800 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-02-08 20:31:29,723 INFO sqlalchemy.engine.base.Engine Thread-36 : BEGIN (implicit)
2020-02-08 20:31:29,724 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 20:31:29,725 INFO sqlalchemy.engine.base.Engine Thread-36 : (71,)
2020-02-08 20:31:29,726 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 20:31:29,726 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 20:31:29,727 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 20:31:29,727 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 20:31:29,730 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 20:31:29,730 INFO sqlalchemy.engine.base.Engine Thread-36 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 20:31:29,731 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 20:31:29,731 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 20:31:29,731 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 20:31:29,737 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 20:31:29,737 INFO sqlalchemy.engine.base.Engine Thread-36 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 20:31:29,737 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 20:31:29,737 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 20:31:29,738 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 20:31:29,738 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 20:31:29,738 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 20:31:29,738 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 20:31:29,740 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:31:29,740 INFO sqlalchemy.engine.base.Engine Thread-36 : (1, 1)
2020-02-08 20:31:29,740 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:31:29,741 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:31:29,758 INFO sqlalchemy.engine.base.Engine Thread-36 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:31:29,758 INFO sqlalchemy.engine.base.Engine Thread-36 : ('philip', 1, 1)
2020-02-08 20:31:29,759 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:31:29,759 DEBUG sqlalchemy.engine.base.Engine Thread-36 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:31:29,762 INFO sqlalchemy.engine.base.Engine Thread-36 : ROLLBACK
2020-02-08 20:31:40,355 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-02-08 20:31:40,356 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 20:31:40,356 INFO sqlalchemy.engine.base.Engine Thread-45 : (71,)
2020-02-08 20:31:40,356 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 20:31:40,357 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 20:31:40,357 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 20:31:40,357 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 20:31:40,361 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 20:31:40,361 INFO sqlalchemy.engine.base.Engine Thread-45 : (' ', '%test%', ' ', '%Christmas%', ' ', '%boxing%')
2020-02-08 20:31:40,361 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 20:31:40,362 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 20:31:40,362 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (12, 'Boxing Day', 'Boxing Day', datetime.datetime(2020, 12, 26, 0, 0), datetime.datetime(2020, 12, 26, 23, 45))
2020-02-08 20:31:40,362 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (13, 'Boxing Day Holiday', 'Boxing Day Holiday', datetime.datetime(2020, 12, 28, 0, 0), datetime.datetime(2020, 12, 28, 23, 45))
2020-02-08 20:31:40,362 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 20:31:40,366 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 20:31:40,366 INFO sqlalchemy.engine.base.Engine Thread-45 : (' ', '%test%', ' ', '%Christmas%', ' ', '%boxing%')
2020-02-08 20:31:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 20:31:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 20:31:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 20:31:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 20:31:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 20:31:40,367 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 20:31:40,369 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:31:40,369 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-02-08 20:31:40,369 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:31:40,370 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:31:40,373 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:31:40,374 INFO sqlalchemy.engine.base.Engine Thread-45 : ('philip', 1, 1)
2020-02-08 20:31:40,374 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:31:40,374 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:31:40,377 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-02-08 20:34:23,004 INFO sqlalchemy.engine.base.Engine Thread-54 : BEGIN (implicit)
2020-02-08 20:34:23,010 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes
2020-02-08 20:34:23,011 INFO sqlalchemy.engine.base.Engine Thread-54 : ()
2020-02-08 20:34:23,012 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 20:34:23,013 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 20:34:23,013 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 20:34:23,016 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:34:23,017 INFO sqlalchemy.engine.base.Engine Thread-54 : (1, 1)
2020-02-08 20:34:23,017 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:23,017 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:23,032 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:34:23,032 INFO sqlalchemy.engine.base.Engine Thread-54 : ('philip', 1, 1)
2020-02-08 20:34:23,033 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:23,033 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:23,035 INFO sqlalchemy.engine.base.Engine Thread-54 : ROLLBACK
2020-02-08 20:34:23,685 INFO sqlalchemy.engine.base.Engine Thread-63 : BEGIN (implicit)
2020-02-08 20:34:23,686 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:34:23,686 INFO sqlalchemy.engine.base.Engine Thread-63 : (1, 1)
2020-02-08 20:34:23,687 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:23,687 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:23,688 INFO sqlalchemy.engine.base.Engine Thread-63 : ROLLBACK
2020-02-08 20:34:23,692 INFO sqlalchemy.engine.base.Engine Thread-64 : BEGIN (implicit)
2020-02-08 20:34:23,693 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:34:23,693 INFO sqlalchemy.engine.base.Engine Thread-64 : (1, 1)
2020-02-08 20:34:23,693 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:23,694 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:23,695 INFO sqlalchemy.engine.base.Engine Thread-64 : ROLLBACK
2020-02-08 20:34:25,406 INFO sqlalchemy.engine.base.Engine Thread-65 : BEGIN (implicit)
2020-02-08 20:34:25,406 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.id ASC
2020-02-08 20:34:25,406 INFO sqlalchemy.engine.base.Engine Thread-65 : (113,)
2020-02-08 20:34:25,407 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('parameters_param_name', 'parameters_param_value')
2020-02-08 20:34:25,407 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row ('1. Logging in & Registration', 'To register, click on the link called "Register for access to secFBA".  <br/>Fill in the fields as required and press Register to submit the request.  <br/>Once the request is received, the team managing user requests will approve the access to allow you to login and start booking changes.')
2020-02-08 20:34:25,407 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row ('2. Interface', 'Once you have logged in, the interface is as follows:<br/>\r\n<ul>\r\n<li><strong>Dashboard: </strong>your bookings in a table format you can sort/se ... (280 characters truncated) ... ils</li>\r\n<li><strong>Search: </strong>Simple search facility allowing keyword matching and links back to the booking calendar event.</li>\r\n</ul>')
2020-02-08 20:34:25,409 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:34:25,409 INFO sqlalchemy.engine.base.Engine Thread-65 : (1, 1)
2020-02-08 20:34:25,410 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:25,410 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:25,420 INFO sqlalchemy.engine.base.Engine Thread-65 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:34:25,420 INFO sqlalchemy.engine.base.Engine Thread-65 : ('philip', 1, 1)
2020-02-08 20:34:25,420 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:25,421 DEBUG sqlalchemy.engine.base.Engine Thread-65 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:25,422 INFO sqlalchemy.engine.base.Engine Thread-65 : ROLLBACK
2020-02-08 20:34:25,943 INFO sqlalchemy.engine.base.Engine Thread-74 : BEGIN (implicit)
2020-02-08 20:34:25,944 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:34:25,944 INFO sqlalchemy.engine.base.Engine Thread-74 : (1, 1)
2020-02-08 20:34:25,945 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:25,945 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:25,946 INFO sqlalchemy.engine.base.Engine Thread-74 : ROLLBACK
2020-02-08 20:34:25,987 INFO sqlalchemy.engine.base.Engine Thread-75 : BEGIN (implicit)
2020-02-08 20:34:25,988 INFO sqlalchemy.engine.base.Engine Thread-75 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:34:25,988 INFO sqlalchemy.engine.base.Engine Thread-75 : (1, 1)
2020-02-08 20:34:25,989 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:25,989 DEBUG sqlalchemy.engine.base.Engine Thread-75 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:25,990 INFO sqlalchemy.engine.base.Engine Thread-75 : ROLLBACK
2020-02-08 20:34:29,020 INFO sqlalchemy.engine.base.Engine Thread-76 : BEGIN (implicit)
2020-02-08 20:34:29,021 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:34:29,021 INFO sqlalchemy.engine.base.Engine Thread-76 : (1, 1)
2020-02-08 20:34:29,022 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:29,022 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:29,026 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 20:34:29,026 INFO sqlalchemy.engine.base.Engine Thread-76 : ('philip',)
2020-02-08 20:34:29,027 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:34:29,029 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 20:34:29,029 INFO sqlalchemy.engine.base.Engine Thread-76 : ()
2020-02-08 20:34:29,029 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:34:29,030 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 20:34:29,030 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 20:34:29,030 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 20:34:29,030 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 20:34:29,030 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 20:34:29,050 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:34:29,050 INFO sqlalchemy.engine.base.Engine Thread-76 : ('philip', 1, 1)
2020-02-08 20:34:29,051 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:29,051 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:29,054 INFO sqlalchemy.engine.base.Engine Thread-76 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:34:29,054 INFO sqlalchemy.engine.base.Engine Thread-76 : ('philip', 1, 1)
2020-02-08 20:34:29,054 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:29,054 DEBUG sqlalchemy.engine.base.Engine Thread-76 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:29,056 INFO sqlalchemy.engine.base.Engine Thread-76 : ROLLBACK
2020-02-08 20:34:29,606 INFO sqlalchemy.engine.base.Engine Thread-85 : BEGIN (implicit)
2020-02-08 20:34:29,608 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:34:29,608 INFO sqlalchemy.engine.base.Engine Thread-85 : (1, 1)
2020-02-08 20:34:29,608 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:29,609 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:29,610 INFO sqlalchemy.engine.base.Engine Thread-85 : ROLLBACK
2020-02-08 20:34:29,647 INFO sqlalchemy.engine.base.Engine Thread-86 : BEGIN (implicit)
2020-02-08 20:34:29,648 INFO sqlalchemy.engine.base.Engine Thread-86 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:34:29,648 INFO sqlalchemy.engine.base.Engine Thread-86 : (1, 1)
2020-02-08 20:34:29,648 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:34:29,649 DEBUG sqlalchemy.engine.base.Engine Thread-86 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:34:29,649 INFO sqlalchemy.engine.base.Engine Thread-86 : ROLLBACK
2020-02-08 20:35:26,230 INFO sqlalchemy.engine.base.Engine Thread-87 : BEGIN (implicit)
2020-02-08 20:35:26,231 INFO sqlalchemy.engine.base.Engine Thread-87 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 20:35:26,231 INFO sqlalchemy.engine.base.Engine Thread-87 : ('7', 1)
2020-02-08 20:35:26,233 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:35:26,233 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 20:35:26,238 INFO sqlalchemy.engine.base.Engine Thread-87 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 20:35:26,238 INFO sqlalchemy.engine.base.Engine Thread-87 : ()
2020-02-08 20:35:26,239 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 20:35:26,240 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 20:35:26,240 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 20:35:26,241 INFO sqlalchemy.engine.base.Engine Thread-87 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 20:35:26,241 INFO sqlalchemy.engine.base.Engine Thread-87 : (97,)
2020-02-08 20:35:26,242 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 20:35:26,242 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 20:35:26,242 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 20:35:26,244 INFO sqlalchemy.engine.base.Engine Thread-87 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:35:26,244 INFO sqlalchemy.engine.base.Engine Thread-87 : (1, 1)
2020-02-08 20:35:26,244 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:35:26,245 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:35:26,296 INFO sqlalchemy.engine.base.Engine Thread-87 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:35:26,296 INFO sqlalchemy.engine.base.Engine Thread-87 : ('philip', 1, 1)
2020-02-08 20:35:26,297 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:35:26,297 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:35:26,302 INFO sqlalchemy.engine.base.Engine Thread-87 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:35:26,302 INFO sqlalchemy.engine.base.Engine Thread-87 : ('philip', 1, 1)
2020-02-08 20:35:26,302 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:35:26,303 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:35:26,305 INFO sqlalchemy.engine.base.Engine Thread-87 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:35:26,305 INFO sqlalchemy.engine.base.Engine Thread-87 : ('philip', 1, 1)
2020-02-08 20:35:26,305 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:35:26,306 DEBUG sqlalchemy.engine.base.Engine Thread-87 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:35:26,306 INFO sqlalchemy.engine.base.Engine Thread-87 : ROLLBACK
2020-02-08 20:38:27,996 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 20:38:27,996 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:27,997 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 20:38:27,998 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 20:38:27,998 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 20:38:27,998 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:27,999 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 20:38:27,999 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 20:38:27,999 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 20:38:28,000 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:28,000 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 20:38:28,000 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 20:38:28,000 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 20:38:28,000 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:28,001 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 20:38:28,001 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 20:38:28,002 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 20:38:28,002 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:28,003 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 20:38:28,003 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:28,003 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 20:38:28,003 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:28,004 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 20:38:28,011 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 20:38:28,011 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:28,012 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 20:38:28,013 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 20:38:28,013 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 20:38:28,017 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:28,017 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 20:38:28,018 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:28,018 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:28,087 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:28,087 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 20:38:28,088 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:28,088 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:28,090 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 20:38:28,655 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 20:38:28,657 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:28,658 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 20:38:28,659 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:28,659 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 20:38:28,662 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:28,662 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 20:38:28,663 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:28,663 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 20:38:28,666 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 20:38:28,666 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:28,667 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:28,668 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:28,668 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:28,671 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 20:38:28,671 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:28,671 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:28,672 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:28,672 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:28,673 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 20:38:28,695 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-02-08 20:38:28,697 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:28,697 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 20:38:28,698 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:28,698 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 20:38:28,701 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:28,701 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 20:38:28,702 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:28,702 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 20:38:28,705 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 20:38:28,706 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:28,706 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:28,706 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:28,707 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:28,709 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 20:38:28,710 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:28,710 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:28,711 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:28,711 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:28,711 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-02-08 20:38:30,232 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-02-08 20:38:30,233 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:30,233 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-02-08 20:38:30,234 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:30,234 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:30,238 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 20:38:30,238 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip',)
2020-02-08 20:38:30,239 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:38:30,240 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 20:38:30,241 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-02-08 20:38:30,241 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:38:30,242 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 20:38:30,242 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 20:38:30,242 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 20:38:30,242 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 20:38:30,242 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 20:38:30,263 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:30,263 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-02-08 20:38:30,263 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:30,264 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:30,266 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:30,266 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-02-08 20:38:30,267 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:30,267 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:30,269 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-02-08 20:38:30,915 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-02-08 20:38:30,916 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:30,916 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-02-08 20:38:30,917 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:30,917 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:30,928 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-02-08 20:38:30,949 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-02-08 20:38:30,950 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:30,950 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-02-08 20:38:30,951 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:30,952 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:30,953 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-02-08 20:38:32,335 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-02-08 20:38:32,337 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 20:38:32,337 INFO sqlalchemy.engine.base.Engine Thread-24 : ('7', 1)
2020-02-08 20:38:32,338 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:38:32,338 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 20:38:32,343 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 20:38:32,344 INFO sqlalchemy.engine.base.Engine Thread-24 : ()
2020-02-08 20:38:32,345 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 20:38:32,345 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 20:38:32,345 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 20:38:32,348 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 20:38:32,348 INFO sqlalchemy.engine.base.Engine Thread-24 : (97,)
2020-02-08 20:38:32,349 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 20:38:32,349 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 20:38:32,349 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 20:38:32,351 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:32,351 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-02-08 20:38:32,352 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:32,352 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:32,406 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:32,406 INFO sqlalchemy.engine.base.Engine Thread-24 : ('philip', 1, 1)
2020-02-08 20:38:32,407 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:32,407 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:32,410 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-02-08 20:38:35,927 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-02-08 20:38:35,929 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 20:38:35,929 INFO sqlalchemy.engine.base.Engine Thread-33 : ()
2020-02-08 20:38:35,930 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 20:38:35,930 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 20:38:35,931 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 20:38:35,933 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:35,933 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-02-08 20:38:35,934 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:35,934 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:35,938 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:35,938 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip', 1, 1)
2020-02-08 20:38:35,939 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:35,939 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:35,940 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-02-08 20:38:36,443 INFO sqlalchemy.engine.base.Engine Thread-42 : BEGIN (implicit)
2020-02-08 20:38:36,444 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:36,444 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 20:38:36,445 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:36,445 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 20:38:36,449 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:36,449 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 20:38:36,450 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:36,450 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 20:38:36,454 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 20:38:36,454 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:36,455 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:36,455 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:36,455 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:36,459 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 20:38:36,459 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:36,460 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:36,460 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:36,460 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:36,461 INFO sqlalchemy.engine.base.Engine Thread-42 : ROLLBACK
2020-02-08 20:38:36,483 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-02-08 20:38:36,485 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:36,485 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 20:38:36,486 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:36,486 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 20:38:36,489 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:36,489 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 20:38:36,490 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:36,490 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 20:38:36,494 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 20:38:36,494 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:36,495 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:36,495 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:36,495 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:36,499 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 20:38:36,499 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:36,499 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:36,500 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:36,500 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:36,501 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-02-08 20:38:37,838 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-02-08 20:38:37,839 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:37,839 INFO sqlalchemy.engine.base.Engine Thread-44 : (1, 1)
2020-02-08 20:38:37,840 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:37,840 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:37,842 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 20:38:37,842 INFO sqlalchemy.engine.base.Engine Thread-44 : ('philip',)
2020-02-08 20:38:37,843 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:38:37,844 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 20:38:37,844 INFO sqlalchemy.engine.base.Engine Thread-44 : ()
2020-02-08 20:38:37,845 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:38:37,845 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 20:38:37,845 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 20:38:37,845 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 20:38:37,846 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 20:38:37,846 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 20:38:37,850 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:37,850 INFO sqlalchemy.engine.base.Engine Thread-44 : ('philip', 1, 1)
2020-02-08 20:38:37,851 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:37,851 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:37,854 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:37,854 INFO sqlalchemy.engine.base.Engine Thread-44 : ('philip', 1, 1)
2020-02-08 20:38:37,855 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:37,855 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:37,857 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-02-08 20:38:38,328 INFO sqlalchemy.engine.base.Engine Thread-53 : BEGIN (implicit)
2020-02-08 20:38:38,330 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:38,330 INFO sqlalchemy.engine.base.Engine Thread-53 : (1, 1)
2020-02-08 20:38:38,331 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:38,331 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:38,332 INFO sqlalchemy.engine.base.Engine Thread-53 : ROLLBACK
2020-02-08 20:38:38,388 INFO sqlalchemy.engine.base.Engine Thread-54 : BEGIN (implicit)
2020-02-08 20:38:38,390 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:38,390 INFO sqlalchemy.engine.base.Engine Thread-54 : (1, 1)
2020-02-08 20:38:38,390 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:38,391 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:38,392 INFO sqlalchemy.engine.base.Engine Thread-54 : ROLLBACK
2020-02-08 20:38:39,573 INFO sqlalchemy.engine.base.Engine Thread-55 : BEGIN (implicit)
2020-02-08 20:38:39,575 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 20:38:39,575 INFO sqlalchemy.engine.base.Engine Thread-55 : ('12', 1)
2020-02-08 20:38:39,575 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:38:39,576 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 20:38:39,580 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 20:38:39,580 INFO sqlalchemy.engine.base.Engine Thread-55 : ()
2020-02-08 20:38:39,581 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 20:38:39,581 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 20:38:39,581 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 20:38:39,583 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 20:38:39,583 INFO sqlalchemy.engine.base.Engine Thread-55 : (97,)
2020-02-08 20:38:39,583 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 20:38:39,584 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 20:38:39,584 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 20:38:39,585 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:39,586 INFO sqlalchemy.engine.base.Engine Thread-55 : (1, 1)
2020-02-08 20:38:39,586 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:39,587 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:39,590 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:39,590 INFO sqlalchemy.engine.base.Engine Thread-55 : ('philip', 1, 1)
2020-02-08 20:38:39,591 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:39,591 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:39,594 INFO sqlalchemy.engine.base.Engine Thread-55 : ROLLBACK
2020-02-08 20:38:44,934 INFO sqlalchemy.engine.base.Engine Thread-64 : BEGIN (implicit)
2020-02-08 20:38:44,936 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 20:38:44,936 INFO sqlalchemy.engine.base.Engine Thread-64 : ()
2020-02-08 20:38:44,937 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 20:38:44,937 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 20:38:44,937 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 20:38:44,939 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:44,939 INFO sqlalchemy.engine.base.Engine Thread-64 : (1, 1)
2020-02-08 20:38:44,940 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:44,940 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:44,944 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:44,944 INFO sqlalchemy.engine.base.Engine Thread-64 : ('philip', 1, 1)
2020-02-08 20:38:44,944 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:44,945 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:44,946 INFO sqlalchemy.engine.base.Engine Thread-64 : ROLLBACK
2020-02-08 20:38:45,376 INFO sqlalchemy.engine.base.Engine Thread-73 : BEGIN (implicit)
2020-02-08 20:38:45,377 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:45,377 INFO sqlalchemy.engine.base.Engine Thread-73 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 20:38:45,378 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:45,378 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 20:38:45,381 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:45,381 INFO sqlalchemy.engine.base.Engine Thread-73 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 20:38:45,382 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:45,382 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 20:38:45,385 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 20:38:45,385 INFO sqlalchemy.engine.base.Engine Thread-73 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:45,386 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:45,386 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:45,386 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:45,389 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 20:38:45,389 INFO sqlalchemy.engine.base.Engine Thread-73 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:45,390 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:45,390 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:45,390 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:45,391 INFO sqlalchemy.engine.base.Engine Thread-73 : ROLLBACK
2020-02-08 20:38:45,411 INFO sqlalchemy.engine.base.Engine Thread-74 : BEGIN (implicit)
2020-02-08 20:38:45,413 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:45,413 INFO sqlalchemy.engine.base.Engine Thread-74 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 20:38:45,414 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:45,414 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 20:38:45,417 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 20:38:45,417 INFO sqlalchemy.engine.base.Engine Thread-74 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 20:38:45,418 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:45,418 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 20:38:45,421 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 20:38:45,421 INFO sqlalchemy.engine.base.Engine Thread-74 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:45,421 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:45,422 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:45,422 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 20:38:45,425 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 20:38:45,425 INFO sqlalchemy.engine.base.Engine Thread-74 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 20:38:45,425 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 20:38:45,426 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:45,426 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 20:38:45,427 INFO sqlalchemy.engine.base.Engine Thread-74 : ROLLBACK
2020-02-08 20:38:52,954 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 20:38:52,955 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:52,956 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 20:38:52,956 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 20:38:52,957 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 20:38:52,957 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:52,957 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 20:38:52,957 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 20:38:52,958 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 20:38:52,958 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:52,958 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 20:38:52,958 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 20:38:52,958 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 20:38:52,959 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:52,959 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 20:38:52,959 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 20:38:52,960 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 20:38:52,960 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:52,961 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 20:38:52,961 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:52,962 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 20:38:52,962 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:52,962 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 20:38:52,964 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:52,964 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 20:38:52,965 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:52,966 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:52,970 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 20:38:52,970 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip',)
2020-02-08 20:38:52,970 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:38:52,972 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 20:38:52,972 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 20:38:52,973 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:38:52,973 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 20:38:52,973 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 20:38:52,973 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 20:38:52,973 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 20:38:52,973 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 20:38:53,051 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:53,051 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 20:38:53,052 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:53,052 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:53,055 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:53,055 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 20:38:53,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:53,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:53,058 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 20:38:54,658 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 20:38:54,660 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 20:38:54,660 INFO sqlalchemy.engine.base.Engine Thread-11 : ('12', 1)
2020-02-08 20:38:54,661 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 20:38:54,661 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 20:38:54,671 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 20:38:54,671 INFO sqlalchemy.engine.base.Engine Thread-11 : ()
2020-02-08 20:38:54,672 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 20:38:54,673 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 20:38:54,673 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 20:38:54,675 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 20:38:54,675 INFO sqlalchemy.engine.base.Engine Thread-11 : (97,)
2020-02-08 20:38:54,676 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 20:38:54,676 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 20:38:54,676 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 20:38:54,678 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 20:38:54,678 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-02-08 20:38:54,679 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:54,679 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:54,753 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:54,753 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 20:38:54,754 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:54,754 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:54,759 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:54,759 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 20:38:54,760 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:54,760 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:54,762 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 20:38:54,763 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 20:38:54,763 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 20:38:54,763 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 20:38:54,764 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 21:05:13,499 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 21:05:13,499 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:13,501 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:05:13,502 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 21:05:13,502 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 21:05:13,502 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:13,503 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:05:13,503 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 21:05:13,503 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 21:05:13,503 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:13,504 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 21:05:13,504 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 21:05:13,504 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 21:05:13,504 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:13,505 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 21:05:13,505 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 21:05:13,506 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 21:05:13,506 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:13,506 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 21:05:13,506 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:13,507 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 21:05:13,507 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:13,507 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 21:05:13,513 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:05:13,513 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:13,515 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:05:13,515 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:05:13,515 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:05:13,519 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:13,519 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 21:05:13,520 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:13,521 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:13,609 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:13,610 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 21:05:13,610 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:13,611 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:13,613 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 21:05:14,282 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 21:05:14,285 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:14,285 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:05:14,286 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:14,286 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:05:14,289 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:14,289 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:05:14,290 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:14,290 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:05:14,293 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:05:14,293 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:14,294 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:14,295 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:14,295 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:14,298 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:05:14,298 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:14,298 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:14,299 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:14,299 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:14,300 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 21:05:14,318 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-02-08 21:05:14,319 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:14,319 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:05:14,320 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:14,320 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:05:14,323 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:14,323 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:05:14,324 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:14,324 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:05:14,327 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:05:14,327 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:14,328 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:14,328 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:14,328 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:14,331 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:05:14,331 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:14,332 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:14,332 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:14,332 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:14,333 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-02-08 21:05:15,760 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-02-08 21:05:15,761 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:15,761 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-02-08 21:05:15,762 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:15,762 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:15,766 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 21:05:15,766 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip',)
2020-02-08 21:05:15,767 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:05:15,768 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:05:15,769 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-02-08 21:05:15,769 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:05:15,769 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:05:15,769 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:05:15,770 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:05:15,770 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:05:15,770 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:05:15,790 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:15,790 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-02-08 21:05:15,790 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:15,791 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:15,793 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:15,794 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-02-08 21:05:15,794 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:15,795 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:15,796 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-02-08 21:05:16,448 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-02-08 21:05:16,449 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:16,449 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-02-08 21:05:16,450 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:16,450 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:16,461 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-02-08 21:05:16,475 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-02-08 21:05:16,476 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:16,476 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-02-08 21:05:16,477 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:16,477 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:16,478 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-02-08 21:05:17,471 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-02-08 21:05:17,472 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 21:05:17,472 INFO sqlalchemy.engine.base.Engine Thread-24 : ('12', 1)
2020-02-08 21:05:17,473 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:05:17,474 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:05:17,478 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:05:17,478 INFO sqlalchemy.engine.base.Engine Thread-24 : ()
2020-02-08 21:05:17,479 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:05:17,480 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:05:17,480 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:05:17,482 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:05:17,482 INFO sqlalchemy.engine.base.Engine Thread-24 : (97,)
2020-02-08 21:05:17,483 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:05:17,483 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 21:05:17,483 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 21:05:17,485 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:17,485 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-02-08 21:05:17,486 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:17,486 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:17,541 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:17,541 INFO sqlalchemy.engine.base.Engine Thread-24 : ('philip', 1, 1)
2020-02-08 21:05:17,542 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:17,542 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:17,545 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-02-08 21:05:21,877 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-02-08 21:05:21,879 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:05:21,879 INFO sqlalchemy.engine.base.Engine Thread-33 : ()
2020-02-08 21:05:21,880 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:05:21,881 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:05:21,881 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:05:21,883 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:21,883 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-02-08 21:05:21,884 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:21,884 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:21,888 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:21,888 INFO sqlalchemy.engine.base.Engine Thread-33 : ('philip', 1, 1)
2020-02-08 21:05:21,888 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:21,889 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:21,890 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-02-08 21:05:22,404 INFO sqlalchemy.engine.base.Engine Thread-42 : BEGIN (implicit)
2020-02-08 21:05:22,406 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:22,406 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:05:22,407 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:22,407 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:05:22,411 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:22,411 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:05:22,412 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:22,413 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:05:22,416 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:05:22,416 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:22,417 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:22,417 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:22,417 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:22,421 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:05:22,421 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:22,422 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:22,422 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:22,422 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:22,423 INFO sqlalchemy.engine.base.Engine Thread-42 : ROLLBACK
2020-02-08 21:05:22,449 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-02-08 21:05:22,451 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:22,451 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:05:22,451 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:22,452 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:05:22,455 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:22,455 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:05:22,456 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:22,456 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:05:22,459 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:05:22,459 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:22,460 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:22,461 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:22,461 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:22,464 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:05:22,464 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:22,465 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:22,465 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:22,466 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:22,467 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-02-08 21:05:38,577 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 21:05:38,577 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:38,578 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:05:38,579 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 21:05:38,579 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 21:05:38,579 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:38,580 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:05:38,580 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 21:05:38,580 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 21:05:38,580 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:38,581 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 21:05:38,581 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 21:05:38,581 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 21:05:38,581 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:38,582 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 21:05:38,582 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 21:05:38,583 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 21:05:38,583 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:38,583 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 21:05:38,583 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:38,584 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 21:05:38,584 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:38,585 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 21:05:38,587 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:38,587 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 21:05:38,588 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:38,588 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:38,593 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 21:05:38,593 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip',)
2020-02-08 21:05:38,594 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:05:38,595 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:05:38,595 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:05:38,596 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:05:38,596 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:05:38,597 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:05:38,597 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:05:38,597 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:05:38,597 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:05:38,690 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:38,690 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 21:05:38,691 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:38,691 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:38,694 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:38,694 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 21:05:38,695 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:38,695 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:38,698 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 21:05:39,572 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 21:05:39,574 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:39,574 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-02-08 21:05:39,574 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:39,575 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:39,586 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 21:05:39,596 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-02-08 21:05:39,597 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:39,597 INFO sqlalchemy.engine.base.Engine Thread-12 : (1, 1)
2020-02-08 21:05:39,598 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:39,598 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:39,599 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-02-08 21:05:40,600 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-02-08 21:05:40,602 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 21:05:40,602 INFO sqlalchemy.engine.base.Engine Thread-13 : ('12', 1)
2020-02-08 21:05:40,603 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:05:40,603 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:05:40,613 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:05:40,613 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-02-08 21:05:40,615 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:05:40,615 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:05:40,615 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:05:40,618 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:05:40,618 INFO sqlalchemy.engine.base.Engine Thread-13 : (97,)
2020-02-08 21:05:40,618 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:05:40,619 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 21:05:40,619 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 21:05:40,622 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:40,622 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-02-08 21:05:40,622 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:40,622 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:40,682 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:40,682 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-02-08 21:05:40,683 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:40,683 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:40,688 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:40,688 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-02-08 21:05:40,688 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:40,689 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:40,691 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:40,691 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-02-08 21:05:40,692 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:40,692 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:40,693 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-02-08 21:05:57,232 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-02-08 21:05:57,234 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:05:57,234 INFO sqlalchemy.engine.base.Engine Thread-23 : ()
2020-02-08 21:05:57,236 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:05:57,237 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:05:57,237 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:05:57,239 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:57,239 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-02-08 21:05:57,240 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:57,240 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:57,255 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:57,255 INFO sqlalchemy.engine.base.Engine Thread-23 : ('philip', 1, 1)
2020-02-08 21:05:57,256 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:57,256 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:57,258 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-02-08 21:05:57,846 INFO sqlalchemy.engine.base.Engine Thread-32 : BEGIN (implicit)
2020-02-08 21:05:57,848 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:57,848 INFO sqlalchemy.engine.base.Engine Thread-32 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:05:57,849 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:57,849 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:05:57,852 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:57,852 INFO sqlalchemy.engine.base.Engine Thread-32 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:05:57,853 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:57,853 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:05:57,856 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:05:57,857 INFO sqlalchemy.engine.base.Engine Thread-32 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:57,857 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:57,858 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:57,858 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:57,861 INFO sqlalchemy.engine.base.Engine Thread-32 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:05:57,861 INFO sqlalchemy.engine.base.Engine Thread-32 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:57,862 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:57,862 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:57,862 DEBUG sqlalchemy.engine.base.Engine Thread-32 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:57,863 INFO sqlalchemy.engine.base.Engine Thread-32 : ROLLBACK
2020-02-08 21:05:57,887 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-02-08 21:05:57,889 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:57,889 INFO sqlalchemy.engine.base.Engine Thread-33 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:05:57,890 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:57,890 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:05:57,894 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:05:57,894 INFO sqlalchemy.engine.base.Engine Thread-33 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:05:57,895 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:57,895 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:05:57,899 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:05:57,899 INFO sqlalchemy.engine.base.Engine Thread-33 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:57,899 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:57,900 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:57,900 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:05:57,903 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:05:57,903 INFO sqlalchemy.engine.base.Engine Thread-33 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:05:57,904 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:05:57,904 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:57,904 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:05:57,905 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-02-08 21:05:59,318 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-02-08 21:05:59,319 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:05:59,319 INFO sqlalchemy.engine.base.Engine Thread-34 : (1, 1)
2020-02-08 21:05:59,320 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:59,320 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:59,323 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 21:05:59,323 INFO sqlalchemy.engine.base.Engine Thread-34 : ('philip',)
2020-02-08 21:05:59,324 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:05:59,326 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:05:59,326 INFO sqlalchemy.engine.base.Engine Thread-34 : ()
2020-02-08 21:05:59,327 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:05:59,327 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:05:59,327 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:05:59,327 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:05:59,327 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:05:59,328 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:05:59,332 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:59,332 INFO sqlalchemy.engine.base.Engine Thread-34 : ('philip', 1, 1)
2020-02-08 21:05:59,333 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:59,333 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:59,336 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:05:59,336 INFO sqlalchemy.engine.base.Engine Thread-34 : ('philip', 1, 1)
2020-02-08 21:05:59,337 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:05:59,337 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:05:59,339 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-02-08 21:06:05,797 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-02-08 21:06:05,798 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 21:06:05,798 INFO sqlalchemy.engine.base.Engine Thread-43 : ('12', 1)
2020-02-08 21:06:05,799 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:06:05,799 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:06:05,804 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:06:05,804 INFO sqlalchemy.engine.base.Engine Thread-43 : ()
2020-02-08 21:06:05,805 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:06:05,806 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:06:05,806 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:06:05,807 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:06:05,807 INFO sqlalchemy.engine.base.Engine Thread-43 : (97,)
2020-02-08 21:06:05,808 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:06:05,808 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 21:06:05,808 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 21:06:05,810 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:06:05,810 INFO sqlalchemy.engine.base.Engine Thread-43 : (1, 1)
2020-02-08 21:06:05,810 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:06:05,811 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:06:05,815 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:06:05,815 INFO sqlalchemy.engine.base.Engine Thread-43 : ('philip', 1, 1)
2020-02-08 21:06:05,816 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:06:05,816 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:06:05,821 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:06:05,821 INFO sqlalchemy.engine.base.Engine Thread-43 : ('philip', 1, 1)
2020-02-08 21:06:05,821 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:06:05,822 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:06:05,824 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:06:05,824 INFO sqlalchemy.engine.base.Engine Thread-43 : ('philip', 1, 1)
2020-02-08 21:06:05,825 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:06:05,825 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:06:05,826 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-02-08 21:06:56,361 INFO sqlalchemy.engine.base.Engine Thread-52 : BEGIN (implicit)
2020-02-08 21:06:56,364 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:06:56,364 INFO sqlalchemy.engine.base.Engine Thread-52 : ()
2020-02-08 21:06:56,365 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:06:56,366 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:06:56,366 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:06:56,368 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:06:56,368 INFO sqlalchemy.engine.base.Engine Thread-52 : (1, 1)
2020-02-08 21:06:56,369 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:06:56,369 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:06:56,374 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:06:56,374 INFO sqlalchemy.engine.base.Engine Thread-52 : ('philip', 1, 1)
2020-02-08 21:06:56,375 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:06:56,375 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:06:56,377 INFO sqlalchemy.engine.base.Engine Thread-52 : ROLLBACK
2020-02-08 21:06:56,996 INFO sqlalchemy.engine.base.Engine Thread-61 : BEGIN (implicit)
2020-02-08 21:06:56,997 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:06:56,998 INFO sqlalchemy.engine.base.Engine Thread-61 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:06:56,999 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:06:56,999 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:06:57,002 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:06:57,002 INFO sqlalchemy.engine.base.Engine Thread-61 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:06:57,003 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:06:57,003 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:06:57,008 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:06:57,008 INFO sqlalchemy.engine.base.Engine Thread-61 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:06:57,009 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:06:57,009 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:06:57,009 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:06:57,013 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:06:57,013 INFO sqlalchemy.engine.base.Engine Thread-61 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:06:57,013 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:06:57,014 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:06:57,014 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:06:57,015 INFO sqlalchemy.engine.base.Engine Thread-61 : ROLLBACK
2020-02-08 21:06:57,038 INFO sqlalchemy.engine.base.Engine Thread-62 : BEGIN (implicit)
2020-02-08 21:06:57,039 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:06:57,039 INFO sqlalchemy.engine.base.Engine Thread-62 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:06:57,040 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:06:57,040 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:06:57,044 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:06:57,044 INFO sqlalchemy.engine.base.Engine Thread-62 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:06:57,045 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:06:57,045 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:06:57,049 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:06:57,049 INFO sqlalchemy.engine.base.Engine Thread-62 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:06:57,050 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:06:57,050 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:06:57,050 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:06:57,054 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:06:57,054 INFO sqlalchemy.engine.base.Engine Thread-62 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:06:57,055 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:06:57,055 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:06:57,055 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:06:57,056 INFO sqlalchemy.engine.base.Engine Thread-62 : ROLLBACK
2020-02-08 21:10:22,011 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 21:10:22,011 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:10:22,013 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:10:22,013 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 21:10:22,014 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 21:10:22,014 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:10:22,015 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:10:22,015 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 21:10:22,015 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 21:10:22,016 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:10:22,016 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 21:10:22,016 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 21:10:22,016 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 21:10:22,016 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:10:22,017 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 21:10:22,017 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 21:10:22,018 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 21:10:22,018 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:10:22,019 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 21:10:22,019 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:10:22,020 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 21:10:22,020 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:10:22,020 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 21:10:22,023 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:10:22,023 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 21:10:22,024 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:10:22,024 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:10:22,029 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 21:10:22,029 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip',)
2020-02-08 21:10:22,030 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:10:22,032 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:10:22,032 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:10:22,033 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:10:22,033 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:10:22,033 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:10:22,033 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:10:22,033 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:10:22,033 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:10:22,116 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:10:22,116 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 21:10:22,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:10:22,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:10:22,120 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:10:22,120 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 21:10:22,121 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:10:22,121 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:10:22,123 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 21:10:24,826 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 21:10:24,828 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 21:10:24,828 INFO sqlalchemy.engine.base.Engine Thread-11 : ('12', 1)
2020-02-08 21:10:24,829 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:10:24,829 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:10:24,841 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:10:24,841 INFO sqlalchemy.engine.base.Engine Thread-11 : ()
2020-02-08 21:10:24,842 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:10:24,842 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:10:24,843 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:10:24,845 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:10:24,846 INFO sqlalchemy.engine.base.Engine Thread-11 : (97,)
2020-02-08 21:10:24,846 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:10:24,846 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 21:10:24,847 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 21:10:24,849 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:10:24,849 INFO sqlalchemy.engine.base.Engine Thread-11 : (1, 1)
2020-02-08 21:10:24,850 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:10:24,850 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:10:24,919 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:10:24,919 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 21:10:24,920 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:10:24,920 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:10:24,926 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:10:24,926 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 21:10:24,927 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:10:24,927 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:10:24,930 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:10:24,931 INFO sqlalchemy.engine.base.Engine Thread-11 : ('philip', 1, 1)
2020-02-08 21:10:24,935 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:10:24,936 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:10:24,937 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 21:10:55,926 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-02-08 21:10:55,928 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:10:55,928 INFO sqlalchemy.engine.base.Engine Thread-20 : ()
2020-02-08 21:10:55,929 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:10:55,930 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:10:55,930 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:10:55,932 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:10:55,932 INFO sqlalchemy.engine.base.Engine Thread-20 : (1, 1)
2020-02-08 21:10:55,934 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:10:55,934 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:10:55,946 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:10:55,946 INFO sqlalchemy.engine.base.Engine Thread-20 : ('philip', 1, 1)
2020-02-08 21:10:55,947 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:10:55,947 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:10:55,948 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-02-08 21:10:56,499 INFO sqlalchemy.engine.base.Engine Thread-29 : BEGIN (implicit)
2020-02-08 21:10:56,501 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:10:56,501 INFO sqlalchemy.engine.base.Engine Thread-29 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:10:56,502 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:10:56,503 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:10:56,507 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:10:56,507 INFO sqlalchemy.engine.base.Engine Thread-29 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:10:56,508 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:10:56,508 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:10:56,511 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:10:56,511 INFO sqlalchemy.engine.base.Engine Thread-29 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:10:56,512 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:10:56,512 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:10:56,512 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:10:56,516 INFO sqlalchemy.engine.base.Engine Thread-29 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:10:56,516 INFO sqlalchemy.engine.base.Engine Thread-29 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:10:56,517 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:10:56,517 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:10:56,517 DEBUG sqlalchemy.engine.base.Engine Thread-29 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:10:56,518 INFO sqlalchemy.engine.base.Engine Thread-29 : ROLLBACK
2020-02-08 21:10:56,543 INFO sqlalchemy.engine.base.Engine Thread-30 : BEGIN (implicit)
2020-02-08 21:10:56,544 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:10:56,544 INFO sqlalchemy.engine.base.Engine Thread-30 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:10:56,545 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:10:56,545 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:10:56,549 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:10:56,549 INFO sqlalchemy.engine.base.Engine Thread-30 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:10:56,550 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:10:56,550 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:10:56,554 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:10:56,554 INFO sqlalchemy.engine.base.Engine Thread-30 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:10:56,555 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:10:56,555 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:10:56,555 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:10:56,558 INFO sqlalchemy.engine.base.Engine Thread-30 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:10:56,558 INFO sqlalchemy.engine.base.Engine Thread-30 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:10:56,559 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:10:56,559 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:10:56,559 DEBUG sqlalchemy.engine.base.Engine Thread-30 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:10:56,560 INFO sqlalchemy.engine.base.Engine Thread-30 : ROLLBACK
2020-02-08 21:11:02,767 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-02-08 21:11:02,768 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:11:02,768 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-02-08 21:11:02,769 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:11:02,769 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:11:02,771 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 21:11:02,771 INFO sqlalchemy.engine.base.Engine Thread-31 : ('philip',)
2020-02-08 21:11:02,772 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:11:02,774 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:11:02,774 INFO sqlalchemy.engine.base.Engine Thread-31 : ()
2020-02-08 21:11:02,775 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:11:02,775 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:11:02,775 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:11:02,775 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:11:02,776 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:11:02,776 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:11:02,781 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:11:02,781 INFO sqlalchemy.engine.base.Engine Thread-31 : ('philip', 1, 1)
2020-02-08 21:11:02,781 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:11:02,782 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:11:02,785 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:11:02,785 INFO sqlalchemy.engine.base.Engine Thread-31 : ('philip', 1, 1)
2020-02-08 21:11:02,786 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:11:02,786 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:11:02,788 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-02-08 21:11:06,491 INFO sqlalchemy.engine.base.Engine Thread-40 : BEGIN (implicit)
2020-02-08 21:11:06,492 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 21:11:06,492 INFO sqlalchemy.engine.base.Engine Thread-40 : ('11', 1)
2020-02-08 21:11:06,493 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:11:06,493 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:11:06,498 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:11:06,498 INFO sqlalchemy.engine.base.Engine Thread-40 : ()
2020-02-08 21:11:06,499 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:11:06,500 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:11:06,500 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:11:06,501 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:11:06,501 INFO sqlalchemy.engine.base.Engine Thread-40 : (97,)
2020-02-08 21:11:06,502 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:11:06,502 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 21:11:06,502 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 21:11:06,504 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:11:06,504 INFO sqlalchemy.engine.base.Engine Thread-40 : (1, 1)
2020-02-08 21:11:06,505 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:11:06,505 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:11:06,509 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:11:06,510 INFO sqlalchemy.engine.base.Engine Thread-40 : ('philip', 1, 1)
2020-02-08 21:11:06,510 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:11:06,511 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:11:06,515 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:11:06,515 INFO sqlalchemy.engine.base.Engine Thread-40 : ('philip', 1, 1)
2020-02-08 21:11:06,516 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:11:06,516 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:11:06,519 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:11:06,519 INFO sqlalchemy.engine.base.Engine Thread-40 : ('philip', 1, 1)
2020-02-08 21:11:06,519 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:11:06,520 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:11:06,520 INFO sqlalchemy.engine.base.Engine Thread-40 : ROLLBACK
2020-02-08 21:28:40,043 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 21:28:40,043 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:28:40,044 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:28:40,045 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 21:28:40,045 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 21:28:40,045 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:28:40,046 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:28:40,046 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 21:28:40,046 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 21:28:40,047 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:28:40,047 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 21:28:40,047 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 21:28:40,047 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 21:28:40,047 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:28:40,048 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 21:28:40,048 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 21:28:40,049 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 21:28:40,049 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:28:40,049 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 21:28:40,050 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:28:40,050 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 21:28:40,050 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:28:40,051 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 21:28:40,056 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:28:40,056 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:28:40,058 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:28:40,058 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:28:40,058 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:28:40,062 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:28:40,062 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 21:28:40,063 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:28:40,063 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:28:40,132 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:28:40,132 INFO sqlalchemy.engine.base.Engine Thread-2 : ('philip', 1, 1)
2020-02-08 21:28:40,133 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:28:40,133 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:28:40,135 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 21:28:40,709 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 21:28:40,711 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:28:40,711 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:28:40,712 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:28:40,713 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:28:40,716 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:28:40,716 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:28:40,717 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:28:40,717 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:28:40,720 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:28:40,721 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:28:40,721 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:28:40,722 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:28:40,722 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:28:40,725 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:28:40,725 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:28:40,725 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:28:40,726 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:28:40,726 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:28:40,727 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 21:28:40,746 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-02-08 21:28:40,748 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:28:40,748 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:28:40,748 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:28:40,749 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:28:40,752 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:28:40,752 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:28:40,752 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:28:40,753 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:28:40,755 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:28:40,756 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:28:40,756 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:28:40,756 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:28:40,757 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:28:40,760 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:28:40,760 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:28:40,761 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:28:40,761 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:28:40,761 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:28:40,762 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-02-08 21:28:42,203 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-02-08 21:28:42,204 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:28:42,204 INFO sqlalchemy.engine.base.Engine Thread-13 : (1, 1)
2020-02-08 21:28:42,205 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:28:42,205 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:28:42,210 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 21:28:42,210 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip',)
2020-02-08 21:28:42,211 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:28:42,213 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:28:42,213 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-02-08 21:28:42,213 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:28:42,214 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:28:42,214 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:28:42,214 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:28:42,214 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:28:42,214 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:28:42,234 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:28:42,234 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-02-08 21:28:42,235 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:28:42,235 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:28:42,238 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:28:42,238 INFO sqlalchemy.engine.base.Engine Thread-13 : ('philip', 1, 1)
2020-02-08 21:28:42,238 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:28:42,239 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:28:42,240 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-02-08 21:28:42,713 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-02-08 21:28:42,714 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:28:42,714 INFO sqlalchemy.engine.base.Engine Thread-22 : (1, 1)
2020-02-08 21:28:42,715 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:28:42,715 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:28:42,726 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-02-08 21:28:42,736 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-02-08 21:28:42,737 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:28:42,737 INFO sqlalchemy.engine.base.Engine Thread-23 : (1, 1)
2020-02-08 21:28:42,738 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:28:42,738 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:28:42,739 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-02-08 21:28:43,773 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-02-08 21:28:43,774 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 21:28:43,774 INFO sqlalchemy.engine.base.Engine Thread-24 : ('12', 1)
2020-02-08 21:28:43,775 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:28:43,776 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:28:43,781 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:28:43,781 INFO sqlalchemy.engine.base.Engine Thread-24 : ()
2020-02-08 21:28:43,782 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:28:43,783 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:28:43,783 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:28:43,785 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:28:43,785 INFO sqlalchemy.engine.base.Engine Thread-24 : (97,)
2020-02-08 21:28:43,786 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:28:43,786 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 21:28:43,786 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 21:28:43,789 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:28:43,790 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-02-08 21:28:43,790 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:28:43,790 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:28:43,843 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:28:43,843 INFO sqlalchemy.engine.base.Engine Thread-24 : ('philip', 1, 1)
2020-02-08 21:28:43,844 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:28:43,844 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:28:43,848 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:28:43,848 INFO sqlalchemy.engine.base.Engine Thread-24 : ('philip', 1, 1)
2020-02-08 21:28:43,849 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:28:43,849 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:28:43,851 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:28:43,851 INFO sqlalchemy.engine.base.Engine Thread-24 : ('philip', 1, 1)
2020-02-08 21:28:43,852 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:28:43,852 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:28:43,853 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-02-08 21:29:03,051 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-02-08 21:29:03,053 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:29:03,053 INFO sqlalchemy.engine.base.Engine Thread-33 : (1, 1)
2020-02-08 21:29:03,053 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:29:03,054 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:29:03,055 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-02-08 21:30:48,370 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-02-08 21:30:48,372 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:30:48,373 INFO sqlalchemy.engine.base.Engine Thread-34 : ()
2020-02-08 21:30:48,374 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:30:48,374 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:30:48,374 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:30:48,377 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:30:48,377 INFO sqlalchemy.engine.base.Engine Thread-34 : (1, 1)
2020-02-08 21:30:48,377 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:30:48,377 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:30:48,381 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:30:48,382 INFO sqlalchemy.engine.base.Engine Thread-34 : ('philip', 1, 1)
2020-02-08 21:30:48,382 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:30:48,382 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:30:48,384 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-02-08 21:30:48,837 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-02-08 21:30:48,838 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:30:48,838 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:30:48,839 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:30:48,840 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:30:48,843 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:30:48,843 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:30:48,844 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:30:48,844 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:30:48,847 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:30:48,847 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:30:48,848 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:30:48,848 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:30:48,848 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:30:48,851 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:30:48,851 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:30:48,852 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:30:48,852 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:30:48,852 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:30:48,853 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-02-08 21:30:48,877 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-02-08 21:30:48,878 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:30:48,878 INFO sqlalchemy.engine.base.Engine Thread-44 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:30:48,879 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:30:48,879 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:30:48,882 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:30:48,882 INFO sqlalchemy.engine.base.Engine Thread-44 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:30:48,883 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:30:48,883 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:30:48,886 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:30:48,886 INFO sqlalchemy.engine.base.Engine Thread-44 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:30:48,887 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:30:48,887 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:30:48,887 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:30:48,891 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:30:48,891 INFO sqlalchemy.engine.base.Engine Thread-44 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:30:48,891 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:30:48,892 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:30:48,892 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:30:48,892 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-02-08 21:30:56,727 INFO sqlalchemy.engine.base.Engine Thread-45 : BEGIN (implicit)
2020-02-08 21:30:56,728 INFO sqlalchemy.engine.base.Engine Thread-45 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:30:56,728 INFO sqlalchemy.engine.base.Engine Thread-45 : (1, 1)
2020-02-08 21:30:56,730 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:30:56,730 DEBUG sqlalchemy.engine.base.Engine Thread-45 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 21:30:56,732 INFO sqlalchemy.engine.base.Engine Thread-45 : ROLLBACK
2020-02-08 21:30:56,922 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-02-08 21:30:56,924 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-08 21:30:56,924 INFO sqlalchemy.engine.base.Engine Thread-47 : ()
2020-02-08 21:30:56,924 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 21:30:56,925 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-08 21:30:56,925 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-08 21:30:56,925 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 21:30:56,926 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:30:56,927 INFO sqlalchemy.engine.base.Engine Thread-47 : (63,)
2020-02-08 21:30:56,927 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:30:56,927 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 21:30:56,927 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 21:30:56,928 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 21:30:56,937 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-02-08 21:31:02,590 INFO sqlalchemy.engine.base.Engine Thread-49 : BEGIN (implicit)
2020-02-08 21:31:02,590 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-08 21:31:02,590 INFO sqlalchemy.engine.base.Engine Thread-49 : ()
2020-02-08 21:31:02,591 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 21:31:02,591 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-08 21:31:02,591 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-08 21:31:02,591 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 21:31:02,593 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:31:02,593 INFO sqlalchemy.engine.base.Engine Thread-49 : (63,)
2020-02-08 21:31:02,593 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:31:02,594 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 21:31:02,594 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 21:31:02,594 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 21:31:02,596 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.login_id = %s 
 LIMIT %s
2020-02-08 21:31:02,596 INFO sqlalchemy.engine.base.Engine Thread-49 : ('philip2', 1)
2020-02-08 21:31:02,597 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:31:02,597 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (8, 'philip2', 'Philip', 'Troon', 'Test account', '$2b$12$Hpbh0Dfjr9dtIcXAngUGKedF9XdsPlZWtQ0a.iZg0J0zdzAepBKru', 'philiptroon@gmail.com', 6, 65, datetime.datetime(2020, 1, 29, 19, 28, 53), None, datetime.datetime(2020, 2, 4, 12, 44), 'philip', 1)
2020-02-08 21:31:02,598 INFO sqlalchemy.engine.base.Engine Thread-49 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles 
WHERE roles.id = %s 
 LIMIT %s
2020-02-08 21:31:02,598 INFO sqlalchemy.engine.base.Engine Thread-49 : (6, 1)
2020-02-08 21:31:02,599 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 21:31:02,599 DEBUG sqlalchemy.engine.base.Engine Thread-49 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-08 21:31:02,910 INFO sqlalchemy.engine.base.Engine Thread-49 : ROLLBACK
2020-02-08 21:32:19,320 INFO sqlalchemy.engine.base.Engine Thread-51 : BEGIN (implicit)
2020-02-08 21:32:19,321 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-08 21:32:19,321 INFO sqlalchemy.engine.base.Engine Thread-51 : ()
2020-02-08 21:32:19,322 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 21:32:19,323 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-08 21:32:19,323 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-08 21:32:19,323 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 21:32:19,324 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:32:19,325 INFO sqlalchemy.engine.base.Engine Thread-51 : (63,)
2020-02-08 21:32:19,325 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:32:19,325 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 21:32:19,325 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 21:32:19,326 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 21:32:19,327 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.login_id = %s 
 LIMIT %s
2020-02-08 21:32:19,327 INFO sqlalchemy.engine.base.Engine Thread-51 : ('bob', 1)
2020-02-08 21:32:19,328 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:19,328 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:32:19,330 INFO sqlalchemy.engine.base.Engine Thread-51 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles 
WHERE roles.id = %s 
 LIMIT %s
2020-02-08 21:32:19,330 INFO sqlalchemy.engine.base.Engine Thread-51 : (1, 1)
2020-02-08 21:32:19,330 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 21:32:19,331 DEBUG sqlalchemy.engine.base.Engine Thread-51 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 21:32:19,638 INFO sqlalchemy.engine.base.Engine Thread-51 : ROLLBACK
2020-02-08 21:32:19,709 INFO sqlalchemy.engine.base.Engine Thread-52 : BEGIN (implicit)
2020-02-08 21:32:19,710 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:32:19,710 INFO sqlalchemy.engine.base.Engine Thread-52 : (2, 1)
2020-02-08 21:32:19,711 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:19,711 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:32:19,713 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 21:32:19,714 INFO sqlalchemy.engine.base.Engine Thread-52 : ('bob',)
2020-02-08 21:32:19,714 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:32:19,716 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:32:19,716 INFO sqlalchemy.engine.base.Engine Thread-52 : ()
2020-02-08 21:32:19,717 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:32:19,717 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:32:19,717 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:32:19,717 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:32:19,718 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:32:19,718 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:32:19,723 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:32:19,723 INFO sqlalchemy.engine.base.Engine Thread-52 : ('bob', 1, 1)
2020-02-08 21:32:19,724 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:19,726 INFO sqlalchemy.engine.base.Engine Thread-52 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:32:19,726 INFO sqlalchemy.engine.base.Engine Thread-52 : ('bob', 1, 1)
2020-02-08 21:32:19,727 DEBUG sqlalchemy.engine.base.Engine Thread-52 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:19,728 INFO sqlalchemy.engine.base.Engine Thread-52 : ROLLBACK
2020-02-08 21:32:20,275 INFO sqlalchemy.engine.base.Engine Thread-61 : BEGIN (implicit)
2020-02-08 21:32:20,276 INFO sqlalchemy.engine.base.Engine Thread-61 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:32:20,277 INFO sqlalchemy.engine.base.Engine Thread-61 : (2, 1)
2020-02-08 21:32:20,277 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:20,277 DEBUG sqlalchemy.engine.base.Engine Thread-61 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:32:20,278 INFO sqlalchemy.engine.base.Engine Thread-61 : ROLLBACK
2020-02-08 21:32:20,296 INFO sqlalchemy.engine.base.Engine Thread-62 : BEGIN (implicit)
2020-02-08 21:32:20,297 INFO sqlalchemy.engine.base.Engine Thread-62 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:32:20,297 INFO sqlalchemy.engine.base.Engine Thread-62 : (2, 1)
2020-02-08 21:32:20,298 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:20,298 DEBUG sqlalchemy.engine.base.Engine Thread-62 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:32:20,299 INFO sqlalchemy.engine.base.Engine Thread-62 : ROLLBACK
2020-02-08 21:32:23,580 INFO sqlalchemy.engine.base.Engine Thread-63 : BEGIN (implicit)
2020-02-08 21:32:23,582 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:32:23,583 INFO sqlalchemy.engine.base.Engine Thread-63 : ()
2020-02-08 21:32:23,584 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:32:23,584 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:32:23,584 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:32:23,587 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:32:23,587 INFO sqlalchemy.engine.base.Engine Thread-63 : (2, 1)
2020-02-08 21:32:23,588 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:23,588 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:32:23,592 INFO sqlalchemy.engine.base.Engine Thread-63 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:32:23,593 INFO sqlalchemy.engine.base.Engine Thread-63 : ('bob', 1, 1)
2020-02-08 21:32:23,593 DEBUG sqlalchemy.engine.base.Engine Thread-63 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:23,595 INFO sqlalchemy.engine.base.Engine Thread-63 : ROLLBACK
2020-02-08 21:32:24,059 INFO sqlalchemy.engine.base.Engine Thread-72 : BEGIN (implicit)
2020-02-08 21:32:24,060 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:24,060 INFO sqlalchemy.engine.base.Engine Thread-72 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:32:24,061 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:24,062 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:32:24,065 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:24,065 INFO sqlalchemy.engine.base.Engine Thread-72 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:32:24,065 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:24,065 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:32:24,068 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:32:24,069 INFO sqlalchemy.engine.base.Engine Thread-72 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:24,069 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:24,069 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:24,070 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:24,073 INFO sqlalchemy.engine.base.Engine Thread-72 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:32:24,073 INFO sqlalchemy.engine.base.Engine Thread-72 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:24,073 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:24,074 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:24,074 DEBUG sqlalchemy.engine.base.Engine Thread-72 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:24,075 INFO sqlalchemy.engine.base.Engine Thread-72 : ROLLBACK
2020-02-08 21:32:24,097 INFO sqlalchemy.engine.base.Engine Thread-73 : BEGIN (implicit)
2020-02-08 21:32:24,098 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:24,098 INFO sqlalchemy.engine.base.Engine Thread-73 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:32:24,099 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:24,099 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:32:24,102 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:24,102 INFO sqlalchemy.engine.base.Engine Thread-73 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:32:24,103 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:24,103 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:32:24,106 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:32:24,106 INFO sqlalchemy.engine.base.Engine Thread-73 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:24,107 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:24,107 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:24,107 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:24,110 INFO sqlalchemy.engine.base.Engine Thread-73 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:32:24,110 INFO sqlalchemy.engine.base.Engine Thread-73 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:24,111 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:24,111 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:24,111 DEBUG sqlalchemy.engine.base.Engine Thread-73 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:24,112 INFO sqlalchemy.engine.base.Engine Thread-73 : ROLLBACK
2020-02-08 21:32:25,405 INFO sqlalchemy.engine.base.Engine Thread-74 : BEGIN (implicit)
2020-02-08 21:32:25,407 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:32:25,407 INFO sqlalchemy.engine.base.Engine Thread-74 : ()
2020-02-08 21:32:25,408 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:32:25,408 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:32:25,408 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:32:25,410 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:32:25,410 INFO sqlalchemy.engine.base.Engine Thread-74 : (2, 1)
2020-02-08 21:32:25,411 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:25,411 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:32:25,415 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:32:25,415 INFO sqlalchemy.engine.base.Engine Thread-74 : ('bob', 1, 1)
2020-02-08 21:32:25,415 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:25,417 INFO sqlalchemy.engine.base.Engine Thread-74 : ROLLBACK
2020-02-08 21:32:25,793 INFO sqlalchemy.engine.base.Engine Thread-83 : BEGIN (implicit)
2020-02-08 21:32:25,795 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:25,795 INFO sqlalchemy.engine.base.Engine Thread-83 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:32:25,795 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:25,796 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:32:25,799 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:25,799 INFO sqlalchemy.engine.base.Engine Thread-83 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:32:25,800 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:25,800 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:32:25,803 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:32:25,803 INFO sqlalchemy.engine.base.Engine Thread-83 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:25,804 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:25,804 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:25,804 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:25,807 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:32:25,807 INFO sqlalchemy.engine.base.Engine Thread-83 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:25,808 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:25,808 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:25,808 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:25,809 INFO sqlalchemy.engine.base.Engine Thread-83 : ROLLBACK
2020-02-08 21:32:25,828 INFO sqlalchemy.engine.base.Engine Thread-84 : BEGIN (implicit)
2020-02-08 21:32:25,830 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:25,830 INFO sqlalchemy.engine.base.Engine Thread-84 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:32:25,831 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:25,831 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:32:25,834 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:25,834 INFO sqlalchemy.engine.base.Engine Thread-84 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:32:25,835 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:25,835 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:32:25,838 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:32:25,838 INFO sqlalchemy.engine.base.Engine Thread-84 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:25,839 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:25,839 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:25,839 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:25,842 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:32:25,842 INFO sqlalchemy.engine.base.Engine Thread-84 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:25,843 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:25,843 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:25,843 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:25,844 INFO sqlalchemy.engine.base.Engine Thread-84 : ROLLBACK
2020-02-08 21:32:26,990 INFO sqlalchemy.engine.base.Engine Thread-85 : BEGIN (implicit)
2020-02-08 21:32:26,991 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:32:26,991 INFO sqlalchemy.engine.base.Engine Thread-85 : (2, 1)
2020-02-08 21:32:26,992 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:26,992 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:32:26,994 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 21:32:26,994 INFO sqlalchemy.engine.base.Engine Thread-85 : ('bob',)
2020-02-08 21:32:26,995 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:32:26,996 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:32:26,996 INFO sqlalchemy.engine.base.Engine Thread-85 : ()
2020-02-08 21:32:26,997 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:32:26,997 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:32:26,997 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:32:26,997 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:32:26,997 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:32:26,998 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:32:27,002 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:32:27,002 INFO sqlalchemy.engine.base.Engine Thread-85 : ('bob', 1, 1)
2020-02-08 21:32:27,002 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:27,005 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:32:27,005 INFO sqlalchemy.engine.base.Engine Thread-85 : ('bob', 1, 1)
2020-02-08 21:32:27,005 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:27,006 INFO sqlalchemy.engine.base.Engine Thread-85 : ROLLBACK
2020-02-08 21:32:27,475 INFO sqlalchemy.engine.base.Engine Thread-94 : BEGIN (implicit)
2020-02-08 21:32:27,476 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:32:27,476 INFO sqlalchemy.engine.base.Engine Thread-94 : (2, 1)
2020-02-08 21:32:27,477 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:27,477 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:32:27,478 INFO sqlalchemy.engine.base.Engine Thread-94 : ROLLBACK
2020-02-08 21:32:27,492 INFO sqlalchemy.engine.base.Engine Thread-95 : BEGIN (implicit)
2020-02-08 21:32:27,493 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:32:27,493 INFO sqlalchemy.engine.base.Engine Thread-95 : (2, 1)
2020-02-08 21:32:27,494 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:27,494 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:32:27,495 INFO sqlalchemy.engine.base.Engine Thread-95 : ROLLBACK
2020-02-08 21:32:30,460 INFO sqlalchemy.engine.base.Engine Thread-96 : BEGIN (implicit)
2020-02-08 21:32:30,463 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:32:30,463 INFO sqlalchemy.engine.base.Engine Thread-96 : ()
2020-02-08 21:32:30,464 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:32:30,464 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:32:30,464 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:32:30,466 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:32:30,466 INFO sqlalchemy.engine.base.Engine Thread-96 : (2, 1)
2020-02-08 21:32:30,467 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:30,467 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:32:30,471 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:32:30,471 INFO sqlalchemy.engine.base.Engine Thread-96 : ('bob', 1, 1)
2020-02-08 21:32:30,472 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:30,473 INFO sqlalchemy.engine.base.Engine Thread-96 : ROLLBACK
2020-02-08 21:32:30,958 INFO sqlalchemy.engine.base.Engine Thread-105 : BEGIN (implicit)
2020-02-08 21:32:30,959 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:30,959 INFO sqlalchemy.engine.base.Engine Thread-105 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:32:30,960 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:30,960 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:32:30,963 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:30,964 INFO sqlalchemy.engine.base.Engine Thread-105 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:32:30,964 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:30,965 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:32:30,968 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:32:30,968 INFO sqlalchemy.engine.base.Engine Thread-105 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:30,968 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:30,969 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:30,969 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:30,972 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:32:30,972 INFO sqlalchemy.engine.base.Engine Thread-105 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:30,972 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:30,973 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:30,973 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:30,974 INFO sqlalchemy.engine.base.Engine Thread-105 : ROLLBACK
2020-02-08 21:32:30,998 INFO sqlalchemy.engine.base.Engine Thread-106 : BEGIN (implicit)
2020-02-08 21:32:30,999 INFO sqlalchemy.engine.base.Engine Thread-106 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:30,999 INFO sqlalchemy.engine.base.Engine Thread-106 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:32:31,000 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:31,000 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:32:31,004 INFO sqlalchemy.engine.base.Engine Thread-106 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:32:31,004 INFO sqlalchemy.engine.base.Engine Thread-106 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:32:31,005 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:31,005 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:32:31,008 INFO sqlalchemy.engine.base.Engine Thread-106 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:32:31,008 INFO sqlalchemy.engine.base.Engine Thread-106 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:31,009 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:31,009 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:31,009 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:32:31,012 INFO sqlalchemy.engine.base.Engine Thread-106 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:32:31,012 INFO sqlalchemy.engine.base.Engine Thread-106 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:32:31,013 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:32:31,013 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:31,013 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:32:31,014 INFO sqlalchemy.engine.base.Engine Thread-106 : ROLLBACK
2020-02-08 21:32:33,886 INFO sqlalchemy.engine.base.Engine Thread-107 : BEGIN (implicit)
2020-02-08 21:32:33,887 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 21:32:33,887 INFO sqlalchemy.engine.base.Engine Thread-107 : ('0', 1)
2020-02-08 21:32:33,887 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:32:33,892 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:32:33,892 INFO sqlalchemy.engine.base.Engine Thread-107 : ()
2020-02-08 21:32:33,893 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:32:33,894 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:32:33,894 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:32:33,895 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:32:33,895 INFO sqlalchemy.engine.base.Engine Thread-107 : (97,)
2020-02-08 21:32:33,896 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:32:33,896 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 21:32:33,896 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 21:32:33,899 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 21:32:33,899 INFO sqlalchemy.engine.base.Engine Thread-107 : (1, 1)
2020-02-08 21:32:33,900 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:32:33,900 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:32:33,904 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:32:33,904 INFO sqlalchemy.engine.base.Engine Thread-107 : (2, 1)
2020-02-08 21:32:33,905 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:33,905 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:32:33,909 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:32:33,909 INFO sqlalchemy.engine.base.Engine Thread-107 : ('bob', 1, 1)
2020-02-08 21:32:33,909 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:32:33,912 INFO sqlalchemy.engine.base.Engine Thread-107 : ROLLBACK
2020-02-08 21:33:23,240 INFO sqlalchemy.engine.base.Engine Thread-116 : BEGIN (implicit)
2020-02-08 21:33:23,241 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 21:33:23,241 INFO sqlalchemy.engine.base.Engine Thread-116 : ('0', 1)
2020-02-08 21:33:23,242 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:33:23,247 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:33:23,248 INFO sqlalchemy.engine.base.Engine Thread-116 : ()
2020-02-08 21:33:23,249 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:33:23,249 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:33:23,249 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:33:23,251 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:33:23,251 INFO sqlalchemy.engine.base.Engine Thread-116 : (97,)
2020-02-08 21:33:23,251 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:33:23,252 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 21:33:23,252 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 21:33:23,255 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 21:33:23,255 INFO sqlalchemy.engine.base.Engine Thread-116 : (1, 1)
2020-02-08 21:33:23,256 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:33:23,257 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:33:23,260 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value 
FROM parameters 
WHERE parameters.param_group = %s
2020-02-08 21:33:23,260 INFO sqlalchemy.engine.base.Engine Thread-116 : (109,)
2020-02-08 21:33:23,261 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('parameters_param_name', 'parameters_param_value')
2020-02-08 21:33:23,261 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row ('TOTAL_CHANGES_PER_COMPLEX_PER_DAY', '3')
2020-02-08 21:33:23,261 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row ('DIFFERENT_COMPLEXES_PER_DAY', '8')
2020-02-08 21:33:23,261 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row ('TOTAL_CHANGES_PER_DAY', '16')
2020-02-08 21:33:23,265 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT count(*) AS count_1 
FROM (SELECT bookings.id AS bookings_id 
FROM bookings 
WHERE bookings.start_dt BETWEEN %s AND %s) AS anon_1
2020-02-08 21:33:23,265 INFO sqlalchemy.engine.base.Engine Thread-116 : (datetime.datetime(2020, 2, 15, 0, 0), datetime.datetime(2020, 2, 15, 23, 59))
2020-02-08 21:33:23,265 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('count_1',)
2020-02-08 21:33:23,265 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (0,)
2020-02-08 21:33:23,268 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT count(*) AS count_1 
FROM (SELECT bookings.id AS bookings_id 
FROM bookings 
WHERE bookings.complex = %s AND bookings.start_dt BETWEEN %s AND %s) AS anon_1
2020-02-08 21:33:23,268 INFO sqlalchemy.engine.base.Engine Thread-116 : ('1', datetime.datetime(2020, 2, 15, 0, 0), datetime.datetime(2020, 2, 15, 23, 59))
2020-02-08 21:33:23,269 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('count_1',)
2020-02-08 21:33:23,269 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (0,)
2020-02-08 21:33:23,271 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT count(*) AS count_1 
FROM (SELECT count(bookings.complex) AS count_2 
FROM bookings GROUP BY bookings.complex) AS anon_1
2020-02-08 21:33:23,271 INFO sqlalchemy.engine.base.Engine Thread-116 : ()
2020-02-08 21:33:23,271 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('count_1',)
2020-02-08 21:33:23,271 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (2,)
2020-02-08 21:33:23,274 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 21:33:23,274 INFO sqlalchemy.engine.base.Engine Thread-116 : (1, 1)
2020-02-08 21:33:23,275 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:33:23,276 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:33:23,278 INFO sqlalchemy.engine.base.Engine Thread-116 : INSERT INTO bookings (id, slot_id, title, start_dt, end_dt, ticket, stakeholder_id, budget, project, description, owner_id, complex, cluster, approval_required, approved_date, approved_by, change_ref, change_subref, logged) VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
2020-02-08 21:33:23,278 INFO sqlalchemy.engine.base.Engine Thread-116 : ('0', '0', "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', '1', 98, '1', None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23, 259813))
2020-02-08 21:33:23,279 INFO sqlalchemy.engine.base.Engine Thread-116 : COMMIT
2020-02-08 21:33:23,377 INFO sqlalchemy.engine.base.Engine Thread-117 : BEGIN (implicit)
2020-02-08 21:33:23,378 INFO sqlalchemy.engine.base.Engine Thread-117 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:33:23,378 INFO sqlalchemy.engine.base.Engine Thread-117 : (2, 1)
2020-02-08 21:33:23,379 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:33:23,379 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:33:23,381 INFO sqlalchemy.engine.base.Engine Thread-117 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 21:33:23,381 INFO sqlalchemy.engine.base.Engine Thread-117 : ('bob',)
2020-02-08 21:33:23,381 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:33:23,382 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:33:23,383 INFO sqlalchemy.engine.base.Engine Thread-117 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:33:23,383 INFO sqlalchemy.engine.base.Engine Thread-117 : ()
2020-02-08 21:33:23,384 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:33:23,384 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:33:23,384 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:33:23,384 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:33:23,384 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:33:23,384 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:33:23,384 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:33:23,391 INFO sqlalchemy.engine.base.Engine Thread-117 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:33:23,391 INFO sqlalchemy.engine.base.Engine Thread-117 : ('bob', 1, 1)
2020-02-08 21:33:23,392 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:33:23,394 INFO sqlalchemy.engine.base.Engine Thread-117 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:33:23,394 INFO sqlalchemy.engine.base.Engine Thread-117 : ('bob', 1, 1)
2020-02-08 21:33:23,395 DEBUG sqlalchemy.engine.base.Engine Thread-117 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:33:23,396 INFO sqlalchemy.engine.base.Engine Thread-117 : ROLLBACK
2020-02-08 21:33:23,957 INFO sqlalchemy.engine.base.Engine Thread-126 : BEGIN (implicit)
2020-02-08 21:33:23,958 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:33:23,958 INFO sqlalchemy.engine.base.Engine Thread-126 : (2, 1)
2020-02-08 21:33:23,959 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:33:23,960 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:33:23,961 INFO sqlalchemy.engine.base.Engine Thread-126 : ROLLBACK
2020-02-08 21:33:23,979 INFO sqlalchemy.engine.base.Engine Thread-127 : BEGIN (implicit)
2020-02-08 21:33:23,980 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:33:23,980 INFO sqlalchemy.engine.base.Engine Thread-127 : (2, 1)
2020-02-08 21:33:23,981 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:33:23,981 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:33:23,982 INFO sqlalchemy.engine.base.Engine Thread-127 : ROLLBACK
2020-02-08 21:33:35,398 INFO sqlalchemy.engine.base.Engine Thread-128 : BEGIN (implicit)
2020-02-08 21:33:35,400 INFO sqlalchemy.engine.base.Engine Thread-128 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:33:35,400 INFO sqlalchemy.engine.base.Engine Thread-128 : ()
2020-02-08 21:33:35,401 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:33:35,402 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:33:35,402 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:33:35,404 INFO sqlalchemy.engine.base.Engine Thread-128 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:33:35,404 INFO sqlalchemy.engine.base.Engine Thread-128 : (2, 1)
2020-02-08 21:33:35,404 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:33:35,405 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:33:35,409 INFO sqlalchemy.engine.base.Engine Thread-128 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:33:35,409 INFO sqlalchemy.engine.base.Engine Thread-128 : ('bob', 1, 1)
2020-02-08 21:33:35,409 DEBUG sqlalchemy.engine.base.Engine Thread-128 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:33:35,410 INFO sqlalchemy.engine.base.Engine Thread-128 : ROLLBACK
2020-02-08 21:33:35,846 INFO sqlalchemy.engine.base.Engine Thread-137 : BEGIN (implicit)
2020-02-08 21:33:35,848 INFO sqlalchemy.engine.base.Engine Thread-137 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:33:35,848 INFO sqlalchemy.engine.base.Engine Thread-137 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:33:35,849 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:33:35,849 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:33:35,852 INFO sqlalchemy.engine.base.Engine Thread-137 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:33:35,852 INFO sqlalchemy.engine.base.Engine Thread-137 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:33:35,853 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:33:35,853 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:33:35,856 INFO sqlalchemy.engine.base.Engine Thread-137 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:33:35,857 INFO sqlalchemy.engine.base.Engine Thread-137 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:33:35,857 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:33:35,858 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:33:35,858 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:33:35,861 INFO sqlalchemy.engine.base.Engine Thread-137 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:33:35,861 INFO sqlalchemy.engine.base.Engine Thread-137 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:33:35,861 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:33:35,862 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:33:35,862 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:33:35,862 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:33:35,863 INFO sqlalchemy.engine.base.Engine Thread-137 : ROLLBACK
2020-02-08 21:33:35,883 INFO sqlalchemy.engine.base.Engine Thread-138 : BEGIN (implicit)
2020-02-08 21:33:35,884 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:33:35,884 INFO sqlalchemy.engine.base.Engine Thread-138 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 21:33:35,885 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:33:35,885 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 21:33:35,888 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 21:33:35,889 INFO sqlalchemy.engine.base.Engine Thread-138 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 21:33:35,889 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:33:35,890 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 21:33:35,893 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 21:33:35,893 INFO sqlalchemy.engine.base.Engine Thread-138 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:33:35,894 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:33:35,894 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:33:35,894 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 21:33:35,897 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 21:33:35,897 INFO sqlalchemy.engine.base.Engine Thread-138 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 21:33:35,898 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 21:33:35,898 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:33:35,898 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:33:35,898 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 21:33:35,899 INFO sqlalchemy.engine.base.Engine Thread-138 : ROLLBACK
2020-02-08 21:35:07,662 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 21:35:07,662 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:35:07,663 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:35:07,664 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 21:35:07,664 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 21:35:07,665 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:35:07,665 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:35:07,665 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 21:35:07,665 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 21:35:07,666 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:35:07,666 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 21:35:07,666 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 21:35:07,666 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 21:35:07,666 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:35:07,667 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 21:35:07,667 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 21:35:07,668 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 21:35:07,668 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:35:07,669 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 21:35:07,669 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:35:07,669 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 21:35:07,669 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:35:07,670 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 21:35:07,672 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:35:07,672 INFO sqlalchemy.engine.base.Engine Thread-2 : (2, 1)
2020-02-08 21:35:07,673 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:35:07,673 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:35:07,678 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.owner_id = %s
2020-02-08 21:35:07,678 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob',)
2020-02-08 21:35:07,679 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:35:07,679 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:35:07,681 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:35:07,681 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:35:07,682 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:35:07,682 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:35:07,682 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:35:07,682 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:35:07,683 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:35:07,683 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:35:07,683 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:35:07,762 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:35:07,762 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 21:35:07,763 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:35:07,766 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:35:07,766 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 21:35:07,766 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:35:07,768 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 21:35:08,351 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 21:35:08,352 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:35:08,352 INFO sqlalchemy.engine.base.Engine Thread-11 : (2, 1)
2020-02-08 21:35:08,353 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:35:08,353 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:35:08,364 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 21:35:08,385 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-02-08 21:35:08,386 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:35:08,386 INFO sqlalchemy.engine.base.Engine Thread-12 : (2, 1)
2020-02-08 21:35:08,387 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:35:08,387 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:35:08,388 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-02-08 21:36:19,031 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 21:36:19,031 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:19,032 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:36:19,032 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 21:36:19,033 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 21:36:19,033 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:19,034 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:36:19,034 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 21:36:19,034 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 21:36:19,034 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:19,034 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 21:36:19,034 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 21:36:19,035 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 21:36:19,035 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:19,035 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 21:36:19,036 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 21:36:19,036 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 21:36:19,037 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:19,037 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 21:36:19,037 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:19,038 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 21:36:19,038 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:19,038 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 21:36:19,041 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:36:19,041 INFO sqlalchemy.engine.base.Engine Thread-2 : (2, 1)
2020-02-08 21:36:19,042 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:36:19,042 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:36:19,046 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:36:19,046 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:19,047 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:36:19,047 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:36:19,047 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:36:19,047 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:36:19,048 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:36:19,048 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:36:19,048 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:36:19,050 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 21:36:19,050 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob',)
2020-02-08 21:36:19,050 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:36:19,051 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:36:19,127 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:36:19,128 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 21:36:19,128 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:36:19,130 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:36:19,130 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 21:36:19,131 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:36:19,132 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 21:36:19,618 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 21:36:19,619 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:36:19,619 INFO sqlalchemy.engine.base.Engine Thread-11 : (2, 1)
2020-02-08 21:36:19,620 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:36:19,620 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:36:19,630 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 21:36:19,650 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-02-08 21:36:19,651 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:36:19,651 INFO sqlalchemy.engine.base.Engine Thread-12 : (2, 1)
2020-02-08 21:36:19,652 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:36:19,652 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:36:19,653 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-02-08 21:36:37,292 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 21:36:37,292 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:37,293 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:36:37,294 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 21:36:37,294 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 21:36:37,294 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:37,295 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 21:36:37,295 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 21:36:37,296 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 21:36:37,296 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:37,296 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 21:36:37,296 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 21:36:37,297 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 21:36:37,297 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:37,298 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 21:36:37,298 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 21:36:37,299 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 21:36:37,299 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:37,300 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 21:36:37,300 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:37,301 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 21:36:37,301 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:37,301 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 21:36:37,304 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:36:37,304 INFO sqlalchemy.engine.base.Engine Thread-2 : (2, 1)
2020-02-08 21:36:37,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:36:37,305 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:36:37,310 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:36:37,310 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 21:36:37,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:36:37,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:36:37,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:36:37,311 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:36:37,312 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:36:37,312 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:36:37,312 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:36:37,314 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 21:36:37,314 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob',)
2020-02-08 21:36:37,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:36:37,317 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:36:37,399 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:36:37,399 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 21:36:37,400 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:36:37,403 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:36:37,403 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 21:36:37,403 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:36:37,405 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 21:36:38,025 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 21:36:38,027 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:36:38,027 INFO sqlalchemy.engine.base.Engine Thread-11 : (2, 1)
2020-02-08 21:36:38,028 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:36:38,028 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:36:38,038 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 21:36:38,042 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-02-08 21:36:38,043 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:36:38,043 INFO sqlalchemy.engine.base.Engine Thread-12 : (2, 1)
2020-02-08 21:36:38,044 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:36:38,044 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:36:38,045 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-02-08 21:37:23,830 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-02-08 21:37:23,831 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:37:23,831 INFO sqlalchemy.engine.base.Engine Thread-13 : (2, 1)
2020-02-08 21:37:23,832 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:23,832 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:37:23,834 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:37:23,834 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-02-08 21:37:23,834 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:37:23,835 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:37:23,835 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:37:23,835 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:37:23,835 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:37:23,835 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:37:23,835 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:37:23,837 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 21:37:23,837 INFO sqlalchemy.engine.base.Engine Thread-13 : ('bob',)
2020-02-08 21:37:23,838 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:37:23,838 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:37:23,860 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:37:23,860 INFO sqlalchemy.engine.base.Engine Thread-13 : ('bob', 1, 1)
2020-02-08 21:37:23,861 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:23,863 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:37:23,863 INFO sqlalchemy.engine.base.Engine Thread-13 : ('bob', 1, 1)
2020-02-08 21:37:23,864 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:23,864 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-02-08 21:37:24,346 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-02-08 21:37:24,347 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:37:24,347 INFO sqlalchemy.engine.base.Engine Thread-22 : (2, 1)
2020-02-08 21:37:24,348 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:24,348 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:37:24,349 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-02-08 21:37:24,368 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-02-08 21:37:24,369 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:37:24,369 INFO sqlalchemy.engine.base.Engine Thread-23 : (2, 1)
2020-02-08 21:37:24,369 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:24,369 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:37:24,370 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-02-08 21:37:38,126 INFO sqlalchemy.engine.base.Engine Thread-25 : BEGIN (implicit)
2020-02-08 21:37:38,127 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:37:38,127 INFO sqlalchemy.engine.base.Engine Thread-25 : (2, 1)
2020-02-08 21:37:38,129 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:38,129 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:37:38,130 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 21:37:38,130 INFO sqlalchemy.engine.base.Engine Thread-25 : ()
2020-02-08 21:37:38,131 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:37:38,131 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 21:37:38,131 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 21:37:38,132 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 21:37:38,132 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 21:37:38,132 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 21:37:38,132 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:37:38,134 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 21:37:38,134 INFO sqlalchemy.engine.base.Engine Thread-25 : ('bob',)
2020-02-08 21:37:38,135 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:37:38,135 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:37:38,156 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:37:38,156 INFO sqlalchemy.engine.base.Engine Thread-25 : ('bob', 1, 1)
2020-02-08 21:37:38,157 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:38,160 INFO sqlalchemy.engine.base.Engine Thread-25 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:37:38,160 INFO sqlalchemy.engine.base.Engine Thread-25 : ('bob', 1, 1)
2020-02-08 21:37:38,161 DEBUG sqlalchemy.engine.base.Engine Thread-25 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:38,162 INFO sqlalchemy.engine.base.Engine Thread-25 : ROLLBACK
2020-02-08 21:37:38,803 INFO sqlalchemy.engine.base.Engine Thread-34 : BEGIN (implicit)
2020-02-08 21:37:38,804 INFO sqlalchemy.engine.base.Engine Thread-34 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:37:38,804 INFO sqlalchemy.engine.base.Engine Thread-34 : (2, 1)
2020-02-08 21:37:38,805 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:38,806 DEBUG sqlalchemy.engine.base.Engine Thread-34 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:37:38,808 INFO sqlalchemy.engine.base.Engine Thread-34 : ROLLBACK
2020-02-08 21:37:38,826 INFO sqlalchemy.engine.base.Engine Thread-35 : BEGIN (implicit)
2020-02-08 21:37:38,827 INFO sqlalchemy.engine.base.Engine Thread-35 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:37:38,827 INFO sqlalchemy.engine.base.Engine Thread-35 : (2, 1)
2020-02-08 21:37:38,827 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:38,827 DEBUG sqlalchemy.engine.base.Engine Thread-35 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:37:38,828 INFO sqlalchemy.engine.base.Engine Thread-35 : ROLLBACK
2020-02-08 21:37:43,023 INFO sqlalchemy.engine.base.Engine Thread-37 : BEGIN (implicit)
2020-02-08 21:37:43,025 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 21:37:43,025 INFO sqlalchemy.engine.base.Engine Thread-37 : ('13', 1)
2020-02-08 21:37:43,026 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 21:37:43,026 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 21:37:43,037 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 21:37:43,037 INFO sqlalchemy.engine.base.Engine Thread-37 : ()
2020-02-08 21:37:43,039 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 21:37:43,039 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 21:37:43,039 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 21:37:43,041 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 21:37:43,042 INFO sqlalchemy.engine.base.Engine Thread-37 : (97,)
2020-02-08 21:37:43,042 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 21:37:43,042 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 21:37:43,042 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 21:37:43,047 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 21:37:43,047 INFO sqlalchemy.engine.base.Engine Thread-37 : (2, 1)
2020-02-08 21:37:43,048 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:43,048 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 21:37:43,100 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:37:43,100 INFO sqlalchemy.engine.base.Engine Thread-37 : ('bob', 1, 1)
2020-02-08 21:37:43,101 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:43,105 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:37:43,105 INFO sqlalchemy.engine.base.Engine Thread-37 : ('bob', 1, 1)
2020-02-08 21:37:43,106 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:43,108 INFO sqlalchemy.engine.base.Engine Thread-37 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 21:37:43,108 INFO sqlalchemy.engine.base.Engine Thread-37 : ('bob', 1, 1)
2020-02-08 21:37:43,109 DEBUG sqlalchemy.engine.base.Engine Thread-37 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 21:37:43,110 INFO sqlalchemy.engine.base.Engine Thread-37 : ROLLBACK
2020-02-08 22:07:04,818 INFO sqlalchemy.engine.base.Engine Thread-46 : BEGIN (implicit)
2020-02-08 22:07:04,820 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 22:07:04,820 INFO sqlalchemy.engine.base.Engine Thread-46 : ('13', 1)
2020-02-08 22:07:04,823 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:07:04,823 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:07:04,828 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:07:04,828 INFO sqlalchemy.engine.base.Engine Thread-46 : ()
2020-02-08 22:07:04,829 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:07:04,830 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:07:04,830 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:07:04,831 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:07:04,831 INFO sqlalchemy.engine.base.Engine Thread-46 : (97,)
2020-02-08 22:07:04,832 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:07:04,832 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 22:07:04,832 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 22:07:04,834 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:07:04,834 INFO sqlalchemy.engine.base.Engine Thread-46 : (2, 1)
2020-02-08 22:07:04,835 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:07:04,835 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:07:04,890 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:07:04,890 INFO sqlalchemy.engine.base.Engine Thread-46 : ('bob', 1, 1)
2020-02-08 22:07:04,891 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:07:04,895 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:07:04,895 INFO sqlalchemy.engine.base.Engine Thread-46 : ('bob', 1, 1)
2020-02-08 22:07:04,895 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:07:04,897 INFO sqlalchemy.engine.base.Engine Thread-46 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:07:04,898 INFO sqlalchemy.engine.base.Engine Thread-46 : ('bob', 1, 1)
2020-02-08 22:07:04,898 DEBUG sqlalchemy.engine.base.Engine Thread-46 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:07:04,899 INFO sqlalchemy.engine.base.Engine Thread-46 : ROLLBACK
2020-02-08 22:07:16,340 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 22:07:16,340 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:07:16,341 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 22:07:16,342 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 22:07:16,343 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 22:07:16,343 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:07:16,344 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 22:07:16,344 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 22:07:16,344 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 22:07:16,344 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:07:16,345 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 22:07:16,345 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 22:07:16,345 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 22:07:16,345 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:07:16,346 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 22:07:16,346 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 22:07:16,347 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 22:07:16,347 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:07:16,348 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 22:07:16,348 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:07:16,349 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 22:07:16,349 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:07:16,350 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 22:07:16,353 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 22:07:16,353 INFO sqlalchemy.engine.base.Engine Thread-2 : ('13', 1)
2020-02-08 22:07:16,354 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:07:16,355 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:07:16,366 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:07:16,367 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:07:16,368 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:07:16,368 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:07:16,368 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:07:16,371 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:07:16,371 INFO sqlalchemy.engine.base.Engine Thread-2 : (97,)
2020-02-08 22:07:16,372 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:07:16,372 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 22:07:16,372 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 22:07:16,380 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:07:16,380 INFO sqlalchemy.engine.base.Engine Thread-2 : (2, 1)
2020-02-08 22:07:16,381 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:07:16,381 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:07:16,504 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:07:16,504 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 22:07:16,505 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:07:16,510 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:07:16,510 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 22:07:16,511 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:07:16,513 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:07:16,513 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 22:07:16,514 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:07:16,515 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 22:38:46,053 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 22:38:46,053 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:38:46,054 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 22:38:46,055 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 22:38:46,056 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 22:38:46,056 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:38:46,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 22:38:46,056 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 22:38:46,057 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 22:38:46,057 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:38:46,057 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 22:38:46,057 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 22:38:46,058 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 22:38:46,058 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:38:46,059 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 22:38:46,059 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 22:38:46,059 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 22:38:46,060 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:38:46,060 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 22:38:46,060 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:38:46,061 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 22:38:46,061 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:38:46,062 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 22:38:46,068 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:38:46,068 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:38:46,070 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:38:46,070 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:38:46,070 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:38:46,075 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:38:46,075 INFO sqlalchemy.engine.base.Engine Thread-2 : (2, 1)
2020-02-08 22:38:46,076 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:38:46,076 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:38:46,150 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:38:46,150 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 22:38:46,151 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:38:46,153 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 22:38:46,772 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 22:38:46,775 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:38:46,775 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:38:46,776 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:38:46,776 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:38:46,780 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:38:46,780 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:38:46,781 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:38:46,781 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:38:46,785 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:38:46,785 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:38:46,786 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:38:46,786 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:38:46,786 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:38:46,789 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:38:46,789 INFO sqlalchemy.engine.base.Engine Thread-11 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:38:46,790 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:38:46,790 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:38:46,791 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:38:46,791 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:38:46,792 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 22:38:46,817 INFO sqlalchemy.engine.base.Engine Thread-12 : BEGIN (implicit)
2020-02-08 22:38:46,819 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:38:46,819 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:38:46,820 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:38:46,820 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:38:46,823 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:38:46,823 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:38:46,824 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:38:46,824 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:38:46,828 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:38:46,828 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:38:46,829 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:38:46,829 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:38:46,829 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:38:46,833 INFO sqlalchemy.engine.base.Engine Thread-12 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:38:46,833 INFO sqlalchemy.engine.base.Engine Thread-12 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:38:46,834 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:38:46,834 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:38:46,834 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:38:46,834 DEBUG sqlalchemy.engine.base.Engine Thread-12 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:38:46,835 INFO sqlalchemy.engine.base.Engine Thread-12 : ROLLBACK
2020-02-08 22:38:51,249 INFO sqlalchemy.engine.base.Engine Thread-13 : BEGIN (implicit)
2020-02-08 22:38:51,250 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:38:51,251 INFO sqlalchemy.engine.base.Engine Thread-13 : (2, 1)
2020-02-08 22:38:51,251 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:38:51,251 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:38:51,255 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 22:38:51,255 INFO sqlalchemy.engine.base.Engine Thread-13 : ()
2020-02-08 22:38:51,256 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:38:51,257 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 22:38:51,257 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 22:38:51,257 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 22:38:51,257 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 22:38:51,257 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 22:38:51,257 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:38:51,259 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 22:38:51,259 INFO sqlalchemy.engine.base.Engine Thread-13 : ('bob',)
2020-02-08 22:38:51,260 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:38:51,260 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:38:51,281 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:38:51,281 INFO sqlalchemy.engine.base.Engine Thread-13 : ('bob', 1, 1)
2020-02-08 22:38:51,281 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:38:51,284 INFO sqlalchemy.engine.base.Engine Thread-13 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:38:51,284 INFO sqlalchemy.engine.base.Engine Thread-13 : ('bob', 1, 1)
2020-02-08 22:38:51,285 DEBUG sqlalchemy.engine.base.Engine Thread-13 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:38:51,286 INFO sqlalchemy.engine.base.Engine Thread-13 : ROLLBACK
2020-02-08 22:38:51,782 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-02-08 22:38:51,783 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:38:51,783 INFO sqlalchemy.engine.base.Engine Thread-22 : (2, 1)
2020-02-08 22:38:51,784 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:38:51,784 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:38:51,795 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-02-08 22:38:51,811 INFO sqlalchemy.engine.base.Engine Thread-23 : BEGIN (implicit)
2020-02-08 22:38:51,812 INFO sqlalchemy.engine.base.Engine Thread-23 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:38:51,812 INFO sqlalchemy.engine.base.Engine Thread-23 : (2, 1)
2020-02-08 22:38:51,813 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:38:51,813 DEBUG sqlalchemy.engine.base.Engine Thread-23 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:38:51,814 INFO sqlalchemy.engine.base.Engine Thread-23 : ROLLBACK
2020-02-08 22:38:52,630 INFO sqlalchemy.engine.base.Engine Thread-24 : BEGIN (implicit)
2020-02-08 22:38:52,631 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 22:38:52,631 INFO sqlalchemy.engine.base.Engine Thread-24 : ('13', 1)
2020-02-08 22:38:52,632 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:38:52,633 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:38:52,637 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:38:52,637 INFO sqlalchemy.engine.base.Engine Thread-24 : ()
2020-02-08 22:38:52,638 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:38:52,639 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:38:52,639 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:38:52,641 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:38:52,641 INFO sqlalchemy.engine.base.Engine Thread-24 : (97,)
2020-02-08 22:38:52,642 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:38:52,642 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 22:38:52,642 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 22:38:52,645 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 22:38:52,645 INFO sqlalchemy.engine.base.Engine Thread-24 : (1, 1)
2020-02-08 22:38:52,646 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:38:52,646 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:38:52,650 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:38:52,650 INFO sqlalchemy.engine.base.Engine Thread-24 : (2, 1)
2020-02-08 22:38:52,650 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:38:52,651 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:38:52,702 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:38:52,702 INFO sqlalchemy.engine.base.Engine Thread-24 : ('bob', 1, 1)
2020-02-08 22:38:52,703 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:38:52,707 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:38:52,708 INFO sqlalchemy.engine.base.Engine Thread-24 : ('bob', 1, 1)
2020-02-08 22:38:52,708 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:38:52,711 INFO sqlalchemy.engine.base.Engine Thread-24 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:38:52,711 INFO sqlalchemy.engine.base.Engine Thread-24 : ('bob', 1, 1)
2020-02-08 22:38:52,711 DEBUG sqlalchemy.engine.base.Engine Thread-24 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:38:52,712 INFO sqlalchemy.engine.base.Engine Thread-24 : ROLLBACK
2020-02-08 22:39:16,486 INFO sqlalchemy.engine.base.Engine Thread-33 : BEGIN (implicit)
2020-02-08 22:39:16,489 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:39:16,489 INFO sqlalchemy.engine.base.Engine Thread-33 : ()
2020-02-08 22:39:16,490 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:39:16,490 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:39:16,491 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:39:16,493 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:39:16,493 INFO sqlalchemy.engine.base.Engine Thread-33 : (2, 1)
2020-02-08 22:39:16,494 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:39:16,494 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:39:16,499 INFO sqlalchemy.engine.base.Engine Thread-33 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:39:16,499 INFO sqlalchemy.engine.base.Engine Thread-33 : ('bob', 1, 1)
2020-02-08 22:39:16,499 DEBUG sqlalchemy.engine.base.Engine Thread-33 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:39:16,501 INFO sqlalchemy.engine.base.Engine Thread-33 : ROLLBACK
2020-02-08 22:39:17,048 INFO sqlalchemy.engine.base.Engine Thread-42 : BEGIN (implicit)
2020-02-08 22:39:17,050 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:39:17,050 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:39:17,051 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:39:17,051 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:39:17,054 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:39:17,054 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:39:17,055 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:39:17,055 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:39:17,059 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:39:17,059 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:39:17,060 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:39:17,060 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:39:17,061 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:39:17,064 INFO sqlalchemy.engine.base.Engine Thread-42 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:39:17,064 INFO sqlalchemy.engine.base.Engine Thread-42 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:39:17,065 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:39:17,065 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:39:17,065 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:39:17,065 DEBUG sqlalchemy.engine.base.Engine Thread-42 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:39:17,066 INFO sqlalchemy.engine.base.Engine Thread-42 : ROLLBACK
2020-02-08 22:39:17,092 INFO sqlalchemy.engine.base.Engine Thread-43 : BEGIN (implicit)
2020-02-08 22:39:17,094 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:39:17,094 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:39:17,095 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:39:17,095 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:39:17,099 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:39:17,099 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:39:17,100 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:39:17,100 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:39:17,103 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:39:17,103 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:39:17,104 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:39:17,104 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:39:17,104 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:39:17,108 INFO sqlalchemy.engine.base.Engine Thread-43 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:39:17,108 INFO sqlalchemy.engine.base.Engine Thread-43 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:39:17,109 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:39:17,109 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:39:17,109 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:39:17,109 DEBUG sqlalchemy.engine.base.Engine Thread-43 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:39:17,110 INFO sqlalchemy.engine.base.Engine Thread-43 : ROLLBACK
2020-02-08 22:40:47,299 INFO sqlalchemy.engine.base.Engine Thread-44 : BEGIN (implicit)
2020-02-08 22:40:47,300 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:40:47,301 INFO sqlalchemy.engine.base.Engine Thread-44 : (2, 1)
2020-02-08 22:40:47,303 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:40:47,303 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:40:47,305 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 22:40:47,305 INFO sqlalchemy.engine.base.Engine Thread-44 : ()
2020-02-08 22:40:47,306 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:40:47,307 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 22:40:47,307 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 22:40:47,307 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 22:40:47,307 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 22:40:47,307 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 22:40:47,308 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:40:47,310 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 22:40:47,310 INFO sqlalchemy.engine.base.Engine Thread-44 : ('bob',)
2020-02-08 22:40:47,311 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:40:47,312 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:40:47,317 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:40:47,317 INFO sqlalchemy.engine.base.Engine Thread-44 : ('bob', 1, 1)
2020-02-08 22:40:47,318 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:40:47,321 INFO sqlalchemy.engine.base.Engine Thread-44 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:40:47,321 INFO sqlalchemy.engine.base.Engine Thread-44 : ('bob', 1, 1)
2020-02-08 22:40:47,321 DEBUG sqlalchemy.engine.base.Engine Thread-44 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:40:47,322 INFO sqlalchemy.engine.base.Engine Thread-44 : ROLLBACK
2020-02-08 22:40:47,970 INFO sqlalchemy.engine.base.Engine Thread-53 : BEGIN (implicit)
2020-02-08 22:40:47,972 INFO sqlalchemy.engine.base.Engine Thread-53 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:40:47,972 INFO sqlalchemy.engine.base.Engine Thread-53 : (2, 1)
2020-02-08 22:40:47,972 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:40:47,973 DEBUG sqlalchemy.engine.base.Engine Thread-53 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:40:47,974 INFO sqlalchemy.engine.base.Engine Thread-53 : ROLLBACK
2020-02-08 22:40:48,005 INFO sqlalchemy.engine.base.Engine Thread-54 : BEGIN (implicit)
2020-02-08 22:40:48,006 INFO sqlalchemy.engine.base.Engine Thread-54 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:40:48,006 INFO sqlalchemy.engine.base.Engine Thread-54 : (2, 1)
2020-02-08 22:40:48,007 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:40:48,007 DEBUG sqlalchemy.engine.base.Engine Thread-54 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:40:48,008 INFO sqlalchemy.engine.base.Engine Thread-54 : ROLLBACK
2020-02-08 22:40:49,463 INFO sqlalchemy.engine.base.Engine Thread-55 : BEGIN (implicit)
2020-02-08 22:40:49,464 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 22:40:49,464 INFO sqlalchemy.engine.base.Engine Thread-55 : ('13', 1)
2020-02-08 22:40:49,465 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:40:49,466 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:40:49,471 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:40:49,471 INFO sqlalchemy.engine.base.Engine Thread-55 : ()
2020-02-08 22:40:49,472 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:40:49,472 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:40:49,472 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:40:49,474 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:40:49,474 INFO sqlalchemy.engine.base.Engine Thread-55 : (97,)
2020-02-08 22:40:49,475 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:40:49,475 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 22:40:49,475 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 22:40:49,479 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 22:40:49,479 INFO sqlalchemy.engine.base.Engine Thread-55 : (1, 1)
2020-02-08 22:40:49,480 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:40:49,480 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:40:49,482 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:40:49,482 INFO sqlalchemy.engine.base.Engine Thread-55 : (2, 1)
2020-02-08 22:40:49,482 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:40:49,482 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:40:49,487 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:40:49,487 INFO sqlalchemy.engine.base.Engine Thread-55 : ('bob', 1, 1)
2020-02-08 22:40:49,488 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:40:49,492 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:40:49,492 INFO sqlalchemy.engine.base.Engine Thread-55 : ('bob', 1, 1)
2020-02-08 22:40:49,493 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:40:49,495 INFO sqlalchemy.engine.base.Engine Thread-55 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:40:49,495 INFO sqlalchemy.engine.base.Engine Thread-55 : ('bob', 1, 1)
2020-02-08 22:40:49,496 DEBUG sqlalchemy.engine.base.Engine Thread-55 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:40:49,497 INFO sqlalchemy.engine.base.Engine Thread-55 : ROLLBACK
2020-02-08 22:48:39,454 INFO sqlalchemy.engine.base.Engine Thread-64 : BEGIN (implicit)
2020-02-08 22:48:39,456 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 22:48:39,456 INFO sqlalchemy.engine.base.Engine Thread-64 : ('13', 1)
2020-02-08 22:48:39,458 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:48:39,458 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:48:39,463 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:48:39,463 INFO sqlalchemy.engine.base.Engine Thread-64 : ()
2020-02-08 22:48:39,465 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:48:39,465 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:48:39,465 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:48:39,466 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:48:39,466 INFO sqlalchemy.engine.base.Engine Thread-64 : (97,)
2020-02-08 22:48:39,467 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:48:39,467 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 22:48:39,467 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 22:48:39,470 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 22:48:39,470 INFO sqlalchemy.engine.base.Engine Thread-64 : (1, 1)
2020-02-08 22:48:39,471 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:48:39,472 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:48:39,474 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:48:39,474 INFO sqlalchemy.engine.base.Engine Thread-64 : (2, 1)
2020-02-08 22:48:39,475 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:39,475 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:48:39,532 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:48:39,532 INFO sqlalchemy.engine.base.Engine Thread-64 : ('bob', 1, 1)
2020-02-08 22:48:39,533 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:39,537 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:48:39,537 INFO sqlalchemy.engine.base.Engine Thread-64 : ('bob', 1, 1)
2020-02-08 22:48:39,538 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:39,540 INFO sqlalchemy.engine.base.Engine Thread-64 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:48:39,540 INFO sqlalchemy.engine.base.Engine Thread-64 : ('bob', 1, 1)
2020-02-08 22:48:39,541 DEBUG sqlalchemy.engine.base.Engine Thread-64 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:39,542 INFO sqlalchemy.engine.base.Engine Thread-64 : ROLLBACK
2020-02-08 22:48:44,583 INFO sqlalchemy.engine.base.Engine Thread-74 : BEGIN (implicit)
2020-02-08 22:48:44,585 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:48:44,585 INFO sqlalchemy.engine.base.Engine Thread-74 : ()
2020-02-08 22:48:44,586 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:48:44,586 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:48:44,587 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:48:44,589 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:48:44,589 INFO sqlalchemy.engine.base.Engine Thread-74 : (2, 1)
2020-02-08 22:48:44,589 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:44,590 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:48:44,594 INFO sqlalchemy.engine.base.Engine Thread-74 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:48:44,594 INFO sqlalchemy.engine.base.Engine Thread-74 : ('bob', 1, 1)
2020-02-08 22:48:44,595 DEBUG sqlalchemy.engine.base.Engine Thread-74 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:44,596 INFO sqlalchemy.engine.base.Engine Thread-74 : ROLLBACK
2020-02-08 22:48:45,061 INFO sqlalchemy.engine.base.Engine Thread-83 : BEGIN (implicit)
2020-02-08 22:48:45,063 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:48:45,063 INFO sqlalchemy.engine.base.Engine Thread-83 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:48:45,064 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:48:45,064 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:48:45,067 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:48:45,067 INFO sqlalchemy.engine.base.Engine Thread-83 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:48:45,068 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:48:45,068 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:48:45,072 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:48:45,072 INFO sqlalchemy.engine.base.Engine Thread-83 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:48:45,072 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:48:45,073 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:48:45,073 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:48:45,076 INFO sqlalchemy.engine.base.Engine Thread-83 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:48:45,076 INFO sqlalchemy.engine.base.Engine Thread-83 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:48:45,077 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:48:45,077 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:48:45,077 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:48:45,077 DEBUG sqlalchemy.engine.base.Engine Thread-83 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:48:45,078 INFO sqlalchemy.engine.base.Engine Thread-83 : ROLLBACK
2020-02-08 22:48:45,104 INFO sqlalchemy.engine.base.Engine Thread-84 : BEGIN (implicit)
2020-02-08 22:48:45,106 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:48:45,106 INFO sqlalchemy.engine.base.Engine Thread-84 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:48:45,106 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:48:45,107 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:48:45,110 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:48:45,110 INFO sqlalchemy.engine.base.Engine Thread-84 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:48:45,110 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:48:45,111 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:48:45,114 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:48:45,114 INFO sqlalchemy.engine.base.Engine Thread-84 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:48:45,115 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:48:45,115 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:48:45,115 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:48:45,118 INFO sqlalchemy.engine.base.Engine Thread-84 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:48:45,118 INFO sqlalchemy.engine.base.Engine Thread-84 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:48:45,119 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:48:45,119 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:48:45,119 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:48:45,119 DEBUG sqlalchemy.engine.base.Engine Thread-84 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:48:45,120 INFO sqlalchemy.engine.base.Engine Thread-84 : ROLLBACK
2020-02-08 22:48:46,699 INFO sqlalchemy.engine.base.Engine Thread-85 : BEGIN (implicit)
2020-02-08 22:48:46,700 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:48:46,700 INFO sqlalchemy.engine.base.Engine Thread-85 : (2, 1)
2020-02-08 22:48:46,700 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:46,701 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:48:46,702 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 22:48:46,702 INFO sqlalchemy.engine.base.Engine Thread-85 : ()
2020-02-08 22:48:46,703 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:48:46,703 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 22:48:46,703 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 22:48:46,703 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 22:48:46,703 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 22:48:46,704 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 22:48:46,704 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:48:46,706 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 22:48:46,706 INFO sqlalchemy.engine.base.Engine Thread-85 : ('bob',)
2020-02-08 22:48:46,706 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:48:46,706 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:48:46,710 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:48:46,711 INFO sqlalchemy.engine.base.Engine Thread-85 : ('bob', 1, 1)
2020-02-08 22:48:46,711 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:46,714 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:48:46,714 INFO sqlalchemy.engine.base.Engine Thread-85 : ('bob', 1, 1)
2020-02-08 22:48:46,714 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:46,715 INFO sqlalchemy.engine.base.Engine Thread-85 : ROLLBACK
2020-02-08 22:48:47,218 INFO sqlalchemy.engine.base.Engine Thread-94 : BEGIN (implicit)
2020-02-08 22:48:47,219 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:48:47,219 INFO sqlalchemy.engine.base.Engine Thread-94 : (2, 1)
2020-02-08 22:48:47,220 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:47,220 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:48:47,221 INFO sqlalchemy.engine.base.Engine Thread-94 : ROLLBACK
2020-02-08 22:48:47,239 INFO sqlalchemy.engine.base.Engine Thread-95 : BEGIN (implicit)
2020-02-08 22:48:47,240 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:48:47,240 INFO sqlalchemy.engine.base.Engine Thread-95 : (2, 1)
2020-02-08 22:48:47,240 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:47,241 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:48:47,242 INFO sqlalchemy.engine.base.Engine Thread-95 : ROLLBACK
2020-02-08 22:48:49,218 INFO sqlalchemy.engine.base.Engine Thread-96 : BEGIN (implicit)
2020-02-08 22:48:49,220 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 22:48:49,220 INFO sqlalchemy.engine.base.Engine Thread-96 : ('13', 1)
2020-02-08 22:48:49,221 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:48:49,221 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:48:49,228 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:48:49,228 INFO sqlalchemy.engine.base.Engine Thread-96 : ()
2020-02-08 22:48:49,229 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:48:49,229 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:48:49,229 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:48:49,230 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:48:49,231 INFO sqlalchemy.engine.base.Engine Thread-96 : (97,)
2020-02-08 22:48:49,231 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:48:49,231 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 22:48:49,231 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 22:48:49,235 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 22:48:49,235 INFO sqlalchemy.engine.base.Engine Thread-96 : (1, 1)
2020-02-08 22:48:49,236 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:48:49,236 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:48:49,238 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:48:49,238 INFO sqlalchemy.engine.base.Engine Thread-96 : (2, 1)
2020-02-08 22:48:49,238 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:49,239 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:48:49,242 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:48:49,243 INFO sqlalchemy.engine.base.Engine Thread-96 : ('bob', 1, 1)
2020-02-08 22:48:49,243 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:49,248 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:48:49,248 INFO sqlalchemy.engine.base.Engine Thread-96 : ('bob', 1, 1)
2020-02-08 22:48:49,248 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:49,251 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:48:49,251 INFO sqlalchemy.engine.base.Engine Thread-96 : ('bob', 1, 1)
2020-02-08 22:48:49,251 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:48:49,252 INFO sqlalchemy.engine.base.Engine Thread-96 : ROLLBACK
2020-02-08 22:53:18,004 INFO sqlalchemy.engine.base.Engine Thread-105 : BEGIN (implicit)
2020-02-08 22:53:18,006 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 22:53:18,006 INFO sqlalchemy.engine.base.Engine Thread-105 : ('13', 1)
2020-02-08 22:53:18,009 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:53:18,009 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:53:18,015 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:53:18,015 INFO sqlalchemy.engine.base.Engine Thread-105 : ()
2020-02-08 22:53:18,016 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:53:18,016 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:53:18,016 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:53:18,018 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:53:18,018 INFO sqlalchemy.engine.base.Engine Thread-105 : (97,)
2020-02-08 22:53:18,019 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:53:18,019 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 22:53:18,019 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 22:53:18,022 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 22:53:18,022 INFO sqlalchemy.engine.base.Engine Thread-105 : (1, 1)
2020-02-08 22:53:18,023 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:53:18,023 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:53:18,026 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:53:18,026 INFO sqlalchemy.engine.base.Engine Thread-105 : (2, 1)
2020-02-08 22:53:18,026 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:53:18,026 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:53:18,084 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:53:18,084 INFO sqlalchemy.engine.base.Engine Thread-105 : ('bob', 1, 1)
2020-02-08 22:53:18,085 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:53:18,089 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:53:18,089 INFO sqlalchemy.engine.base.Engine Thread-105 : ('bob', 1, 1)
2020-02-08 22:53:18,090 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:53:18,092 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:53:18,092 INFO sqlalchemy.engine.base.Engine Thread-105 : ('bob', 1, 1)
2020-02-08 22:53:18,093 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:53:18,094 INFO sqlalchemy.engine.base.Engine Thread-105 : ROLLBACK
2020-02-08 22:56:52,922 INFO sqlalchemy.engine.base.Engine Thread-115 : BEGIN (implicit)
2020-02-08 22:56:52,924 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 22:56:52,924 INFO sqlalchemy.engine.base.Engine Thread-115 : ('13', 1)
2020-02-08 22:56:52,926 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:56:52,927 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:56:52,931 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:56:52,931 INFO sqlalchemy.engine.base.Engine Thread-115 : ()
2020-02-08 22:56:52,932 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:56:52,933 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:56:52,933 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:56:52,934 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:56:52,934 INFO sqlalchemy.engine.base.Engine Thread-115 : (97,)
2020-02-08 22:56:52,935 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:56:52,935 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 22:56:52,935 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 22:56:52,939 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 22:56:52,939 INFO sqlalchemy.engine.base.Engine Thread-115 : (1, 1)
2020-02-08 22:56:52,940 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:56:52,940 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:56:52,942 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:56:52,942 INFO sqlalchemy.engine.base.Engine Thread-115 : (2, 1)
2020-02-08 22:56:52,943 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:56:52,943 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:56:53,002 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:56:53,002 INFO sqlalchemy.engine.base.Engine Thread-115 : ('bob', 1, 1)
2020-02-08 22:56:53,003 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:56:53,008 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:56:53,008 INFO sqlalchemy.engine.base.Engine Thread-115 : ('bob', 1, 1)
2020-02-08 22:56:53,008 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:56:53,010 INFO sqlalchemy.engine.base.Engine Thread-115 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:56:53,010 INFO sqlalchemy.engine.base.Engine Thread-115 : ('bob', 1, 1)
2020-02-08 22:56:53,011 DEBUG sqlalchemy.engine.base.Engine Thread-115 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:56:53,012 INFO sqlalchemy.engine.base.Engine Thread-115 : ROLLBACK
2020-02-08 22:56:57,900 INFO sqlalchemy.engine.base.Engine Thread-125 : BEGIN (implicit)
2020-02-08 22:56:57,901 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:56:57,901 INFO sqlalchemy.engine.base.Engine Thread-125 : (2, 1)
2020-02-08 22:56:57,902 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:56:57,903 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:56:57,905 INFO sqlalchemy.engine.base.Engine Thread-125 : ROLLBACK
2020-02-08 22:56:58,071 INFO sqlalchemy.engine.base.Engine Thread-127 : BEGIN (implicit)
2020-02-08 22:56:58,072 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-08 22:56:58,072 INFO sqlalchemy.engine.base.Engine Thread-127 : ()
2020-02-08 22:56:58,073 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 22:56:58,073 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-08 22:56:58,073 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-08 22:56:58,073 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 22:56:58,075 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:56:58,075 INFO sqlalchemy.engine.base.Engine Thread-127 : (63,)
2020-02-08 22:56:58,076 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:56:58,076 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 22:56:58,076 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 22:56:58,076 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 22:56:58,089 INFO sqlalchemy.engine.base.Engine Thread-127 : ROLLBACK
2020-02-08 22:57:01,103 INFO sqlalchemy.engine.base.Engine Thread-129 : BEGIN (implicit)
2020-02-08 22:57:01,103 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-08 22:57:01,104 INFO sqlalchemy.engine.base.Engine Thread-129 : ()
2020-02-08 22:57:01,104 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 22:57:01,105 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-08 22:57:01,105 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-08 22:57:01,105 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 22:57:01,106 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:57:01,106 INFO sqlalchemy.engine.base.Engine Thread-129 : (63,)
2020-02-08 22:57:01,107 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:57:01,107 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 22:57:01,107 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 22:57:01,107 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 22:57:01,109 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.login_id = %s 
 LIMIT %s
2020-02-08 22:57:01,109 INFO sqlalchemy.engine.base.Engine Thread-129 : ('philip', 1)
2020-02-08 22:57:01,110 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:01,110 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:01,111 INFO sqlalchemy.engine.base.Engine Thread-129 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles 
WHERE roles.id = %s 
 LIMIT %s
2020-02-08 22:57:01,112 INFO sqlalchemy.engine.base.Engine Thread-129 : (2, 1)
2020-02-08 22:57:01,112 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 22:57:01,112 DEBUG sqlalchemy.engine.base.Engine Thread-129 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-08 22:57:01,430 INFO sqlalchemy.engine.base.Engine Thread-129 : ROLLBACK
2020-02-08 22:57:01,488 INFO sqlalchemy.engine.base.Engine Thread-130 : BEGIN (implicit)
2020-02-08 22:57:01,489 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:01,490 INFO sqlalchemy.engine.base.Engine Thread-130 : (1, 1)
2020-02-08 22:57:01,490 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:01,491 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:01,492 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 22:57:01,492 INFO sqlalchemy.engine.base.Engine Thread-130 : ()
2020-02-08 22:57:01,493 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:57:01,493 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 22:57:01,494 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 22:57:01,494 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 22:57:01,494 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 22:57:01,494 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 22:57:01,494 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:57:01,497 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 22:57:01,497 INFO sqlalchemy.engine.base.Engine Thread-130 : ('philip',)
2020-02-08 22:57:01,498 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:57:01,502 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:01,502 INFO sqlalchemy.engine.base.Engine Thread-130 : ('philip', 1, 1)
2020-02-08 22:57:01,503 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:01,503 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:01,506 INFO sqlalchemy.engine.base.Engine Thread-130 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:01,506 INFO sqlalchemy.engine.base.Engine Thread-130 : ('philip', 1, 1)
2020-02-08 22:57:01,507 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:01,507 DEBUG sqlalchemy.engine.base.Engine Thread-130 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:01,510 INFO sqlalchemy.engine.base.Engine Thread-130 : ROLLBACK
2020-02-08 22:57:01,996 INFO sqlalchemy.engine.base.Engine Thread-139 : BEGIN (implicit)
2020-02-08 22:57:01,997 INFO sqlalchemy.engine.base.Engine Thread-139 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:01,997 INFO sqlalchemy.engine.base.Engine Thread-139 : (1, 1)
2020-02-08 22:57:01,998 DEBUG sqlalchemy.engine.base.Engine Thread-139 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:01,998 DEBUG sqlalchemy.engine.base.Engine Thread-139 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:01,999 INFO sqlalchemy.engine.base.Engine Thread-139 : ROLLBACK
2020-02-08 22:57:02,035 INFO sqlalchemy.engine.base.Engine Thread-140 : BEGIN (implicit)
2020-02-08 22:57:02,036 INFO sqlalchemy.engine.base.Engine Thread-140 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:02,036 INFO sqlalchemy.engine.base.Engine Thread-140 : (1, 1)
2020-02-08 22:57:02,036 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:02,037 DEBUG sqlalchemy.engine.base.Engine Thread-140 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:02,038 INFO sqlalchemy.engine.base.Engine Thread-140 : ROLLBACK
2020-02-08 22:57:04,321 INFO sqlalchemy.engine.base.Engine Thread-141 : BEGIN (implicit)
2020-02-08 22:57:04,322 INFO sqlalchemy.engine.base.Engine Thread-141 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 22:57:04,322 INFO sqlalchemy.engine.base.Engine Thread-141 : ('13', 1)
2020-02-08 22:57:04,323 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:57:04,323 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:57:04,328 INFO sqlalchemy.engine.base.Engine Thread-141 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:57:04,328 INFO sqlalchemy.engine.base.Engine Thread-141 : ()
2020-02-08 22:57:04,329 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:57:04,330 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:57:04,330 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:57:04,332 INFO sqlalchemy.engine.base.Engine Thread-141 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:57:04,332 INFO sqlalchemy.engine.base.Engine Thread-141 : (97,)
2020-02-08 22:57:04,332 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:57:04,332 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 22:57:04,332 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 22:57:04,335 INFO sqlalchemy.engine.base.Engine Thread-141 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 22:57:04,336 INFO sqlalchemy.engine.base.Engine Thread-141 : (1, 1)
2020-02-08 22:57:04,336 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:57:04,337 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:57:04,339 INFO sqlalchemy.engine.base.Engine Thread-141 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:04,339 INFO sqlalchemy.engine.base.Engine Thread-141 : (1, 1)
2020-02-08 22:57:04,340 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:04,340 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:04,345 INFO sqlalchemy.engine.base.Engine Thread-141 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:04,345 INFO sqlalchemy.engine.base.Engine Thread-141 : ('philip', 1, 1)
2020-02-08 22:57:04,346 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:04,346 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:04,351 INFO sqlalchemy.engine.base.Engine Thread-141 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:04,351 INFO sqlalchemy.engine.base.Engine Thread-141 : ('philip', 1, 1)
2020-02-08 22:57:04,352 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:04,352 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:04,355 INFO sqlalchemy.engine.base.Engine Thread-141 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:04,355 INFO sqlalchemy.engine.base.Engine Thread-141 : ('philip', 1, 1)
2020-02-08 22:57:04,356 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:04,356 DEBUG sqlalchemy.engine.base.Engine Thread-141 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:04,357 INFO sqlalchemy.engine.base.Engine Thread-141 : ROLLBACK
2020-02-08 22:57:11,738 INFO sqlalchemy.engine.base.Engine Thread-150 : BEGIN (implicit)
2020-02-08 22:57:11,740 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:57:11,740 INFO sqlalchemy.engine.base.Engine Thread-150 : ()
2020-02-08 22:57:11,741 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:57:11,741 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:57:11,742 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:57:11,743 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:11,744 INFO sqlalchemy.engine.base.Engine Thread-150 : (1, 1)
2020-02-08 22:57:11,744 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:11,744 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:11,749 INFO sqlalchemy.engine.base.Engine Thread-150 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:11,749 INFO sqlalchemy.engine.base.Engine Thread-150 : ('philip', 1, 1)
2020-02-08 22:57:11,749 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:11,750 DEBUG sqlalchemy.engine.base.Engine Thread-150 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:11,751 INFO sqlalchemy.engine.base.Engine Thread-150 : ROLLBACK
2020-02-08 22:57:12,195 INFO sqlalchemy.engine.base.Engine Thread-159 : BEGIN (implicit)
2020-02-08 22:57:12,197 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:57:12,197 INFO sqlalchemy.engine.base.Engine Thread-159 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:57:12,198 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:12,198 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:57:12,202 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:57:12,202 INFO sqlalchemy.engine.base.Engine Thread-159 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:57:12,203 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:12,203 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:57:12,207 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:57:12,207 INFO sqlalchemy.engine.base.Engine Thread-159 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:57:12,208 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:12,208 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:57:12,208 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:57:12,211 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:57:12,211 INFO sqlalchemy.engine.base.Engine Thread-159 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:57:12,212 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:12,212 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:12,213 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:12,213 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:12,214 INFO sqlalchemy.engine.base.Engine Thread-159 : ROLLBACK
2020-02-08 22:57:12,249 INFO sqlalchemy.engine.base.Engine Thread-160 : BEGIN (implicit)
2020-02-08 22:57:12,251 INFO sqlalchemy.engine.base.Engine Thread-160 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:57:12,251 INFO sqlalchemy.engine.base.Engine Thread-160 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:57:12,252 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:12,252 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:57:12,255 INFO sqlalchemy.engine.base.Engine Thread-160 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:57:12,256 INFO sqlalchemy.engine.base.Engine Thread-160 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:57:12,256 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:12,257 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:57:12,260 INFO sqlalchemy.engine.base.Engine Thread-160 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:57:12,260 INFO sqlalchemy.engine.base.Engine Thread-160 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:57:12,261 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:12,261 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:57:12,261 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:57:12,265 INFO sqlalchemy.engine.base.Engine Thread-160 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:57:12,265 INFO sqlalchemy.engine.base.Engine Thread-160 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:57:12,266 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:12,266 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:12,266 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:12,266 DEBUG sqlalchemy.engine.base.Engine Thread-160 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:12,267 INFO sqlalchemy.engine.base.Engine Thread-160 : ROLLBACK
2020-02-08 22:57:14,411 INFO sqlalchemy.engine.base.Engine Thread-161 : BEGIN (implicit)
2020-02-08 22:57:14,412 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:14,412 INFO sqlalchemy.engine.base.Engine Thread-161 : (1, 1)
2020-02-08 22:57:14,412 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:14,413 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:14,414 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 22:57:14,415 INFO sqlalchemy.engine.base.Engine Thread-161 : ()
2020-02-08 22:57:14,415 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:57:14,416 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 22:57:14,416 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 22:57:14,416 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 22:57:14,417 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 22:57:14,417 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 22:57:14,417 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:57:14,419 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 22:57:14,419 INFO sqlalchemy.engine.base.Engine Thread-161 : ('philip',)
2020-02-08 22:57:14,420 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:57:14,424 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:14,424 INFO sqlalchemy.engine.base.Engine Thread-161 : ('philip', 1, 1)
2020-02-08 22:57:14,425 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:14,425 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:14,428 INFO sqlalchemy.engine.base.Engine Thread-161 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:14,428 INFO sqlalchemy.engine.base.Engine Thread-161 : ('philip', 1, 1)
2020-02-08 22:57:14,429 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:14,429 DEBUG sqlalchemy.engine.base.Engine Thread-161 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:14,431 INFO sqlalchemy.engine.base.Engine Thread-161 : ROLLBACK
2020-02-08 22:57:14,912 INFO sqlalchemy.engine.base.Engine Thread-170 : BEGIN (implicit)
2020-02-08 22:57:14,913 INFO sqlalchemy.engine.base.Engine Thread-170 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:14,913 INFO sqlalchemy.engine.base.Engine Thread-170 : (1, 1)
2020-02-08 22:57:14,914 DEBUG sqlalchemy.engine.base.Engine Thread-170 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:14,914 DEBUG sqlalchemy.engine.base.Engine Thread-170 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:14,915 INFO sqlalchemy.engine.base.Engine Thread-170 : ROLLBACK
2020-02-08 22:57:14,938 INFO sqlalchemy.engine.base.Engine Thread-171 : BEGIN (implicit)
2020-02-08 22:57:14,939 INFO sqlalchemy.engine.base.Engine Thread-171 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:14,939 INFO sqlalchemy.engine.base.Engine Thread-171 : (1, 1)
2020-02-08 22:57:14,940 DEBUG sqlalchemy.engine.base.Engine Thread-171 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:14,940 DEBUG sqlalchemy.engine.base.Engine Thread-171 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:14,941 INFO sqlalchemy.engine.base.Engine Thread-171 : ROLLBACK
2020-02-08 22:57:20,090 INFO sqlalchemy.engine.base.Engine Thread-172 : BEGIN (implicit)
2020-02-08 22:57:20,091 INFO sqlalchemy.engine.base.Engine Thread-172 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:20,091 INFO sqlalchemy.engine.base.Engine Thread-172 : (1, 1)
2020-02-08 22:57:20,092 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:20,093 DEBUG sqlalchemy.engine.base.Engine Thread-172 : Row (1, 'philip', 'Philip', 'Troon', 'User account for Philip Troon', '$2b$12$pyyaZQRkxyVdz8SXVmrRCepr6UXs38rin1uk/Nqtqd9Q3WUuojF0i', 'philiptroon@gmail.com', 2, 70, datetime.datetime(2019, 8, 28, 11, 46, 8), datetime.datetime(2020, 1, 6, 15, 34, 8), datetime.datetime(2020, 1, 30, 8, 56, 35), 'philip', 0)
2020-02-08 22:57:20,096 INFO sqlalchemy.engine.base.Engine Thread-172 : ROLLBACK
2020-02-08 22:57:20,247 INFO sqlalchemy.engine.base.Engine Thread-174 : BEGIN (implicit)
2020-02-08 22:57:20,248 INFO sqlalchemy.engine.base.Engine Thread-174 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-08 22:57:20,248 INFO sqlalchemy.engine.base.Engine Thread-174 : ()
2020-02-08 22:57:20,249 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 22:57:20,249 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-08 22:57:20,249 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-08 22:57:20,249 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 22:57:20,251 INFO sqlalchemy.engine.base.Engine Thread-174 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:57:20,251 INFO sqlalchemy.engine.base.Engine Thread-174 : (63,)
2020-02-08 22:57:20,251 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:57:20,252 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 22:57:20,252 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 22:57:20,252 DEBUG sqlalchemy.engine.base.Engine Thread-174 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 22:57:20,253 INFO sqlalchemy.engine.base.Engine Thread-174 : ROLLBACK
2020-02-08 22:57:22,615 INFO sqlalchemy.engine.base.Engine Thread-176 : BEGIN (implicit)
2020-02-08 22:57:22,616 INFO sqlalchemy.engine.base.Engine Thread-176 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles ORDER BY roles.role_name
2020-02-08 22:57:22,616 INFO sqlalchemy.engine.base.Engine Thread-176 : ()
2020-02-08 22:57:22,616 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 22:57:22,616 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (2, 'Administrator User Access', 1, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 37, 55), 1)
2020-02-08 22:57:22,617 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (6, 'New User (No Login)', 0, '', datetime.datetime(2020, 2, 4, 12, 44, 31), 1)
2020-02-08 22:57:22,617 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 22:57:22,618 INFO sqlalchemy.engine.base.Engine Thread-176 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:57:22,618 INFO sqlalchemy.engine.base.Engine Thread-176 : (63,)
2020-02-08 22:57:22,619 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:57:22,619 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (70, 'Main-Organisation', 'Main-Organisation', 63, 0, 0, 0)
2020-02-08 22:57:22,619 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (64, 'Vendor-name1', 'Vendor-name1', 63, 0, 0, 0)
2020-02-08 22:57:22,619 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (65, 'Vendor-name2', 'Vendor-name2', 63, 0, 0, 0)
2020-02-08 22:57:22,622 INFO sqlalchemy.engine.base.Engine Thread-176 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.login_id = %s 
 LIMIT %s
2020-02-08 22:57:22,622 INFO sqlalchemy.engine.base.Engine Thread-176 : ('bob', 1)
2020-02-08 22:57:22,622 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:22,623 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:57:22,624 INFO sqlalchemy.engine.base.Engine Thread-176 : SELECT roles.id AS roles_id, roles.role_name AS roles_role_name, roles.role_admin AS roles_role_admin, roles.role_app_sections AS roles_role_app_sections, roles.created_date AS roles_created_date, roles.enabled AS roles_enabled 
FROM roles 
WHERE roles.id = %s 
 LIMIT %s
2020-02-08 22:57:22,624 INFO sqlalchemy.engine.base.Engine Thread-176 : (1, 1)
2020-02-08 22:57:22,625 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Col ('roles_id', 'roles_role_name', 'roles_role_admin', 'roles_role_app_sections', 'roles_created_date', 'roles_enabled')
2020-02-08 22:57:22,625 DEBUG sqlalchemy.engine.base.Engine Thread-176 : Row (1, 'Standard User Access', 0, 'LOGIN', datetime.datetime(2020, 1, 29, 19, 35, 33), 1)
2020-02-08 22:57:22,953 INFO sqlalchemy.engine.base.Engine Thread-176 : ROLLBACK
2020-02-08 22:57:23,011 INFO sqlalchemy.engine.base.Engine Thread-177 : BEGIN (implicit)
2020-02-08 22:57:23,012 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:23,012 INFO sqlalchemy.engine.base.Engine Thread-177 : (2, 1)
2020-02-08 22:57:23,013 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:23,013 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:57:23,015 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 22:57:23,015 INFO sqlalchemy.engine.base.Engine Thread-177 : ()
2020-02-08 22:57:23,016 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:57:23,016 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 22:57:23,016 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 22:57:23,016 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 22:57:23,016 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 22:57:23,016 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 22:57:23,016 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:57:23,019 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 22:57:23,019 INFO sqlalchemy.engine.base.Engine Thread-177 : ('bob',)
2020-02-08 22:57:23,019 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:57:23,020 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:57:23,025 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:23,025 INFO sqlalchemy.engine.base.Engine Thread-177 : ('bob', 1, 1)
2020-02-08 22:57:23,026 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:23,028 INFO sqlalchemy.engine.base.Engine Thread-177 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:23,029 INFO sqlalchemy.engine.base.Engine Thread-177 : ('bob', 1, 1)
2020-02-08 22:57:23,029 DEBUG sqlalchemy.engine.base.Engine Thread-177 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:23,031 INFO sqlalchemy.engine.base.Engine Thread-177 : ROLLBACK
2020-02-08 22:57:23,521 INFO sqlalchemy.engine.base.Engine Thread-186 : BEGIN (implicit)
2020-02-08 22:57:23,522 INFO sqlalchemy.engine.base.Engine Thread-186 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:23,522 INFO sqlalchemy.engine.base.Engine Thread-186 : (2, 1)
2020-02-08 22:57:23,523 DEBUG sqlalchemy.engine.base.Engine Thread-186 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:23,523 DEBUG sqlalchemy.engine.base.Engine Thread-186 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:57:23,524 INFO sqlalchemy.engine.base.Engine Thread-186 : ROLLBACK
2020-02-08 22:57:23,553 INFO sqlalchemy.engine.base.Engine Thread-187 : BEGIN (implicit)
2020-02-08 22:57:23,554 INFO sqlalchemy.engine.base.Engine Thread-187 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:23,554 INFO sqlalchemy.engine.base.Engine Thread-187 : (2, 1)
2020-02-08 22:57:23,555 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:23,555 DEBUG sqlalchemy.engine.base.Engine Thread-187 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:57:23,556 INFO sqlalchemy.engine.base.Engine Thread-187 : ROLLBACK
2020-02-08 22:57:53,244 INFO sqlalchemy.engine.base.Engine Thread-188 : BEGIN (implicit)
2020-02-08 22:57:53,245 INFO sqlalchemy.engine.base.Engine Thread-188 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:57:53,245 INFO sqlalchemy.engine.base.Engine Thread-188 : (71,)
2020-02-08 22:57:53,245 DEBUG sqlalchemy.engine.base.Engine Thread-188 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:57:53,246 DEBUG sqlalchemy.engine.base.Engine Thread-188 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 22:57:53,246 DEBUG sqlalchemy.engine.base.Engine Thread-188 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 22:57:53,246 DEBUG sqlalchemy.engine.base.Engine Thread-188 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 22:57:53,248 INFO sqlalchemy.engine.base.Engine Thread-188 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:53,248 INFO sqlalchemy.engine.base.Engine Thread-188 : (2, 1)
2020-02-08 22:57:53,249 DEBUG sqlalchemy.engine.base.Engine Thread-188 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:53,249 DEBUG sqlalchemy.engine.base.Engine Thread-188 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:57:53,267 INFO sqlalchemy.engine.base.Engine Thread-188 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:53,267 INFO sqlalchemy.engine.base.Engine Thread-188 : ('bob', 1, 1)
2020-02-08 22:57:53,268 DEBUG sqlalchemy.engine.base.Engine Thread-188 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:53,269 INFO sqlalchemy.engine.base.Engine Thread-188 : ROLLBACK
2020-02-08 22:57:56,324 INFO sqlalchemy.engine.base.Engine Thread-197 : BEGIN (implicit)
2020-02-08 22:57:56,325 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:57:56,325 INFO sqlalchemy.engine.base.Engine Thread-197 : (71,)
2020-02-08 22:57:56,326 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:57:56,326 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (74, 'Everything', "{ \r\n'name' : 'Everything', \r\n'id' : 1, \r\n'query' : '' \r\n}", 71, 0, 0, 1)
2020-02-08 22:57:56,326 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (72, 'Parameters', '{\r\n\'name\' : \'Parameters\',\r\n\'id\' : 2,\r\n\'query\' : \'parameter.param_name.like("%{}%")\'\r\n}', 71, 0, 0, 1)
2020-02-08 22:57:56,326 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (73, 'Users', '{ \r\n\'name\' : \'Users\',\r\n\'id\' : 3,\r\n\'query\' : \'users.forename.like("%{}%") | users.surname.like("%{}%")\' \r\n}', 71, 0, 0, 1)
2020-02-08 22:57:56,330 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT datesofinterest_1.id AS datesofinterest_1_id, datesofinterest_1.doi_name AS name, datesofinterest_1.doi_comment AS description, datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end 
FROM datesofinterest AS datesofinterest_1 
WHERE lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s) OR lower(concat(concat(datesofinterest_1.doi_comment, %s), datesofinterest_1.doi_name)) LIKE lower(%s)
2020-02-08 22:57:56,330 INFO sqlalchemy.engine.base.Engine Thread-197 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 22:57:56,331 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('datesofinterest_1_id', 'name', 'description', 'start', 'end')
2020-02-08 22:57:56,331 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (11, 'Christmas Day', 'Christmas Day', datetime.datetime(2020, 12, 25, 0, 0), datetime.datetime(2020, 12, 25, 23, 45))
2020-02-08 22:57:56,331 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (18, 'Test Feb', 'Test Feb', datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45))
2020-02-08 22:57:56,336 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT bookings_1.id AS bookings_1_id, bookings_1.title AS name, bookings_1.description AS bookings_1_description, bookings_1.start_dt AS start, bookings_1.end_dt AS end 
FROM bookings AS bookings_1 
WHERE lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s) OR lower(concat(concat(bookings_1.description, %s), bookings_1.title)) LIKE lower(%s)
2020-02-08 22:57:56,336 INFO sqlalchemy.engine.base.Engine Thread-197 : (' ', '%test%', ' ', '%Christmas%')
2020-02-08 22:57:56,337 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('bookings_1_id', 'name', 'bookings_1_description', 'start', 'end')
2020-02-08 22:57:56,337 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (7, 'Test Booking', 'testing', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0))
2020-02-08 22:57:56,337 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (8, 'Test Booking 2', 'testing 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0))
2020-02-08 22:57:56,337 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (9, 'Test Booking 3', 'testing', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0))
2020-02-08 22:57:56,337 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (11, 'Test Booking 6', 'test', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0))
2020-02-08 22:57:56,337 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (12, 'Test Booking zz', 'zzz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0))
2020-02-08 22:57:56,339 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:56,339 INFO sqlalchemy.engine.base.Engine Thread-197 : (2, 1)
2020-02-08 22:57:56,340 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:56,340 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:57:56,344 INFO sqlalchemy.engine.base.Engine Thread-197 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:56,344 INFO sqlalchemy.engine.base.Engine Thread-197 : ('bob', 1, 1)
2020-02-08 22:57:56,345 DEBUG sqlalchemy.engine.base.Engine Thread-197 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:56,347 INFO sqlalchemy.engine.base.Engine Thread-197 : ROLLBACK
2020-02-08 22:57:58,065 INFO sqlalchemy.engine.base.Engine Thread-206 : BEGIN (implicit)
2020-02-08 22:57:58,067 INFO sqlalchemy.engine.base.Engine Thread-206 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:57:58,067 INFO sqlalchemy.engine.base.Engine Thread-206 : ()
2020-02-08 22:57:58,068 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:57:58,068 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:57:58,069 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:57:58,071 INFO sqlalchemy.engine.base.Engine Thread-206 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:57:58,071 INFO sqlalchemy.engine.base.Engine Thread-206 : (2, 1)
2020-02-08 22:57:58,072 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:58,072 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:57:58,076 INFO sqlalchemy.engine.base.Engine Thread-206 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:57:58,076 INFO sqlalchemy.engine.base.Engine Thread-206 : ('bob', 1, 1)
2020-02-08 22:57:58,077 DEBUG sqlalchemy.engine.base.Engine Thread-206 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:57:58,078 INFO sqlalchemy.engine.base.Engine Thread-206 : ROLLBACK
2020-02-08 22:57:58,493 INFO sqlalchemy.engine.base.Engine Thread-215 : BEGIN (implicit)
2020-02-08 22:57:58,495 INFO sqlalchemy.engine.base.Engine Thread-215 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:57:58,495 INFO sqlalchemy.engine.base.Engine Thread-215 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:57:58,496 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:58,496 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:57:58,500 INFO sqlalchemy.engine.base.Engine Thread-215 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:57:58,500 INFO sqlalchemy.engine.base.Engine Thread-215 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:57:58,501 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:58,501 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:57:58,505 INFO sqlalchemy.engine.base.Engine Thread-215 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:57:58,505 INFO sqlalchemy.engine.base.Engine Thread-215 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:57:58,506 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:58,506 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:57:58,506 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:57:58,510 INFO sqlalchemy.engine.base.Engine Thread-215 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:57:58,510 INFO sqlalchemy.engine.base.Engine Thread-215 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:57:58,511 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:58,511 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:58,511 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:58,511 DEBUG sqlalchemy.engine.base.Engine Thread-215 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:58,512 INFO sqlalchemy.engine.base.Engine Thread-215 : ROLLBACK
2020-02-08 22:57:58,533 INFO sqlalchemy.engine.base.Engine Thread-216 : BEGIN (implicit)
2020-02-08 22:57:58,535 INFO sqlalchemy.engine.base.Engine Thread-216 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:57:58,535 INFO sqlalchemy.engine.base.Engine Thread-216 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:57:58,536 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:58,536 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:57:58,539 INFO sqlalchemy.engine.base.Engine Thread-216 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:57:58,539 INFO sqlalchemy.engine.base.Engine Thread-216 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:57:58,540 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:58,541 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:57:58,544 INFO sqlalchemy.engine.base.Engine Thread-216 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:57:58,544 INFO sqlalchemy.engine.base.Engine Thread-216 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:57:58,545 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:58,545 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:57:58,545 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:57:58,549 INFO sqlalchemy.engine.base.Engine Thread-216 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:57:58,549 INFO sqlalchemy.engine.base.Engine Thread-216 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:57:58,549 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:57:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:58,550 DEBUG sqlalchemy.engine.base.Engine Thread-216 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:57:58,551 INFO sqlalchemy.engine.base.Engine Thread-216 : ROLLBACK
2020-02-08 22:58:01,135 INFO sqlalchemy.engine.base.Engine Thread-217 : BEGIN (implicit)
2020-02-08 22:58:01,136 INFO sqlalchemy.engine.base.Engine Thread-217 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:58:01,136 INFO sqlalchemy.engine.base.Engine Thread-217 : (2, 1)
2020-02-08 22:58:01,137 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:01,137 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:58:01,139 INFO sqlalchemy.engine.base.Engine Thread-217 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 22:58:01,139 INFO sqlalchemy.engine.base.Engine Thread-217 : ()
2020-02-08 22:58:01,140 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:58:01,140 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 22:58:01,140 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 22:58:01,140 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 22:58:01,140 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 22:58:01,140 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 22:58:01,140 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:58:01,143 INFO sqlalchemy.engine.base.Engine Thread-217 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 22:58:01,143 INFO sqlalchemy.engine.base.Engine Thread-217 : ('bob',)
2020-02-08 22:58:01,144 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:58:01,144 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:58:01,148 INFO sqlalchemy.engine.base.Engine Thread-217 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:58:01,148 INFO sqlalchemy.engine.base.Engine Thread-217 : ('bob', 1, 1)
2020-02-08 22:58:01,149 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:01,152 INFO sqlalchemy.engine.base.Engine Thread-217 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:58:01,152 INFO sqlalchemy.engine.base.Engine Thread-217 : ('bob', 1, 1)
2020-02-08 22:58:01,153 DEBUG sqlalchemy.engine.base.Engine Thread-217 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:01,154 INFO sqlalchemy.engine.base.Engine Thread-217 : ROLLBACK
2020-02-08 22:58:01,685 INFO sqlalchemy.engine.base.Engine Thread-226 : BEGIN (implicit)
2020-02-08 22:58:01,686 INFO sqlalchemy.engine.base.Engine Thread-226 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:58:01,686 INFO sqlalchemy.engine.base.Engine Thread-226 : (2, 1)
2020-02-08 22:58:01,687 DEBUG sqlalchemy.engine.base.Engine Thread-226 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:01,687 DEBUG sqlalchemy.engine.base.Engine Thread-226 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:58:01,688 INFO sqlalchemy.engine.base.Engine Thread-226 : ROLLBACK
2020-02-08 22:58:01,705 INFO sqlalchemy.engine.base.Engine Thread-227 : BEGIN (implicit)
2020-02-08 22:58:01,706 INFO sqlalchemy.engine.base.Engine Thread-227 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:58:01,706 INFO sqlalchemy.engine.base.Engine Thread-227 : (2, 1)
2020-02-08 22:58:01,707 DEBUG sqlalchemy.engine.base.Engine Thread-227 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:01,707 DEBUG sqlalchemy.engine.base.Engine Thread-227 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:58:01,708 INFO sqlalchemy.engine.base.Engine Thread-227 : ROLLBACK
2020-02-08 22:58:02,313 INFO sqlalchemy.engine.base.Engine Thread-228 : BEGIN (implicit)
2020-02-08 22:58:02,314 INFO sqlalchemy.engine.base.Engine Thread-228 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 22:58:02,315 INFO sqlalchemy.engine.base.Engine Thread-228 : ('13', 1)
2020-02-08 22:58:02,315 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:58:02,316 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:58:02,320 INFO sqlalchemy.engine.base.Engine Thread-228 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:58:02,321 INFO sqlalchemy.engine.base.Engine Thread-228 : ()
2020-02-08 22:58:02,323 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:58:02,324 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:58:02,324 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:58:02,325 INFO sqlalchemy.engine.base.Engine Thread-228 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:58:02,325 INFO sqlalchemy.engine.base.Engine Thread-228 : (97,)
2020-02-08 22:58:02,326 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:58:02,326 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 22:58:02,326 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 22:58:02,329 INFO sqlalchemy.engine.base.Engine Thread-228 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 22:58:02,330 INFO sqlalchemy.engine.base.Engine Thread-228 : (1, 1)
2020-02-08 22:58:02,330 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:58:02,331 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:58:02,333 INFO sqlalchemy.engine.base.Engine Thread-228 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:58:02,333 INFO sqlalchemy.engine.base.Engine Thread-228 : (2, 1)
2020-02-08 22:58:02,334 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:02,334 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:58:02,338 INFO sqlalchemy.engine.base.Engine Thread-228 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:58:02,338 INFO sqlalchemy.engine.base.Engine Thread-228 : ('bob', 1, 1)
2020-02-08 22:58:02,339 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:02,343 INFO sqlalchemy.engine.base.Engine Thread-228 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:58:02,343 INFO sqlalchemy.engine.base.Engine Thread-228 : ('bob', 1, 1)
2020-02-08 22:58:02,344 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:02,346 INFO sqlalchemy.engine.base.Engine Thread-228 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:58:02,347 INFO sqlalchemy.engine.base.Engine Thread-228 : ('bob', 1, 1)
2020-02-08 22:58:02,347 DEBUG sqlalchemy.engine.base.Engine Thread-228 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:02,348 INFO sqlalchemy.engine.base.Engine Thread-228 : ROLLBACK
2020-02-08 22:58:30,351 INFO sqlalchemy.engine.base.Engine Thread-237 : BEGIN (implicit)
2020-02-08 22:58:30,354 INFO sqlalchemy.engine.base.Engine Thread-237 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:58:30,354 INFO sqlalchemy.engine.base.Engine Thread-237 : ()
2020-02-08 22:58:30,355 DEBUG sqlalchemy.engine.base.Engine Thread-237 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:58:30,356 DEBUG sqlalchemy.engine.base.Engine Thread-237 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:58:30,356 DEBUG sqlalchemy.engine.base.Engine Thread-237 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:58:30,358 INFO sqlalchemy.engine.base.Engine Thread-237 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:58:30,358 INFO sqlalchemy.engine.base.Engine Thread-237 : (2, 1)
2020-02-08 22:58:30,359 DEBUG sqlalchemy.engine.base.Engine Thread-237 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:30,359 DEBUG sqlalchemy.engine.base.Engine Thread-237 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:58:30,365 INFO sqlalchemy.engine.base.Engine Thread-237 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:58:30,365 INFO sqlalchemy.engine.base.Engine Thread-237 : ('bob', 1, 1)
2020-02-08 22:58:30,365 DEBUG sqlalchemy.engine.base.Engine Thread-237 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:30,367 INFO sqlalchemy.engine.base.Engine Thread-237 : ROLLBACK
2020-02-08 22:58:30,942 INFO sqlalchemy.engine.base.Engine Thread-246 : BEGIN (implicit)
2020-02-08 22:58:30,943 INFO sqlalchemy.engine.base.Engine Thread-246 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:58:30,944 INFO sqlalchemy.engine.base.Engine Thread-246 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:58:30,945 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:58:30,945 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:58:30,948 INFO sqlalchemy.engine.base.Engine Thread-246 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:58:30,949 INFO sqlalchemy.engine.base.Engine Thread-246 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:58:30,949 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:58:30,950 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:58:30,953 INFO sqlalchemy.engine.base.Engine Thread-246 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:58:30,953 INFO sqlalchemy.engine.base.Engine Thread-246 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:58:30,954 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:58:30,954 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:58:30,954 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:58:30,957 INFO sqlalchemy.engine.base.Engine Thread-246 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:58:30,958 INFO sqlalchemy.engine.base.Engine Thread-246 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:58:30,958 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:58:30,959 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:58:30,959 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:58:30,959 DEBUG sqlalchemy.engine.base.Engine Thread-246 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:58:30,960 INFO sqlalchemy.engine.base.Engine Thread-246 : ROLLBACK
2020-02-08 22:58:30,987 INFO sqlalchemy.engine.base.Engine Thread-247 : BEGIN (implicit)
2020-02-08 22:58:30,988 INFO sqlalchemy.engine.base.Engine Thread-247 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:58:30,988 INFO sqlalchemy.engine.base.Engine Thread-247 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 22:58:30,989 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:58:30,989 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 22:58:30,992 INFO sqlalchemy.engine.base.Engine Thread-247 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 22:58:30,992 INFO sqlalchemy.engine.base.Engine Thread-247 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 22:58:30,993 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:58:30,993 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 22:58:30,996 INFO sqlalchemy.engine.base.Engine Thread-247 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 22:58:30,997 INFO sqlalchemy.engine.base.Engine Thread-247 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:58:30,997 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:58:30,997 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:58:30,998 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 22:58:31,000 INFO sqlalchemy.engine.base.Engine Thread-247 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 22:58:31,001 INFO sqlalchemy.engine.base.Engine Thread-247 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 22:58:31,001 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 22:58:31,002 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:58:31,002 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:58:31,002 DEBUG sqlalchemy.engine.base.Engine Thread-247 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 22:58:31,003 INFO sqlalchemy.engine.base.Engine Thread-247 : ROLLBACK
2020-02-08 22:58:33,349 INFO sqlalchemy.engine.base.Engine Thread-248 : BEGIN (implicit)
2020-02-08 22:58:33,350 INFO sqlalchemy.engine.base.Engine Thread-248 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:58:33,350 INFO sqlalchemy.engine.base.Engine Thread-248 : (2, 1)
2020-02-08 22:58:33,351 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:33,351 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:58:33,353 INFO sqlalchemy.engine.base.Engine Thread-248 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 22:58:33,353 INFO sqlalchemy.engine.base.Engine Thread-248 : ()
2020-02-08 22:58:33,354 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:58:33,354 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 22:58:33,354 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 22:58:33,354 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 22:58:33,354 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 22:58:33,355 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 22:58:33,355 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:58:33,357 INFO sqlalchemy.engine.base.Engine Thread-248 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 22:58:33,357 INFO sqlalchemy.engine.base.Engine Thread-248 : ('bob',)
2020-02-08 22:58:33,358 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:58:33,358 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:58:33,362 INFO sqlalchemy.engine.base.Engine Thread-248 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:58:33,362 INFO sqlalchemy.engine.base.Engine Thread-248 : ('bob', 1, 1)
2020-02-08 22:58:33,363 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:33,365 INFO sqlalchemy.engine.base.Engine Thread-248 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:58:33,365 INFO sqlalchemy.engine.base.Engine Thread-248 : ('bob', 1, 1)
2020-02-08 22:58:33,366 DEBUG sqlalchemy.engine.base.Engine Thread-248 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:58:33,367 INFO sqlalchemy.engine.base.Engine Thread-248 : ROLLBACK
2020-02-08 22:59:58,310 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 22:59:58,311 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:59:58,312 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 22:59:58,312 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 22:59:58,313 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 22:59:58,313 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:59:58,313 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 22:59:58,314 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 22:59:58,314 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 22:59:58,314 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:59:58,314 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 22:59:58,314 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 22:59:58,315 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 22:59:58,315 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:59:58,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 22:59:58,316 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 22:59:58,317 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 22:59:58,317 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:59:58,317 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 22:59:58,317 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:59:58,318 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 22:59:58,318 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:59:58,319 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 22:59:58,322 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 22:59:58,322 INFO sqlalchemy.engine.base.Engine Thread-2 : ('13', 1)
2020-02-08 22:59:58,323 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 22:59:58,323 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 22:59:58,333 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 22:59:58,333 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 22:59:58,335 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:59:58,335 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:59:58,335 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 22:59:58,338 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 22:59:58,338 INFO sqlalchemy.engine.base.Engine Thread-2 : (97,)
2020-02-08 22:59:58,338 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 22:59:58,339 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 22:59:58,339 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 22:59:58,342 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 22:59:58,342 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 22:59:58,343 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 22:59:58,343 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 22:59:58,351 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 22:59:58,351 INFO sqlalchemy.engine.base.Engine Thread-2 : (2, 1)
2020-02-08 22:59:58,352 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:59:58,352 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 22:59:58,468 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:59:58,468 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 22:59:58,469 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:59:58,474 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:59:58,474 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 22:59:58,474 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:59:58,477 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 22:59:58,477 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 22:59:58,478 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 22:59:58,480 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 23:00:01,835 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 23:00:01,837 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:00:01,837 INFO sqlalchemy.engine.base.Engine Thread-11 : ()
2020-02-08 23:00:01,838 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:00:01,839 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:00:01,839 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:00:01,841 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:00:01,841 INFO sqlalchemy.engine.base.Engine Thread-11 : (2, 1)
2020-02-08 23:00:01,841 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:00:01,842 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:00:01,855 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:00:01,855 INFO sqlalchemy.engine.base.Engine Thread-11 : ('bob', 1, 1)
2020-02-08 23:00:01,856 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:00:01,857 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 23:00:02,278 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-02-08 23:00:02,281 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:00:02,281 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 23:00:02,282 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:00:02,282 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 23:00:02,286 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:00:02,286 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 23:00:02,287 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:00:02,287 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 23:00:02,291 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 23:00:02,291 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:00:02,292 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:00:02,292 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:00:02,292 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:00:02,296 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 23:00:02,296 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:00:02,297 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:00:02,297 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:00:02,297 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:00:02,297 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:00:02,298 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-02-08 23:00:02,334 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-02-08 23:00:02,336 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:00:02,336 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 23:00:02,337 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:00:02,337 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 23:00:02,341 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:00:02,341 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 23:00:02,341 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:00:02,342 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 23:00:02,345 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 23:00:02,345 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:00:02,346 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:00:02,346 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:00:02,346 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:00:02,350 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 23:00:02,350 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:00:02,351 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:00:02,351 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:00:02,351 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:00:02,351 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:00:02,352 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-02-08 23:00:04,114 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-02-08 23:00:04,115 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:00:04,115 INFO sqlalchemy.engine.base.Engine Thread-22 : (2, 1)
2020-02-08 23:00:04,116 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:00:04,116 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:00:04,118 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 23:00:04,118 INFO sqlalchemy.engine.base.Engine Thread-22 : ()
2020-02-08 23:00:04,119 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:00:04,119 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 23:00:04,119 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 23:00:04,119 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 23:00:04,119 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 23:00:04,119 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 23:00:04,120 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:00:04,122 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 23:00:04,122 INFO sqlalchemy.engine.base.Engine Thread-22 : ('bob',)
2020-02-08 23:00:04,122 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:00:04,123 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:00:04,144 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:00:04,144 INFO sqlalchemy.engine.base.Engine Thread-22 : ('bob', 1, 1)
2020-02-08 23:00:04,144 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:00:04,147 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:00:04,147 INFO sqlalchemy.engine.base.Engine Thread-22 : ('bob', 1, 1)
2020-02-08 23:00:04,148 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:00:04,149 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-02-08 23:03:47,092 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'sql_mode'
2020-02-08 23:03:47,093 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 23:03:47,094 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 23:03:47,094 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('sql_mode', '')
2020-02-08 23:03:47,095 INFO sqlalchemy.engine.base.Engine Thread-2 : SHOW VARIABLES LIKE 'lower_case_table_names'
2020-02-08 23:03:47,095 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 23:03:47,096 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Variable_name', 'Value')
2020-02-08 23:03:47,096 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('lower_case_table_names', '0')
2020-02-08 23:03:47,096 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT DATABASE()
2020-02-08 23:03:47,096 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 23:03:47,097 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('DATABASE()',)
2020-02-08 23:03:47,097 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('fmapp',)
2020-02-08 23:03:47,097 INFO sqlalchemy.engine.base.Engine Thread-2 : show collation where `Charset` = 'utf8mb4' and `Collation` = 'utf8mb4_bin'
2020-02-08 23:03:47,097 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 23:03:47,098 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('Collation', 'Charset', 'Id', 'Default', 'Compiled', 'Sortlen')
2020-02-08 23:03:47,098 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row ('utf8mb4_bin', 'utf8mb4', 46, '', 'Yes', 1)
2020-02-08 23:03:47,099 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test plain returns' AS CHAR(60)) AS anon_1
2020-02-08 23:03:47,099 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 23:03:47,099 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test unicode returns' AS CHAR(60)) AS anon_1
2020-02-08 23:03:47,100 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 23:03:47,100 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT CAST('test collated returns' AS CHAR CHARACTER SET utf8mb4) COLLATE utf8mb4_bin AS anon_1
2020-02-08 23:03:47,100 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 23:03:47,101 INFO sqlalchemy.engine.base.Engine Thread-2 : BEGIN (implicit)
2020-02-08 23:03:47,104 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 23:03:47,104 INFO sqlalchemy.engine.base.Engine Thread-2 : ('13', 1)
2020-02-08 23:03:47,105 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:03:47,105 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:03:47,115 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:03:47,115 INFO sqlalchemy.engine.base.Engine Thread-2 : ()
2020-02-08 23:03:47,116 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:03:47,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:03:47,117 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:03:47,119 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 23:03:47,119 INFO sqlalchemy.engine.base.Engine Thread-2 : (97,)
2020-02-08 23:03:47,120 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 23:03:47,120 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 23:03:47,120 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 23:03:47,123 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 23:03:47,123 INFO sqlalchemy.engine.base.Engine Thread-2 : (1, 1)
2020-02-08 23:03:47,124 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:03:47,125 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:03:47,132 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:03:47,132 INFO sqlalchemy.engine.base.Engine Thread-2 : (2, 1)
2020-02-08 23:03:47,133 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:03:47,133 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:03:47,242 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:03:47,242 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 23:03:47,243 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:03:47,247 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:03:47,247 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 23:03:47,248 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:03:47,250 INFO sqlalchemy.engine.base.Engine Thread-2 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:03:47,250 INFO sqlalchemy.engine.base.Engine Thread-2 : ('bob', 1, 1)
2020-02-08 23:03:47,251 DEBUG sqlalchemy.engine.base.Engine Thread-2 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:03:47,252 INFO sqlalchemy.engine.base.Engine Thread-2 : ROLLBACK
2020-02-08 23:03:52,827 INFO sqlalchemy.engine.base.Engine Thread-11 : BEGIN (implicit)
2020-02-08 23:03:52,830 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:03:52,830 INFO sqlalchemy.engine.base.Engine Thread-11 : ()
2020-02-08 23:03:52,831 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:03:52,831 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:03:52,831 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:03:52,833 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:03:52,833 INFO sqlalchemy.engine.base.Engine Thread-11 : (2, 1)
2020-02-08 23:03:52,834 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:03:52,834 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:03:52,847 INFO sqlalchemy.engine.base.Engine Thread-11 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:03:52,847 INFO sqlalchemy.engine.base.Engine Thread-11 : ('bob', 1, 1)
2020-02-08 23:03:52,847 DEBUG sqlalchemy.engine.base.Engine Thread-11 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:03:52,849 INFO sqlalchemy.engine.base.Engine Thread-11 : ROLLBACK
2020-02-08 23:03:53,304 INFO sqlalchemy.engine.base.Engine Thread-20 : BEGIN (implicit)
2020-02-08 23:03:53,306 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:03:53,306 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 23:03:53,307 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:03:53,308 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 23:03:53,311 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:03:53,311 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 23:03:53,312 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:03:53,312 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 23:03:53,315 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 23:03:53,315 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:03:53,316 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:03:53,316 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:03:53,316 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:03:53,319 INFO sqlalchemy.engine.base.Engine Thread-20 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 23:03:53,319 INFO sqlalchemy.engine.base.Engine Thread-20 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:03:53,320 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:03:53,320 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:03:53,320 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:03:53,320 DEBUG sqlalchemy.engine.base.Engine Thread-20 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:03:53,321 INFO sqlalchemy.engine.base.Engine Thread-20 : ROLLBACK
2020-02-08 23:03:53,341 INFO sqlalchemy.engine.base.Engine Thread-21 : BEGIN (implicit)
2020-02-08 23:03:53,342 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:03:53,342 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 23:03:53,343 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:03:53,343 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 23:03:53,346 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:03:53,346 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 23:03:53,347 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:03:53,347 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 23:03:53,350 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 23:03:53,350 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:03:53,351 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:03:53,351 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:03:53,351 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:03:53,355 INFO sqlalchemy.engine.base.Engine Thread-21 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 23:03:53,355 INFO sqlalchemy.engine.base.Engine Thread-21 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:03:53,356 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:03:53,356 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:03:53,356 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:03:53,356 DEBUG sqlalchemy.engine.base.Engine Thread-21 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:03:53,357 INFO sqlalchemy.engine.base.Engine Thread-21 : ROLLBACK
2020-02-08 23:03:55,061 INFO sqlalchemy.engine.base.Engine Thread-22 : BEGIN (implicit)
2020-02-08 23:03:55,062 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:03:55,062 INFO sqlalchemy.engine.base.Engine Thread-22 : (2, 1)
2020-02-08 23:03:55,063 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:03:55,063 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:03:55,065 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 23:03:55,065 INFO sqlalchemy.engine.base.Engine Thread-22 : ()
2020-02-08 23:03:55,066 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:03:55,066 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 23:03:55,066 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 23:03:55,066 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 23:03:55,066 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 23:03:55,067 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 23:03:55,067 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:03:55,069 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 23:03:55,069 INFO sqlalchemy.engine.base.Engine Thread-22 : ('bob',)
2020-02-08 23:03:55,070 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:03:55,070 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:03:55,091 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:03:55,091 INFO sqlalchemy.engine.base.Engine Thread-22 : ('bob', 1, 1)
2020-02-08 23:03:55,092 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:03:55,094 INFO sqlalchemy.engine.base.Engine Thread-22 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:03:55,094 INFO sqlalchemy.engine.base.Engine Thread-22 : ('bob', 1, 1)
2020-02-08 23:03:55,095 DEBUG sqlalchemy.engine.base.Engine Thread-22 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:03:55,095 INFO sqlalchemy.engine.base.Engine Thread-22 : ROLLBACK
2020-02-08 23:04:42,193 INFO sqlalchemy.engine.base.Engine Thread-31 : BEGIN (implicit)
2020-02-08 23:04:42,195 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 23:04:42,195 INFO sqlalchemy.engine.base.Engine Thread-31 : ('13', 1)
2020-02-08 23:04:42,196 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:04:42,196 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:04:42,201 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:04:42,201 INFO sqlalchemy.engine.base.Engine Thread-31 : ()
2020-02-08 23:04:42,203 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:04:42,203 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:04:42,203 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:04:42,204 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 23:04:42,205 INFO sqlalchemy.engine.base.Engine Thread-31 : (97,)
2020-02-08 23:04:42,205 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 23:04:42,205 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 23:04:42,206 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 23:04:42,209 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 23:04:42,209 INFO sqlalchemy.engine.base.Engine Thread-31 : (1, 1)
2020-02-08 23:04:42,210 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:04:42,210 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:04:42,212 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:04:42,212 INFO sqlalchemy.engine.base.Engine Thread-31 : (2, 1)
2020-02-08 23:04:42,213 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:04:42,213 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:04:42,270 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:04:42,270 INFO sqlalchemy.engine.base.Engine Thread-31 : ('bob', 1, 1)
2020-02-08 23:04:42,271 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:04:42,276 INFO sqlalchemy.engine.base.Engine Thread-31 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:04:42,276 INFO sqlalchemy.engine.base.Engine Thread-31 : ('bob', 1, 1)
2020-02-08 23:04:42,277 DEBUG sqlalchemy.engine.base.Engine Thread-31 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:04:42,277 INFO sqlalchemy.engine.base.Engine Thread-31 : ROLLBACK
2020-02-08 23:04:58,262 INFO sqlalchemy.engine.base.Engine Thread-40 : BEGIN (implicit)
2020-02-08 23:04:58,263 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 23:04:58,263 INFO sqlalchemy.engine.base.Engine Thread-40 : ('13', 1)
2020-02-08 23:04:58,264 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:04:58,264 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:04:58,272 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:04:58,272 INFO sqlalchemy.engine.base.Engine Thread-40 : ()
2020-02-08 23:04:58,274 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:04:58,274 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:04:58,274 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:04:58,276 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 23:04:58,276 INFO sqlalchemy.engine.base.Engine Thread-40 : (97,)
2020-02-08 23:04:58,276 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 23:04:58,277 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 23:04:58,277 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 23:04:58,280 INFO sqlalchemy.engine.base.Engine Thread-40 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 23:04:58,281 INFO sqlalchemy.engine.base.Engine Thread-40 : (1, 1)
2020-02-08 23:04:58,282 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:04:58,282 DEBUG sqlalchemy.engine.base.Engine Thread-40 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:23:30,782 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-02-08 23:23:30,789 INFO sqlalchemy.engine.base.Engine Thread-47 : BEGIN (implicit)
2020-02-08 23:23:30,792 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:23:30,792 INFO sqlalchemy.engine.base.Engine Thread-47 : ()
2020-02-08 23:23:30,794 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:23:30,796 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:23:30,796 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:23:30,799 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:23:30,799 INFO sqlalchemy.engine.base.Engine Thread-47 : (2, 1)
2020-02-08 23:23:30,800 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:23:30,800 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:23:30,804 INFO sqlalchemy.engine.base.Engine Thread-47 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:23:30,804 INFO sqlalchemy.engine.base.Engine Thread-47 : ('bob', 1, 1)
2020-02-08 23:23:30,805 DEBUG sqlalchemy.engine.base.Engine Thread-47 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:23:30,806 INFO sqlalchemy.engine.base.Engine Thread-47 : ROLLBACK
2020-02-08 23:23:31,326 INFO sqlalchemy.engine.base.Engine Thread-56 : BEGIN (implicit)
2020-02-08 23:23:31,328 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:23:31,328 INFO sqlalchemy.engine.base.Engine Thread-56 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 23:23:31,329 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:23:31,329 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 23:23:31,332 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:23:31,332 INFO sqlalchemy.engine.base.Engine Thread-56 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 23:23:31,333 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:23:31,333 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 23:23:31,337 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 23:23:31,337 INFO sqlalchemy.engine.base.Engine Thread-56 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:23:31,337 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:23:31,338 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:23:31,338 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:23:31,341 INFO sqlalchemy.engine.base.Engine Thread-56 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 23:23:31,341 INFO sqlalchemy.engine.base.Engine Thread-56 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:23:31,342 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:23:31,343 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:23:31,343 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:23:31,343 DEBUG sqlalchemy.engine.base.Engine Thread-56 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:23:31,344 INFO sqlalchemy.engine.base.Engine Thread-56 : ROLLBACK
2020-02-08 23:23:31,367 INFO sqlalchemy.engine.base.Engine Thread-57 : BEGIN (implicit)
2020-02-08 23:23:31,369 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:23:31,369 INFO sqlalchemy.engine.base.Engine Thread-57 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 23:23:31,370 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:23:31,370 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 23:23:31,373 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:23:31,373 INFO sqlalchemy.engine.base.Engine Thread-57 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 23:23:31,374 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:23:31,374 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 23:23:31,377 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 23:23:31,377 INFO sqlalchemy.engine.base.Engine Thread-57 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:23:31,378 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:23:31,378 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:23:31,378 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:23:31,382 INFO sqlalchemy.engine.base.Engine Thread-57 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 23:23:31,382 INFO sqlalchemy.engine.base.Engine Thread-57 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:23:31,383 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:23:31,383 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:23:31,383 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:23:31,383 DEBUG sqlalchemy.engine.base.Engine Thread-57 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:23:31,384 INFO sqlalchemy.engine.base.Engine Thread-57 : ROLLBACK
2020-02-08 23:23:33,919 INFO sqlalchemy.engine.base.Engine Thread-58 : BEGIN (implicit)
2020-02-08 23:23:33,920 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:23:33,920 INFO sqlalchemy.engine.base.Engine Thread-58 : (2, 1)
2020-02-08 23:23:33,921 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:23:33,921 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:23:33,923 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 23:23:33,923 INFO sqlalchemy.engine.base.Engine Thread-58 : ()
2020-02-08 23:23:33,924 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:23:33,924 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 23:23:33,924 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 23:23:33,925 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 23:23:33,925 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 23:23:33,925 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 23:23:33,925 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:23:33,927 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 23:23:33,927 INFO sqlalchemy.engine.base.Engine Thread-58 : ('bob',)
2020-02-08 23:23:33,928 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:23:33,928 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:23:33,932 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:23:33,932 INFO sqlalchemy.engine.base.Engine Thread-58 : ('bob', 1, 1)
2020-02-08 23:23:33,933 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:23:33,936 INFO sqlalchemy.engine.base.Engine Thread-58 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:23:33,936 INFO sqlalchemy.engine.base.Engine Thread-58 : ('bob', 1, 1)
2020-02-08 23:23:33,936 DEBUG sqlalchemy.engine.base.Engine Thread-58 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:23:33,937 INFO sqlalchemy.engine.base.Engine Thread-58 : ROLLBACK
2020-02-08 23:23:34,375 INFO sqlalchemy.engine.base.Engine Thread-67 : BEGIN (implicit)
2020-02-08 23:23:34,377 INFO sqlalchemy.engine.base.Engine Thread-67 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:23:34,377 INFO sqlalchemy.engine.base.Engine Thread-67 : (2, 1)
2020-02-08 23:23:34,377 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:23:34,378 DEBUG sqlalchemy.engine.base.Engine Thread-67 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:23:34,390 INFO sqlalchemy.engine.base.Engine Thread-67 : ROLLBACK
2020-02-08 23:23:34,397 INFO sqlalchemy.engine.base.Engine Thread-68 : BEGIN (implicit)
2020-02-08 23:23:34,398 INFO sqlalchemy.engine.base.Engine Thread-68 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:23:34,398 INFO sqlalchemy.engine.base.Engine Thread-68 : (2, 1)
2020-02-08 23:23:34,399 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:23:34,399 DEBUG sqlalchemy.engine.base.Engine Thread-68 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:23:34,400 INFO sqlalchemy.engine.base.Engine Thread-68 : ROLLBACK
2020-02-08 23:23:35,457 INFO sqlalchemy.engine.base.Engine Thread-69 : BEGIN (implicit)
2020-02-08 23:23:35,459 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 23:23:35,459 INFO sqlalchemy.engine.base.Engine Thread-69 : ('13', 1)
2020-02-08 23:23:35,460 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:23:35,460 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:23:35,465 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:23:35,465 INFO sqlalchemy.engine.base.Engine Thread-69 : ()
2020-02-08 23:23:35,466 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:23:35,467 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:23:35,467 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:23:35,468 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 23:23:35,468 INFO sqlalchemy.engine.base.Engine Thread-69 : (97,)
2020-02-08 23:23:35,469 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 23:23:35,469 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 23:23:35,469 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 23:23:35,472 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 23:23:35,472 INFO sqlalchemy.engine.base.Engine Thread-69 : (1, 1)
2020-02-08 23:23:35,473 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:23:35,474 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:23:35,476 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:23:35,476 INFO sqlalchemy.engine.base.Engine Thread-69 : (2, 1)
2020-02-08 23:23:35,477 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:23:35,477 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:23:35,482 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:23:35,482 INFO sqlalchemy.engine.base.Engine Thread-69 : ('bob', 1, 1)
2020-02-08 23:23:35,483 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:23:35,487 INFO sqlalchemy.engine.base.Engine Thread-69 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:23:35,488 INFO sqlalchemy.engine.base.Engine Thread-69 : ('bob', 1, 1)
2020-02-08 23:23:35,488 DEBUG sqlalchemy.engine.base.Engine Thread-69 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:23:35,489 INFO sqlalchemy.engine.base.Engine Thread-69 : ROLLBACK
2020-02-08 23:23:53,124 INFO sqlalchemy.engine.base.Engine Thread-78 : BEGIN (implicit)
2020-02-08 23:23:53,125 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 23:23:53,125 INFO sqlalchemy.engine.base.Engine Thread-78 : ('13', 1)
2020-02-08 23:23:53,127 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:23:53,127 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:23:53,133 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:23:53,133 INFO sqlalchemy.engine.base.Engine Thread-78 : ()
2020-02-08 23:23:53,134 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:23:53,135 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:23:53,135 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:23:53,136 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 23:23:53,136 INFO sqlalchemy.engine.base.Engine Thread-78 : (97,)
2020-02-08 23:23:53,137 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 23:23:53,137 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 23:23:53,137 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 23:23:53,140 INFO sqlalchemy.engine.base.Engine Thread-78 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 23:23:53,140 INFO sqlalchemy.engine.base.Engine Thread-78 : (1, 1)
2020-02-08 23:23:53,141 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:23:53,142 DEBUG sqlalchemy.engine.base.Engine Thread-78 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:24:52,356 INFO sqlalchemy.engine.base.Engine Thread-85 : BEGIN (implicit)
2020-02-08 23:24:52,358 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:24:52,358 INFO sqlalchemy.engine.base.Engine Thread-85 : ()
2020-02-08 23:24:52,360 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:24:52,360 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:24:52,360 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:24:52,362 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:24:52,363 INFO sqlalchemy.engine.base.Engine Thread-85 : (2, 1)
2020-02-08 23:24:52,363 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:24:52,363 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:24:52,368 INFO sqlalchemy.engine.base.Engine Thread-85 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:24:52,368 INFO sqlalchemy.engine.base.Engine Thread-85 : ('bob', 1, 1)
2020-02-08 23:24:52,368 DEBUG sqlalchemy.engine.base.Engine Thread-85 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:24:52,370 INFO sqlalchemy.engine.base.Engine Thread-85 : ROLLBACK
2020-02-08 23:24:52,488 INFO sqlalchemy.engine.base.Engine Thread-87 : ROLLBACK
2020-02-08 23:24:52,852 INFO sqlalchemy.engine.base.Engine Thread-94 : BEGIN (implicit)
2020-02-08 23:24:52,856 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:24:52,856 INFO sqlalchemy.engine.base.Engine Thread-94 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 23:24:52,857 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:24:52,857 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 23:24:52,860 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:24:52,861 INFO sqlalchemy.engine.base.Engine Thread-94 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 23:24:52,861 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:24:52,861 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 23:24:52,865 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 23:24:52,865 INFO sqlalchemy.engine.base.Engine Thread-94 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:24:52,866 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:24:52,866 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:24:52,866 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:24:52,869 INFO sqlalchemy.engine.base.Engine Thread-94 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 23:24:52,869 INFO sqlalchemy.engine.base.Engine Thread-94 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:24:52,870 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:24:52,870 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:24:52,870 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:24:52,870 DEBUG sqlalchemy.engine.base.Engine Thread-94 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:24:52,871 INFO sqlalchemy.engine.base.Engine Thread-94 : ROLLBACK
2020-02-08 23:24:52,897 INFO sqlalchemy.engine.base.Engine Thread-95 : BEGIN (implicit)
2020-02-08 23:24:52,899 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:24:52,899 INFO sqlalchemy.engine.base.Engine Thread-95 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 23:24:52,900 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:24:52,900 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 23:24:52,904 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:24:52,904 INFO sqlalchemy.engine.base.Engine Thread-95 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 23:24:52,905 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:24:52,905 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 23:24:52,908 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 23:24:52,908 INFO sqlalchemy.engine.base.Engine Thread-95 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:24:52,909 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:24:52,909 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:24:52,909 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:24:52,912 INFO sqlalchemy.engine.base.Engine Thread-95 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 23:24:52,912 INFO sqlalchemy.engine.base.Engine Thread-95 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:24:52,913 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:24:52,913 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:24:52,913 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:24:52,913 DEBUG sqlalchemy.engine.base.Engine Thread-95 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:24:52,914 INFO sqlalchemy.engine.base.Engine Thread-95 : ROLLBACK
2020-02-08 23:41:15,408 INFO sqlalchemy.engine.base.Engine Thread-96 : BEGIN (implicit)
2020-02-08 23:41:15,410 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:41:15,410 INFO sqlalchemy.engine.base.Engine Thread-96 : (2, 1)
2020-02-08 23:41:15,413 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:41:15,414 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:41:15,416 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 23:41:15,416 INFO sqlalchemy.engine.base.Engine Thread-96 : ()
2020-02-08 23:41:15,416 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:41:15,417 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 23:41:15,417 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 23:41:15,417 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 23:41:15,417 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 23:41:15,417 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 23:41:15,417 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:41:15,420 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 23:41:15,420 INFO sqlalchemy.engine.base.Engine Thread-96 : ('bob',)
2020-02-08 23:41:15,420 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:41:15,421 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:41:15,426 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:41:15,426 INFO sqlalchemy.engine.base.Engine Thread-96 : ('bob', 1, 1)
2020-02-08 23:41:15,427 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:41:15,429 INFO sqlalchemy.engine.base.Engine Thread-96 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:41:15,429 INFO sqlalchemy.engine.base.Engine Thread-96 : ('bob', 1, 1)
2020-02-08 23:41:15,430 DEBUG sqlalchemy.engine.base.Engine Thread-96 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:41:15,431 INFO sqlalchemy.engine.base.Engine Thread-96 : ROLLBACK
2020-02-08 23:41:16,203 INFO sqlalchemy.engine.base.Engine Thread-105 : BEGIN (implicit)
2020-02-08 23:41:16,205 INFO sqlalchemy.engine.base.Engine Thread-105 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:41:16,205 INFO sqlalchemy.engine.base.Engine Thread-105 : (2, 1)
2020-02-08 23:41:16,206 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:41:16,206 DEBUG sqlalchemy.engine.base.Engine Thread-105 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:41:16,207 INFO sqlalchemy.engine.base.Engine Thread-105 : ROLLBACK
2020-02-08 23:41:16,230 INFO sqlalchemy.engine.base.Engine Thread-106 : BEGIN (implicit)
2020-02-08 23:41:16,232 INFO sqlalchemy.engine.base.Engine Thread-106 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:41:16,232 INFO sqlalchemy.engine.base.Engine Thread-106 : (2, 1)
2020-02-08 23:41:16,232 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:41:16,233 DEBUG sqlalchemy.engine.base.Engine Thread-106 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:41:16,234 INFO sqlalchemy.engine.base.Engine Thread-106 : ROLLBACK
2020-02-08 23:41:17,021 INFO sqlalchemy.engine.base.Engine Thread-107 : BEGIN (implicit)
2020-02-08 23:41:17,023 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 23:41:17,023 INFO sqlalchemy.engine.base.Engine Thread-107 : ('13', 1)
2020-02-08 23:41:17,024 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:41:17,024 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:41:17,029 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:41:17,029 INFO sqlalchemy.engine.base.Engine Thread-107 : ()
2020-02-08 23:41:17,030 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:41:17,031 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:41:17,031 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:41:17,032 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 23:41:17,032 INFO sqlalchemy.engine.base.Engine Thread-107 : (97,)
2020-02-08 23:41:17,033 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 23:41:17,033 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 23:41:17,034 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 23:41:17,037 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 23:41:17,037 INFO sqlalchemy.engine.base.Engine Thread-107 : (1, 1)
2020-02-08 23:41:17,038 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:41:17,038 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:41:17,040 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:41:17,041 INFO sqlalchemy.engine.base.Engine Thread-107 : (2, 1)
2020-02-08 23:41:17,041 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:41:17,041 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:41:17,046 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:41:17,046 INFO sqlalchemy.engine.base.Engine Thread-107 : ('bob', 1, 1)
2020-02-08 23:41:17,046 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:41:17,052 INFO sqlalchemy.engine.base.Engine Thread-107 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:41:17,052 INFO sqlalchemy.engine.base.Engine Thread-107 : ('bob', 1, 1)
2020-02-08 23:41:17,052 DEBUG sqlalchemy.engine.base.Engine Thread-107 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:41:17,053 INFO sqlalchemy.engine.base.Engine Thread-107 : ROLLBACK
2020-02-08 23:52:33,627 INFO sqlalchemy.engine.base.Engine Thread-116 : BEGIN (implicit)
2020-02-08 23:52:33,630 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:52:33,630 INFO sqlalchemy.engine.base.Engine Thread-116 : ()
2020-02-08 23:52:33,632 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:52:33,633 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:52:33,633 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:52:33,636 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:52:33,636 INFO sqlalchemy.engine.base.Engine Thread-116 : (2, 1)
2020-02-08 23:52:33,636 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:33,637 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:52:33,641 INFO sqlalchemy.engine.base.Engine Thread-116 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:52:33,642 INFO sqlalchemy.engine.base.Engine Thread-116 : ('bob', 1, 1)
2020-02-08 23:52:33,642 DEBUG sqlalchemy.engine.base.Engine Thread-116 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:33,644 INFO sqlalchemy.engine.base.Engine Thread-116 : ROLLBACK
2020-02-08 23:52:34,219 INFO sqlalchemy.engine.base.Engine Thread-125 : BEGIN (implicit)
2020-02-08 23:52:34,220 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:52:34,220 INFO sqlalchemy.engine.base.Engine Thread-125 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 23:52:34,222 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:52:34,222 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 23:52:34,225 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:52:34,225 INFO sqlalchemy.engine.base.Engine Thread-125 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 23:52:34,226 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:52:34,226 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 23:52:34,230 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 23:52:34,230 INFO sqlalchemy.engine.base.Engine Thread-125 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:52:34,231 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:52:34,231 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:52:34,231 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:52:34,235 INFO sqlalchemy.engine.base.Engine Thread-125 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 23:52:34,235 INFO sqlalchemy.engine.base.Engine Thread-125 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:52:34,236 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:52:34,236 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:52:34,236 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:52:34,236 DEBUG sqlalchemy.engine.base.Engine Thread-125 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:52:34,237 INFO sqlalchemy.engine.base.Engine Thread-125 : ROLLBACK
2020-02-08 23:52:34,262 INFO sqlalchemy.engine.base.Engine Thread-126 : BEGIN (implicit)
2020-02-08 23:52:34,263 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:52:34,263 INFO sqlalchemy.engine.base.Engine Thread-126 : ('Mistyrose', 'Firebrick', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'YES')
2020-02-08 23:52:34,264 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:52:34,264 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (datetime.datetime(2020, 2, 20, 0, 0), datetime.datetime(2020, 2, 26, 23, 45), 'Test Feb', 'Test Feb', 'Yes', 'Mistyrose', 'Firebrick', 'Date Event')
2020-02-08 23:52:34,268 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.locked AS anon_1_locked, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT datesofinterest_1.doi_start_dt AS start, datesofinterest_1.doi_end_dt AS end, datesofinterest_1.doi_name AS title, datesofinterest_1.doi_comment AS description, parameters_1.param_name AS locked 
FROM datesofinterest AS datesofinterest_1 INNER JOIN parameters AS parameters_1 ON datesofinterest_1.doi_locked = parameters_1.id 
WHERE datesofinterest_1.doi_start_dt BETWEEN %s AND %s OR datesofinterest_1.doi_end_dt BETWEEN %s AND %s OR datesofinterest_1.doi_start_dt < %s AND datesofinterest_1.doi_end_dt > %s) AS anon_1 
WHERE lower(anon_1.locked) LIKE lower(%s)
2020-02-08 23:52:34,268 INFO sqlalchemy.engine.base.Engine Thread-126 : ('Lightblue', 'Darkblue', 'Date Event', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), 'NO')
2020-02-08 23:52:34,269 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_locked', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:52:34,269 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (datetime.datetime(2020, 2, 22, 0, 0), datetime.datetime(2020, 2, 28, 23, 45), 'Change Freeze (Critical)', 'Change Freeze (Critical) that is very important', 'No', 'Lightblue', 'Darkblue', 'Date Event')
2020-02-08 23:52:34,272 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NOT NULL
2020-02-08 23:52:34,273 INFO sqlalchemy.engine.base.Engine Thread-126 : ('Lightgreen', 'black', 'Booking Event (Approved)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:52:34,273 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:52:34,274 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), 'Test Booking', 'testing', datetime.datetime(2020, 2, 7, 0, 13, 57), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:52:34,274 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), 'Test Booking 6', 'test', datetime.datetime(2020, 2, 7, 0, 14, 16), 'Lightgreen', 'black', 'Booking Event (Approved)')
2020-02-08 23:52:34,278 INFO sqlalchemy.engine.base.Engine Thread-126 : SELECT anon_1.start AS anon_1_start, anon_1.end AS anon_1_end, anon_1.title AS anon_1_title, anon_1.description AS anon_1_description, anon_1.approved AS anon_1_approved, %s AS `backgroundColor`, %s AS `textColor`, %s AS `eventType` 
FROM (SELECT bookings_1.start_dt AS start, bookings_1.end_dt AS end, bookings_1.title AS title, bookings_1.description AS description, bookings_1.approved_date AS approved 
FROM bookings AS bookings_1 
WHERE bookings_1.start_dt BETWEEN %s AND %s OR bookings_1.end_dt BETWEEN %s AND %s OR bookings_1.start_dt < %s AND bookings_1.end_dt > %s) AS anon_1 
WHERE anon_1.approved IS NULL
2020-02-08 23:52:34,278 INFO sqlalchemy.engine.base.Engine Thread-126 : ('Lightgray', 'black', 'Booking Event (Pending)', datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0), datetime.datetime(2020, 1, 27, 0, 0), datetime.datetime(2020, 3, 9, 0, 0))
2020-02-08 23:52:34,279 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Col ('anon_1_start', 'anon_1_end', 'anon_1_title', 'anon_1_description', 'anon_1_approved', 'backgroundColor', 'textColor', 'eventType')
2020-02-08 23:52:34,279 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), 'Test Booking 2', 'testing 2', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:52:34,279 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), 'Test Booking zz', 'zzz', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:52:34,279 DEBUG sqlalchemy.engine.base.Engine Thread-126 : Row (datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), "Bob's booking", 'project doing something', None, 'Lightgray', 'black', 'Booking Event (Pending)')
2020-02-08 23:52:34,280 INFO sqlalchemy.engine.base.Engine Thread-126 : ROLLBACK
2020-02-08 23:52:35,599 INFO sqlalchemy.engine.base.Engine Thread-127 : BEGIN (implicit)
2020-02-08 23:52:35,600 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:52:35,600 INFO sqlalchemy.engine.base.Engine Thread-127 : (2, 1)
2020-02-08 23:52:35,601 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:35,601 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:52:35,603 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 23:52:35,603 INFO sqlalchemy.engine.base.Engine Thread-127 : ()
2020-02-08 23:52:35,603 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:52:35,604 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 23:52:35,604 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 23:52:35,604 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 23:52:35,604 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 23:52:35,604 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 23:52:35,604 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:52:35,606 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 23:52:35,606 INFO sqlalchemy.engine.base.Engine Thread-127 : ('bob',)
2020-02-08 23:52:35,607 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:52:35,607 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:52:35,611 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:52:35,611 INFO sqlalchemy.engine.base.Engine Thread-127 : ('bob', 1, 1)
2020-02-08 23:52:35,612 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:35,615 INFO sqlalchemy.engine.base.Engine Thread-127 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:52:35,615 INFO sqlalchemy.engine.base.Engine Thread-127 : ('bob', 1, 1)
2020-02-08 23:52:35,616 DEBUG sqlalchemy.engine.base.Engine Thread-127 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:35,617 INFO sqlalchemy.engine.base.Engine Thread-127 : ROLLBACK
2020-02-08 23:52:36,160 INFO sqlalchemy.engine.base.Engine Thread-136 : BEGIN (implicit)
2020-02-08 23:52:36,161 INFO sqlalchemy.engine.base.Engine Thread-136 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:52:36,161 INFO sqlalchemy.engine.base.Engine Thread-136 : (2, 1)
2020-02-08 23:52:36,162 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:36,163 DEBUG sqlalchemy.engine.base.Engine Thread-136 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:52:36,164 INFO sqlalchemy.engine.base.Engine Thread-136 : ROLLBACK
2020-02-08 23:52:36,187 INFO sqlalchemy.engine.base.Engine Thread-137 : BEGIN (implicit)
2020-02-08 23:52:36,188 INFO sqlalchemy.engine.base.Engine Thread-137 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:52:36,188 INFO sqlalchemy.engine.base.Engine Thread-137 : (2, 1)
2020-02-08 23:52:36,189 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:36,189 DEBUG sqlalchemy.engine.base.Engine Thread-137 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:52:36,190 INFO sqlalchemy.engine.base.Engine Thread-137 : ROLLBACK
2020-02-08 23:52:36,950 INFO sqlalchemy.engine.base.Engine Thread-138 : BEGIN (implicit)
2020-02-08 23:52:36,952 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 23:52:36,952 INFO sqlalchemy.engine.base.Engine Thread-138 : ('13', 1)
2020-02-08 23:52:36,952 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:52:36,953 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:52:36,958 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:52:36,958 INFO sqlalchemy.engine.base.Engine Thread-138 : ()
2020-02-08 23:52:36,959 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:52:36,959 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:52:36,959 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:52:36,961 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 23:52:36,961 INFO sqlalchemy.engine.base.Engine Thread-138 : (97,)
2020-02-08 23:52:36,962 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 23:52:36,962 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 23:52:36,962 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 23:52:36,966 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 23:52:36,966 INFO sqlalchemy.engine.base.Engine Thread-138 : (1, 1)
2020-02-08 23:52:36,967 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:52:36,967 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:52:36,970 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:52:36,970 INFO sqlalchemy.engine.base.Engine Thread-138 : (2, 1)
2020-02-08 23:52:36,970 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:36,970 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:52:37,030 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:52:37,030 INFO sqlalchemy.engine.base.Engine Thread-138 : ('bob', 1, 1)
2020-02-08 23:52:37,030 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:37,035 INFO sqlalchemy.engine.base.Engine Thread-138 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:52:37,035 INFO sqlalchemy.engine.base.Engine Thread-138 : ('bob', 1, 1)
2020-02-08 23:52:37,036 DEBUG sqlalchemy.engine.base.Engine Thread-138 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:37,036 INFO sqlalchemy.engine.base.Engine Thread-138 : ROLLBACK
2020-02-08 23:52:40,244 INFO sqlalchemy.engine.base.Engine Thread-147 : BEGIN (implicit)
2020-02-08 23:52:40,245 INFO sqlalchemy.engine.base.Engine Thread-147 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 23:52:40,245 INFO sqlalchemy.engine.base.Engine Thread-147 : ('13', 1)
2020-02-08 23:52:40,246 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:52:40,246 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:52:40,251 INFO sqlalchemy.engine.base.Engine Thread-147 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:52:40,251 INFO sqlalchemy.engine.base.Engine Thread-147 : ()
2020-02-08 23:52:40,252 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:52:40,253 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:52:40,254 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:52:40,255 INFO sqlalchemy.engine.base.Engine Thread-147 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 23:52:40,255 INFO sqlalchemy.engine.base.Engine Thread-147 : (97,)
2020-02-08 23:52:40,256 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 23:52:40,256 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 23:52:40,256 DEBUG sqlalchemy.engine.base.Engine Thread-147 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 23:52:40,258 INFO sqlalchemy.engine.base.Engine Thread-147 : ROLLBACK
2020-02-08 23:52:40,324 INFO sqlalchemy.engine.base.Engine Thread-148 : BEGIN (implicit)
2020-02-08 23:52:40,325 INFO sqlalchemy.engine.base.Engine Thread-148 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:52:40,326 INFO sqlalchemy.engine.base.Engine Thread-148 : (2, 1)
2020-02-08 23:52:40,326 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:40,326 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:52:40,328 INFO sqlalchemy.engine.base.Engine Thread-148 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings
2020-02-08 23:52:40,328 INFO sqlalchemy.engine.base.Engine Thread-148 : ()
2020-02-08 23:52:40,329 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:52:40,329 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (7, 0, 'Test Booking', datetime.datetime(2020, 3, 3, 2, 0), datetime.datetime(2020, 3, 3, 4, 0), '123456', 'Me', '100000', 'Testing project', 'testing', 'Philip Troon', 1, 98, 0, datetime.datetime(2020, 2, 7, 0, 13, 57), 'philip', 'SCR1234567', '', datetime.datetime(2020, 2, 6, 12, 6, 30))
2020-02-08 23:52:40,329 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (8, 0, 'Test Booking 2', datetime.datetime(2020, 2, 29, 2, 0), datetime.datetime(2020, 2, 29, 4, 0), '123456', 'Me', '9999999', 'Testing project 2', 'testing 2', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 14, 41))
2020-02-08 23:52:40,330 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (9, 0, 'Test Booking 3', datetime.datetime(2020, 5, 14, 2, 0), datetime.datetime(2020, 5, 14, 4, 0), '123456', 'Me', '100000', 'Testing project 3', 'testing', 'Philip Troon', 2, 98, 0, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 6, 12, 50, 2))
2020-02-08 23:52:40,330 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (11, 0, 'Test Booking 6', datetime.datetime(2020, 3, 1, 2, 0), datetime.datetime(2020, 3, 1, 4, 0), '123456', 'Me', '9999999', 'Testing project 6', 'test', 'Philip Troon', 1, 98, 1, datetime.datetime(2020, 2, 7, 0, 14, 16), 'philip', 'SCR1234568', '', datetime.datetime(2020, 2, 6, 20, 19, 11))
2020-02-08 23:52:40,330 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (12, 0, 'Test Booking zz', datetime.datetime(2020, 2, 9, 2, 0), datetime.datetime(2020, 2, 9, 4, 0), '123456', 'Me', '100000', 'Testing project zz', 'zzz', 'Philip Troon', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 0, 39, 41))
2020-02-08 23:52:40,330 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:52:40,332 INFO sqlalchemy.engine.base.Engine Thread-148 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE lower(bookings.owner_id) LIKE lower(%s)
2020-02-08 23:52:40,332 INFO sqlalchemy.engine.base.Engine Thread-148 : ('bob',)
2020-02-08 23:52:40,333 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:52:40,333 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:52:40,337 INFO sqlalchemy.engine.base.Engine Thread-148 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:52:40,337 INFO sqlalchemy.engine.base.Engine Thread-148 : ('bob', 1, 1)
2020-02-08 23:52:40,338 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:40,340 INFO sqlalchemy.engine.base.Engine Thread-148 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:52:40,340 INFO sqlalchemy.engine.base.Engine Thread-148 : ('bob', 1, 1)
2020-02-08 23:52:40,341 DEBUG sqlalchemy.engine.base.Engine Thread-148 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:40,342 INFO sqlalchemy.engine.base.Engine Thread-148 : ROLLBACK
2020-02-08 23:52:40,817 INFO sqlalchemy.engine.base.Engine Thread-157 : BEGIN (implicit)
2020-02-08 23:52:40,818 INFO sqlalchemy.engine.base.Engine Thread-157 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:52:40,818 INFO sqlalchemy.engine.base.Engine Thread-157 : (2, 1)
2020-02-08 23:52:40,819 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:40,820 DEBUG sqlalchemy.engine.base.Engine Thread-157 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:52:40,821 INFO sqlalchemy.engine.base.Engine Thread-157 : ROLLBACK
2020-02-08 23:52:40,841 INFO sqlalchemy.engine.base.Engine Thread-158 : BEGIN (implicit)
2020-02-08 23:52:40,842 INFO sqlalchemy.engine.base.Engine Thread-158 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:52:40,842 INFO sqlalchemy.engine.base.Engine Thread-158 : (2, 1)
2020-02-08 23:52:40,842 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:40,843 DEBUG sqlalchemy.engine.base.Engine Thread-158 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:52:40,844 INFO sqlalchemy.engine.base.Engine Thread-158 : ROLLBACK
2020-02-08 23:52:45,123 INFO sqlalchemy.engine.base.Engine Thread-159 : BEGIN (implicit)
2020-02-08 23:52:45,125 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT bookings.id AS bookings_id, bookings.slot_id AS bookings_slot_id, bookings.title AS bookings_title, bookings.start_dt AS bookings_start_dt, bookings.end_dt AS bookings_end_dt, bookings.ticket AS bookings_ticket, bookings.stakeholder_id AS bookings_stakeholder_id, bookings.budget AS bookings_budget, bookings.project AS bookings_project, bookings.description AS bookings_description, bookings.owner_id AS bookings_owner_id, bookings.complex AS bookings_complex, bookings.cluster AS bookings_cluster, bookings.approval_required AS bookings_approval_required, bookings.approved_date AS bookings_approved_date, bookings.approved_by AS bookings_approved_by, bookings.change_ref AS bookings_change_ref, bookings.change_subref AS bookings_change_subref, bookings.logged AS bookings_logged 
FROM bookings 
WHERE bookings.id = %s 
 LIMIT %s
2020-02-08 23:52:45,125 INFO sqlalchemy.engine.base.Engine Thread-159 : ('13', 1)
2020-02-08 23:52:45,126 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('bookings_id', 'bookings_slot_id', 'bookings_title', 'bookings_start_dt', 'bookings_end_dt', 'bookings_ticket', 'bookings_stakeholder_id', 'bookings_budget', 'bookings_project', 'bookings_description', 'bookings_owner_id', 'bookings_complex', 'bookings_cluster', 'bookings_approval_required', 'bookings_approved_date', 'bookings_approved_by', 'bookings_change_ref', 'bookings_change_subref', 'bookings_logged')
2020-02-08 23:52:45,126 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (13, 0, "Bob's booking", datetime.datetime(2020, 2, 15, 2, 0), datetime.datetime(2020, 2, 15, 4, 0), '123456', 'johnzz', '100000', "Bob's project", 'project doing something', 'bob', 1, 98, 1, None, None, 'SCR1234568', '', datetime.datetime(2020, 2, 8, 21, 33, 23))
2020-02-08 23:52:45,130 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes ORDER BY complexes.complex_name
2020-02-08 23:52:45,130 INFO sqlalchemy.engine.base.Engine Thread-159 : ()
2020-02-08 23:52:45,131 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:52:45,131 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:52:45,131 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (2, 'Made Up Fortigate', 86, 'test', 'test', 'test', 'test', 'test', 'test', 91, 'test', 'test', '02:00', '04:00', 'NYNYNYN', 'test', 'test', '', '', '', '', '', '', '', 61, '', '', '', '', '', '', 103, '', 61, 107, '06/02', '07/02', '0', '04:00', '06:00', 'NNNNNYY', '', 94, datetime.datetime(2020, 2, 4, 13, 27, 52), 67)
2020-02-08 23:52:45,133 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT parameters.id AS parameters_id, parameters.param_name AS parameters_param_name, parameters.param_value AS parameters_param_value, parameters.param_group AS parameters_param_group, parameters.param_parent AS parameters_param_parent, parameters.param_disabled AS parameters_param_disabled, parameters.param_critical AS parameters_param_critical 
FROM parameters 
WHERE parameters.param_group = %s ORDER BY parameters.param_name
2020-02-08 23:52:45,133 INFO sqlalchemy.engine.base.Engine Thread-159 : (97,)
2020-02-08 23:52:45,134 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('parameters_id', 'parameters_param_name', 'parameters_param_value', 'parameters_param_group', 'parameters_param_parent', 'parameters_param_disabled', 'parameters_param_critical')
2020-02-08 23:52:45,134 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (98, 'Inner', 'Inner', 97, 0, 0, 0)
2020-02-08 23:52:45,134 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (99, 'Outer', 'Outer', 97, 0, 0, 0)
2020-02-08 23:52:45,138 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT complexes.id AS complexes_id, complexes.complex_name AS complexes_complex_name, complexes.complex_manager AS complexes_complex_manager, complexes.complex_fw_inner_1 AS complexes_complex_fw_inner_1, complexes.complex_fw_inner_2 AS complexes_complex_fw_inner_2, complexes.complex_fw_outer_1 AS complexes_complex_fw_outer_1, complexes.complex_fw_outer_2 AS complexes_complex_fw_outer_2, complexes.complex_fw_location_1 AS complexes_complex_fw_location_1, complexes.complex_fw_location_2 AS complexes_complex_fw_location_2, complexes.complex_fw_type AS complexes_complex_fw_type, complexes.complex_serial AS complexes_complex_serial, complexes.complex_license AS complexes_complex_license, complexes.complex_push_start AS complexes_complex_push_start, complexes.complex_push_end AS complexes_complex_push_end, complexes.complex_push_days AS complexes_complex_push_days, complexes.complex_category AS complexes_complex_category, complexes.complex_hardware AS complexes_complex_hardware, complexes.complex_fw_inner_name_1 AS complexes_complex_fw_inner_name_1, complexes.complex_fw_inner_name_2 AS complexes_complex_fw_inner_name_2, complexes.complex_location_1 AS complexes_complex_location_1, complexes.complex_fw_outer_name_1 AS complexes_complex_fw_outer_name_1, complexes.complex_fw_outer_name_2 AS complexes_complex_fw_outer_name_2, complexes.complex_location_2 AS complexes_complex_location_2, complexes.complex_location_all AS complexes_complex_location_all, complexes.complex_area AS complexes_complex_area, complexes.complex_fw_info1 AS complexes_complex_fw_info1, complexes.complex_fw_info2 AS complexes_complex_fw_info2, complexes.complex_fw_inner_info1 AS complexes_complex_fw_inner_info1, complexes.complex_fw_inner_info2 AS complexes_complex_fw_inner_info2, complexes.complex_fw_outer_info1 AS complexes_complex_fw_outer_info1, complexes.complex_fw_outer_info2 AS complexes_complex_fw_outer_info2, complexes.complex_type AS complexes_complex_type, complexes.complex_info_1 AS complexes_complex_info_1, complexes.complex_country AS complexes_complex_country, complexes.complex_restricted AS complexes_complex_restricted, complexes.complex_restrict_start AS complexes_complex_restrict_start, complexes.complex_restrict_end AS complexes_complex_restrict_end, complexes.complex_allow_slot_day AS complexes_complex_allow_slot_day, complexes.complex_allow_slot_start AS complexes_complex_allow_slot_start, complexes.complex_allow_slot_end AS complexes_complex_allow_slot_end, complexes.complex_push_day_extra AS complexes_complex_push_day_extra, complexes.complex_change_info AS complexes_complex_change_info, complexes.complex_environment AS complexes_complex_environment, complexes.complex_updated AS complexes_complex_updated, complexes.complex_active AS complexes_complex_active 
FROM complexes 
WHERE complexes.id = %s 
 LIMIT %s
2020-02-08 23:52:45,138 INFO sqlalchemy.engine.base.Engine Thread-159 : (1, 1)
2020-02-08 23:52:45,139 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('complexes_id', 'complexes_complex_name', 'complexes_complex_manager', 'complexes_complex_fw_inner_1', 'complexes_complex_fw_inner_2', 'complexes_complex_fw_outer_1', 'complexes_complex_fw_outer_2', 'complexes_complex_fw_location_1', 'complexes_complex_fw_location_2', 'complexes_complex_fw_type', 'complexes_complex_serial', 'complexes_complex_license', 'complexes_complex_push_start', 'complexes_complex_push_end', 'complexes_complex_push_days', 'complexes_complex_category', 'complexes_complex_hardware', 'complexes_complex_fw_inner_name_1', 'complexes_complex_fw_inner_name_2', 'complexes_complex_location_1', 'complexes_complex_fw_outer_name_1', 'complexes_complex_fw_outer_name_2', 'complexes_complex_location_2', 'complexes_complex_location_all', 'complexes_complex_area', 'complexes_complex_fw_info1', 'complexes_complex_fw_info2', 'complexes_complex_fw_inner_info1', 'complexes_complex_fw_inner_info2', 'complexes_complex_fw_outer_info1', 'complexes_complex_fw_outer_info2', 'complexes_complex_type', 'complexes_complex_info_1', 'complexes_complex_country', 'complexes_complex_restricted', 'complexes_complex_restrict_start', 'complexes_complex_restrict_end', 'complexes_complex_allow_slot_day', 'complexes_complex_allow_slot_start', 'complexes_complex_allow_slot_end', 'complexes_complex_push_day_extra', 'complexes_complex_change_info', 'complexes_complex_environment', 'complexes_complex_updated', 'complexes_complex_active')
2020-02-08 23:52:45,139 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (1, 'Made Up CheckPoint', 87, 'asd', 'asd', 'asd', 'asd', 'asd', 'asd', 91, 'asd', 'asd', '02:00', '04:00', 'NYNNNNN', 'asd', 'asd', '', '', '', '', '', '', '', 69, '', '', '', '', '', '', 108, '', 69, 107, '0', '0', '0', '02:00', '04:00', 'NNNNNYY', '', 95, datetime.datetime(2020, 1, 27, 9, 1), 67)
2020-02-08 23:52:45,141 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users 
WHERE users.id = %s 
 LIMIT %s
2020-02-08 23:52:45,141 INFO sqlalchemy.engine.base.Engine Thread-159 : (2, 1)
2020-02-08 23:52:45,142 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:45,142 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Row (2, 'bob', 'Bob', 'Smith', 'User account for Bob Smith 123', '$2b$12$S1dmklX6EOC.5JeHQ8imiO3Wa6hZcNBb7zgZHbuqUWyxmMWv3WjrS', 'bob@somewhere.com', 1, 64, datetime.datetime(2019, 8, 28, 11, 46, 8), None, datetime.datetime(2020, 1, 30, 1, 26, 17), 'philip', 0)
2020-02-08 23:52:45,146 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:52:45,146 INFO sqlalchemy.engine.base.Engine Thread-159 : ('bob', 1, 1)
2020-02-08 23:52:45,147 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:45,152 INFO sqlalchemy.engine.base.Engine Thread-159 : SELECT users.id AS users_id, users.login_id AS users_login_id, users.forename AS users_forename, users.surname AS users_surname, users.comment AS users_comment, users._password AS users__password, users.email AS users_email, users.`role` AS users_role, users.vendor AS users_vendor, users.created_date AS users_created_date, users.last_login AS users_last_login, users.last_modified AS users_last_modified, users.modified_by AS users_modified_by, users.enabled AS users_enabled 
FROM users INNER JOIN roles ON users.`role` = roles.id 
WHERE users.login_id = %s AND roles.role_admin = %s 
 LIMIT %s
2020-02-08 23:52:45,152 INFO sqlalchemy.engine.base.Engine Thread-159 : ('bob', 1, 1)
2020-02-08 23:52:45,152 DEBUG sqlalchemy.engine.base.Engine Thread-159 : Col ('users_id', 'users_login_id', 'users_forename', 'users_surname', 'users_comment', 'users__password', 'users_email', 'users_role', 'users_vendor', 'users_created_date', 'users_last_login', 'users_last_modified', 'users_modified_by', 'users_enabled')
2020-02-08 23:52:45,153 INFO sqlalchemy.engine.base.Engine Thread-159 : ROLLBACK
